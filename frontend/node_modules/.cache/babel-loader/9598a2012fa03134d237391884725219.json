{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/components/Table.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'; // A great library for fuzzy filtering/sorting items\n\nimport matchSorter from 'match-sorter'; // Define a default UI for filtering\n\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter\n}) {\n  _s();\n\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: [\"Search:\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      value: value || \"\",\n      onChange: e => {\n        setValue(e.target.value);\n        onChange(e.target.value);\n      },\n      placeholder: `${count} records...`,\n      style: {\n        fontSize: '1.1rem',\n        border: '0'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n} // Define a default UI for filtering\n\n\n_s(GlobalFilter, \"u76gItWTPW4jhTYSCcNG7/LfbyA=\", false, function () {\n  return [useAsyncDebounce];\n});\n\n_c = GlobalFilter;\n\nfunction DefaultColumnFilter({\n  column: {\n    filterValue,\n    preFilteredRows,\n    setFilter\n  }\n}) {\n  const count = preFilteredRows.length;\n  return /*#__PURE__*/_jsxDEV(\"input\", {\n    value: filterValue || '',\n    onChange: e => {\n      setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n    },\n    placeholder: `Search ${count} records...`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = DefaultColumnFilter;\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, {\n    keys: [row => row.values[id]]\n  });\n} // Let the table remove the filter if the string is empty\n\n\nfuzzyTextFilterFn.autoRemove = val => !val; // Our table component\n\n\nexport default function Table({\n  columns,\n  data\n}) {\n  _s2();\n\n  const filterTypes = React.useMemo(() => ({\n    // Add a new fuzzyTextFilterFn filter type.\n    fuzzyText: fuzzyTextFilterFn,\n    // Or, override the default text filter to use\n    // \"startWith\"\n    text: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n      });\n    }\n  }), []);\n  const defaultColumn = React.useMemo(() => ({\n    // Let's set up our default Filter UI\n    Filter: DefaultColumnFilter\n  }), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    // Be sure to pass the defaultColumn option\n    filterTypes\n  }, useFilters, // useFilters!\n  useGlobalFilter // useGlobalFilter!\n  ); // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n\n  const firstPageRows = rows.slice(0, 10);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: [headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n          children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n            children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: column.canFilter ? column.render('Filter') : null\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: /*#__PURE__*/_jsxDEV(\"th\", {\n            colSpan: visibleColumns.length,\n            style: {\n              textAlign: 'left'\n            },\n            children: /*#__PURE__*/_jsxDEV(GlobalFilter, {\n              preGlobalFilteredRows: preGlobalFilteredRows,\n              globalFilter: state.globalFilter,\n              setGlobalFilter: setGlobalFilter\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n        children: firstPageRows.map((row, i) => {\n          prepareRow(row);\n          return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n            children: row.cells.map(cell => {\n              return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                children: cell.render('Cell')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 26\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Showing the first 20 results of \", rows.length, \" rows\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"pre\", {\n        children: /*#__PURE__*/_jsxDEV(\"code\", {\n          children: JSON.stringify(state.filters, null, 2)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n} // \n\n_s2(Table, \"rWN+gVhT0kYSLxE7UaMFym1MII0=\", false, function () {\n  return [useTable];\n});\n\n_c3 = Table;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"GlobalFilter\");\n$RefreshReg$(_c2, \"DefaultColumnFilter\");\n$RefreshReg$(_c3, \"Table\");","map":{"version":3,"sources":["/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/components/Table.js"],"names":["React","useTable","useFilters","useGlobalFilter","useAsyncDebounce","matchSorter","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","value","setValue","useState","onChange","undefined","e","target","fontSize","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","fuzzyTextFilterFn","rows","id","keys","row","values","autoRemove","val","Table","columns","data","filterTypes","useMemo","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","visibleColumns","firstPageRows","slice","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","textAlign","i","getRowProps","cells","cell","getCellProps","JSON","stringify","filters"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\n// A great library for fuzzy filtering/sorting items\nimport matchSorter from 'match-sorter'\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) {\n  const count = preGlobalFilteredRows.length\n  const [value, setValue] = React.useState(globalFilter)\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined)\n  }, 200)\n\n  return (\n    <span>\n      Search:{' '}\n      <input\n        value={value || \"\"}\n        onChange={e => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`${count} records...`}\n        style={{\n          fontSize: '1.1rem',\n          border: '0',\n        }}\n      />\n    </span>\n  )\n}\n\n// Define a default UI for filtering\nfunction DefaultColumnFilter({\n  column: { filterValue, preFilteredRows, setFilter },\n}) {\n  const count = preFilteredRows.length\n\n  return (\n    <input\n      value={filterValue || ''}\n      onChange={e => {\n        setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n      }}\n      placeholder={`Search ${count} records...`}\n    />\n  )\n}\n\nfunction fuzzyTextFilterFn(rows, id, filterValue) {\n  return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n}\n\n// Let the table remove the filter if the string is empty\nfuzzyTextFilterFn.autoRemove = val => !val\n\n// Our table component\nexport default function Table({ columns, data }) {\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter(row => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true\n        })\n      },\n    }),\n    []\n  )\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    visibleColumns,\n    preGlobalFilteredRows,\n    setGlobalFilter,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn, // Be sure to pass the defaultColumn option\n      filterTypes,\n    },\n    useFilters, // useFilters!\n    useGlobalFilter // useGlobalFilter!\n  )\n\n  // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n  const firstPageRows = rows.slice(0, 10)\n\n  return (\n    <>\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                  {/* Render the columns filter UI */}\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n          <tr>\n            <th\n              colSpan={visibleColumns.length}\n              style={{\n                textAlign: 'left',\n              }}\n            >\n              <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n              />\n            </th>\n          </tr>\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {firstPageRows.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <br />\n      <div>Showing the first 20 results of {rows.length} rows</div>\n      <div>\n        <pre>\n          <code>{JSON.stringify(state.filters, null, 2)}</code>\n        </pre>\n      </div>\n    </>\n  )\n}\n\n// \n\n"]},"metadata":{},"sourceType":"module"}