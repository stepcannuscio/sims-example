{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/components/Table.js\",\n    _s = $RefreshSig$();\n\n// import React from 'react'\n// import { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\n// // A great library for fuzzy filtering/sorting items\n// import {matchSorter} from 'match-sorter'\n// // Our table component\n// export default function Table({ columns, data }) {\n//     // Define a default UI for filtering\n// function GlobalFilter({\n//     preGlobalFilteredRows,\n//     globalFilter,\n//     setGlobalFilter,\n//   }) {\n//     const count = preGlobalFilteredRows.length\n//     const [value, setValue] = React.useState(globalFilter)\n//     const onChange = useAsyncDebounce(value => {\n//       setGlobalFilter(value || undefined)\n//     }, 200)\n//     return (\n//       <span>\n//         Search:{' '}\n//         <input\n//           value={value || \"\"}\n//           onChange={e => {\n//             setValue(e.target.value);\n//             onChange(e.target.value);\n//           }}\n//           placeholder={`${count} records...`}\n//           style={{\n//             fontSize: '1.1rem',\n//             border: '0',\n//           }}\n//         />\n//       </span>\n//     )\n//   }\n//   // Define a default UI for filtering\n//   function DefaultColumnFilter({\n//     column: { filterValue, preFilteredRows, setFilter },\n//   }) {\n//     const count = preFilteredRows.length\n//     return (\n//       <input\n//         value={filterValue || ''}\n//         onChange={e => {\n//           setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n//         }}\n//         placeholder={`Search ${count} records...`}\n//       />\n//     )\n//   }\n//   function fuzzyTextFilterFn(rows, id, filterValue) {\n//     return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n//   }\n//   // Let the table remove the filter if the string is empty\n//   fuzzyTextFilterFn.autoRemove = val => !val\n//   const filterTypes = React.useMemo(\n//     () => ({\n//       // Add a new fuzzyTextFilterFn filter type.\n//       fuzzyText: fuzzyTextFilterFn,\n//       // Or, override the default text filter to use\n//       // \"startWith\"\n//       text: (rows, id, filterValue) => {\n//         return rows.filter(row => {\n//           const rowValue = row.values[id]\n//           return rowValue !== undefined\n//             ? String(rowValue)\n//                 .toLowerCase()\n//                 .startsWith(String(filterValue).toLowerCase())\n//             : true\n//         })\n//       },\n//     }),\n//     []\n//   )\n//   const defaultColumn = React.useMemo(\n//     () => ({\n//       // Let's set up our default Filter UI\n//       Filter: DefaultColumnFilter,\n//     }),\n//     []\n//   )\n//   const {\n//     getTableProps,\n//     getTableBodyProps,\n//     headerGroups,\n//     rows,\n//     prepareRow,\n//     state,\n//     visibleColumns,\n//     preGlobalFilteredRows,\n//     setGlobalFilter,\n//   } = useTable(\n//     {\n//       columns,\n//       data,\n//       defaultColumn, // Be sure to pass the defaultColumn option\n//       filterTypes,\n//     },\n//     useFilters, // useFilters!\n//     useGlobalFilter // useGlobalFilter!\n//   )\n//   // We don't want to render all of the rows for this example, so cap\n//   // it for this use case\n//   const firstPageRows = rows.slice(0, 10)\n//   return (\n//     <>\n//     <div class=\"inventory-table\">\n//     {/* <GlobalFilter\n//                 preGlobalFilteredRows={preGlobalFilteredRows}\n//                 globalFilter={state.globalFilter}\n//                 setGlobalFilter={setGlobalFilter}\n//                 // style={globalFilterr}\n//               /> */}\n//       <table {...getTableProps()}>\n//         <thead>\n//           {headerGroups.map(headerGroup => (\n//             <tr {...headerGroup.getHeaderGroupProps()}>\n//               {headerGroup.headers.map(column => (\n//                 <th {...column.getHeaderProps()}>\n//                   {column.render('Header')}\n//                   {/* Render the columns filter UI */}\n//                   <div>{column.canFilter ? column.render('Filter') : null}</div>\n//                 </th>\n//               ))}\n//             </tr>\n//           ))}\n//           <tr>\n//             <th\n//               colSpan={visibleColumns.length}\n//               style={{\n//                 textAlign: 'left',\n//               }}\n//             >\n//             </th>\n//           </tr>\n//         </thead>\n//         <tbody {...getTableBodyProps()}>\n//           {firstPageRows.map((row, i) => {\n//             prepareRow(row)\n//             return (\n//               <tr {...row.getRowProps()}>\n//                 {row.cells.map(cell => {\n//                   return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n//                 })}\n//               </tr>\n//             )\n//           })}\n//         </tbody>\n//       </table>\n//       <br />\n//       <div>Showing the first 20 results of {rows.length} rows</div>\n//       <div>\n//         <pre>\n//           <code>{JSON.stringify(state.filters, null, 2)}</code>\n//         </pre>\n//       </div>\n//       </div>\n//     </>\n//   )\n// }\n// // \nimport React from \"react\";\nimport { useTable } from \"react-table\";\nexport default function Table() {\n  _s();\n\n  const data = React.useMemo(() => [{\n    col1: 'Hello',\n    col2: 'World'\n  }, {\n    col1: 'react-table',\n    col2: 'rocks'\n  }, {\n    col1: 'whatever',\n    col2: 'you want'\n  }], []);\n  const columns = React.useMemo(() => [{\n    Header: 'Column 1',\n    accessor: 'col1' // accessor is the \"key\" in the data\n\n  }, {\n    Header: 'Column 2',\n    accessor: 'col2'\n  }], []);\n  const tableInstance = useTable({\n    columns,\n    data\n  });\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: /*#__PURE__*/_jsxDEV(\"th\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: /*#__PURE__*/_jsxDEV(\"td\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 223,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Table, \"ZFp2ZLEtGvZJnB6k1IDEFGHd1go=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/components/Table.js"],"names":["React","useTable","Table","data","useMemo","col1","col2","columns","Header","accessor","tableInstance"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAIA,eAAe,SAASC,KAAT,GAAiB;AAAA;;AAE5B,QAAMC,IAAI,GAAGH,KAAK,CAACI,OAAN,CACT,MAAM,CACJ;AACEC,IAAAA,IAAI,EAAE,OADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GADI,EAKJ;AACED,IAAAA,IAAI,EAAE,aADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GALI,EASJ;AACED,IAAAA,IAAI,EAAE,UADR;AAEEC,IAAAA,IAAI,EAAE;AAFR,GATI,CADG,EAeT,EAfS,CAAb;AAkBA,QAAMC,OAAO,GAAGP,KAAK,CAACI,OAAN,CACZ,MAAM,CACJ;AACEI,IAAAA,MAAM,EAAE,UADV;AAEEC,IAAAA,QAAQ,EAAE,MAFZ,CAEoB;;AAFpB,GADI,EAKJ;AACED,IAAAA,MAAM,EAAE,UADV;AAEEC,IAAAA,QAAQ,EAAE;AAFZ,GALI,CADM,EAWZ,EAXY,CAAhB;AAgBA,QAAMC,aAAa,GAAGT,QAAQ,CAAC;AAAEM,IAAAA,OAAF;AAAWJ,IAAAA;AAAX,GAAD,CAA9B;AAGA,sBACI;AAAA,4BACE;AAAA,6BACE;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAA,6BACE;AAAA,+BACE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAeH;;GAtDuBD,K;UAoCED,Q;;;KApCFC,K","sourcesContent":["// import React from 'react'\n// import { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\n// // A great library for fuzzy filtering/sorting items\n// import {matchSorter} from 'match-sorter'\n\n\n\n// // Our table component\n// export default function Table({ columns, data }) {\n//     // Define a default UI for filtering\n// function GlobalFilter({\n//     preGlobalFilteredRows,\n//     globalFilter,\n//     setGlobalFilter,\n//   }) {\n//     const count = preGlobalFilteredRows.length\n//     const [value, setValue] = React.useState(globalFilter)\n//     const onChange = useAsyncDebounce(value => {\n//       setGlobalFilter(value || undefined)\n//     }, 200)\n  \n//     return (\n//       <span>\n//         Search:{' '}\n//         <input\n//           value={value || \"\"}\n//           onChange={e => {\n//             setValue(e.target.value);\n//             onChange(e.target.value);\n//           }}\n//           placeholder={`${count} records...`}\n//           style={{\n//             fontSize: '1.1rem',\n//             border: '0',\n//           }}\n//         />\n//       </span>\n//     )\n//   }\n  \n//   // Define a default UI for filtering\n//   function DefaultColumnFilter({\n//     column: { filterValue, preFilteredRows, setFilter },\n//   }) {\n//     const count = preFilteredRows.length\n  \n//     return (\n//       <input\n//         value={filterValue || ''}\n//         onChange={e => {\n//           setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n//         }}\n//         placeholder={`Search ${count} records...`}\n//       />\n//     )\n//   }\n  \n//   function fuzzyTextFilterFn(rows, id, filterValue) {\n//     return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n//   }\n  \n//   // Let the table remove the filter if the string is empty\n//   fuzzyTextFilterFn.autoRemove = val => !val\n//   const filterTypes = React.useMemo(\n//     () => ({\n//       // Add a new fuzzyTextFilterFn filter type.\n//       fuzzyText: fuzzyTextFilterFn,\n//       // Or, override the default text filter to use\n//       // \"startWith\"\n//       text: (rows, id, filterValue) => {\n//         return rows.filter(row => {\n//           const rowValue = row.values[id]\n//           return rowValue !== undefined\n//             ? String(rowValue)\n//                 .toLowerCase()\n//                 .startsWith(String(filterValue).toLowerCase())\n//             : true\n//         })\n//       },\n//     }),\n//     []\n//   )\n\n//   const defaultColumn = React.useMemo(\n//     () => ({\n//       // Let's set up our default Filter UI\n//       Filter: DefaultColumnFilter,\n//     }),\n//     []\n//   )\n\n//   const {\n//     getTableProps,\n//     getTableBodyProps,\n//     headerGroups,\n//     rows,\n//     prepareRow,\n//     state,\n//     visibleColumns,\n//     preGlobalFilteredRows,\n//     setGlobalFilter,\n//   } = useTable(\n//     {\n//       columns,\n//       data,\n//       defaultColumn, // Be sure to pass the defaultColumn option\n//       filterTypes,\n//     },\n//     useFilters, // useFilters!\n//     useGlobalFilter // useGlobalFilter!\n//   )\n\n//   // We don't want to render all of the rows for this example, so cap\n//   // it for this use case\n//   const firstPageRows = rows.slice(0, 10)\n\n//   return (\n//     <>\n//     <div class=\"inventory-table\">\n//     {/* <GlobalFilter\n//                 preGlobalFilteredRows={preGlobalFilteredRows}\n//                 globalFilter={state.globalFilter}\n//                 setGlobalFilter={setGlobalFilter}\n//                 // style={globalFilterr}\n//               /> */}\n//       <table {...getTableProps()}>\n//         <thead>\n//           {headerGroups.map(headerGroup => (\n//             <tr {...headerGroup.getHeaderGroupProps()}>\n//               {headerGroup.headers.map(column => (\n//                 <th {...column.getHeaderProps()}>\n//                   {column.render('Header')}\n//                   {/* Render the columns filter UI */}\n//                   <div>{column.canFilter ? column.render('Filter') : null}</div>\n//                 </th>\n//               ))}\n//             </tr>\n//           ))}\n//           <tr>\n//             <th\n//               colSpan={visibleColumns.length}\n//               style={{\n//                 textAlign: 'left',\n//               }}\n//             >\n              \n//             </th>\n//           </tr>\n//         </thead>\n//         <tbody {...getTableBodyProps()}>\n//           {firstPageRows.map((row, i) => {\n//             prepareRow(row)\n//             return (\n//               <tr {...row.getRowProps()}>\n//                 {row.cells.map(cell => {\n//                   return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n//                 })}\n//               </tr>\n//             )\n//           })}\n//         </tbody>\n//       </table>\n//       <br />\n//       <div>Showing the first 20 results of {rows.length} rows</div>\n//       <div>\n//         <pre>\n//           <code>{JSON.stringify(state.filters, null, 2)}</code>\n//         </pre>\n//       </div>\n//       </div>\n//     </>\n//   )\n// }\n\n// // \n\n\nimport React from \"react\"\nimport { useTable } from \"react-table\"\n\n\n\nexport default function Table() {\n\n    const data = React.useMemo(\n        () => [\n          {\n            col1: 'Hello',\n            col2: 'World',\n          },\n          {\n            col1: 'react-table',\n            col2: 'rocks',\n          },\n          {\n            col1: 'whatever',\n            col2: 'you want',\n          },\n        ],\n        []\n      )\n\n    const columns = React.useMemo(\n        () => [\n          {\n            Header: 'Column 1',\n            accessor: 'col1', // accessor is the \"key\" in the data\n          },\n          {\n            Header: 'Column 2',\n            accessor: 'col2',\n          },\n        ],\n        []\n      )\n\n\n\n    const tableInstance = useTable({ columns, data })\n\n\n    return (\n        <table>\n          <thead>\n            <tr>\n              <th></th>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td></td>\n            </tr>\n          </tbody>\n        </table>\n    )\n\n}\n\n"]},"metadata":{},"sourceType":"module"}