{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/Vendors/VendorPopup.js\",\n    _s = $RefreshSig$();\n\nimport \"../styles/Popup.css\";\nimport { useState, useEffect, useRef, useMemo } from \"react\";\nimport MessageOption from \"./MessageOption\";\nimport Table from \"../components/Table\";\nimport * as router from \"./vendorAPI\";\nexport default function VendorPopup(props) {\n  _s();\n\n  const variantSelect = useRef();\n  const productSelect = useRef();\n  const quantityInput = useRef();\n  const [btnText, setBtnText] = useState(\"Order\");\n  const [isOrdering, setOrdering] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n  const [editColor, setEditColor] = useState(\"#76c32d\");\n  const [isOrderItemsHidden, setOrderItemsHidden] = useState(true);\n  const [isOrderOptionsHidden, setOrderOptionsHidden] = useState(true);\n  const [dataToUpdate, setDataToUpdate] = useState([]);\n  const [variantsToUpdate, setVariantsToUpdate] = useState([]);\n  const [data, setData] = useState([]);\n  const [variantData, setVariantData] = useState([]);\n  const [isAddBtnHidden, setAddBtnHidden] = useState(true);\n  const [isQuantityHidden, setQuantityHidden] = useState(true);\n  const [quantity, setQuantity] = useState(0);\n  const [isProductSelectHidden, setProductSelectHidden] = useState(true);\n  const [isVariantSelectHidden, setVariantSelectHidden] = useState(true);\n  const [productSelected, setProductSelected] = useState({\n    title: \"\",\n    id: \"\"\n  });\n  const [variantSelected, setVariantSelected] = useState({\n    title: \"\",\n    id: \"\",\n    cost: 0\n  });\n  const [nextPage, setNextPage] = useState(false);\n  const [reviewOrder, setReviewOrder] = useState(false);\n  const [orderState, setOrderState] = useState(null);\n  const comm_method = props.data.row.values.comm_method;\n  console.log(dataToUpdate);\n  console.log(variantData); // console.log(data)\n\n  const orderItemsStyle = {\n    color: \"black\",\n    margin: \"20px 0\",\n    padding: \"10px 20px\",\n    backgroundColor: \"#efefef\",\n    textAlign: \"center\"\n  };\n  const columns = useMemo(() => [{\n    Header: 'ID',\n    accessor: 'id',\n    // Product ID\n    sortDescFirst: true\n  }, {\n    Header: 'Product',\n    accessor: 'title',\n    sortDescFirst: true\n  }, {\n    Header: 'Variant',\n    accessor: 'variant',\n    sortDescFirst: true,\n    show: true\n  }, {\n    Header: 'Quantity',\n    accessor: 'quantity',\n    sortDescFirst: true\n  }, {\n    Header: 'Recent Purchases',\n    accessor: 'purchases',\n    sortDescFirst: true\n  }, {\n    Header: 'Stock Level',\n    accessor: 'stockLevel',\n    sortDescFirst: true\n  }, {\n    Header: 'Recent Order',\n    accessor: 'recentOrder',\n    sortDescFirst: true\n  }], []);\n  const reviewColumns = useMemo(() => [{\n    Header: 'Product',\n    accessor: 'title',\n    sortDescFirst: true\n  }, {\n    Header: 'Variant',\n    accessor: 'variant',\n    sortDescFirst: true,\n    show: true\n  }, {\n    Header: 'Variant ID',\n    accessor: 'variantId',\n    show: false\n  }, {\n    Header: 'Order Quantity',\n    accessor: 'orderQuantity',\n    sortDescFirst: true\n  }, {\n    Header: 'Cost/unit',\n    accessor: 'cost',\n    sortDescFirst: true\n  }, {\n    Header: 'Subtotal',\n    accessor: 'subtotal',\n    sortDescFirst: true\n  }], []); //             <th></th>\n  //             <th>Variant</th>\n  //             <th>Current Quantity</th>\n  //             <th>Recent Purchases</th>\n  //             <th>Stock Level</th>\n  //             <th>Recent Order</th>\n  //             <th>Cost</th>\n  //             <th>Order Quantity</th>\n  //         </tr>\n  //     </thead>\n  //     <tbody>\n  //         {variantData.map((variant, index) => {\n  //                 return (\n  //                     <tr key={index}>\n  //                         <td>{variant.product}</td>\n  //                         <td>{variant.variant}</td>\n  //                         <td>{variant.quantity}</td>\n  //                         <td>{variant.purchases}</td>\n  //                         <td>{variant.stockLevel}</td>\n  //                         <td>{variant.recentOrder}</td>\n  //                         <td>{variant.cost}</td>\n  //                         <input type=\"text\" placeholder=\"0\"/>\n  //                     </tr>\n  //        \n\n  function addColumns(columns) {\n    const newColumns = columns;\n    newColumns.push({\n      Header: 'Variant',\n      accessor: 'variant',\n      sortDescFirst: true\n    }, {\n      Header: 'Cost',\n      accessor: 'cost',\n      sortDescFirst: true\n    });\n    return newColumns;\n  } //   const newColumns = useMemo(\n  //     () => [\n  //     {\n  //         Header: 'Product',\n  //         accessor: 'product', // Product ID\n  //         sortDescFirst: true\n  //         },\n  //       {\n  //         Header: 'Variant',\n  //         accessor: 'variant',\n  //         sortDescFirst: true\n  //       },\n  //       {\n  //         Header: 'Current Quantity',\n  //         accessor: 'quantity',\n  //         sortDescFirst: true,\n  //       },\n  //       {\n  //         Header: 'Recent Purchases',\n  //         accessor: 'purchases',\n  //         sortDescFirst: true,\n  //       },\n  //       {\n  //         Header: 'Stock Level',\n  //         accessor: 'stockLevel',\n  //         sortDescFirst: true,\n  //       },\n  //       {\n  //         Header: 'Recent Order',\n  //         accessor: 'recentOrder',\n  //         sortDescFirst: true,\n  //       },\n  //     ],\n  //     []\n  //   )\n\n\n  function getVendor() {\n    setLoading(true);\n    router.loadVendor(props.values.id).then(data => {\n      if (data) {\n        // console.log(data)\n        setData(data);\n        setLoading(false);\n      } else {\n        console.log(\"Error getting product data\");\n      }\n    });\n  }\n\n  useEffect(() => {\n    getVendor();\n  }, []);\n\n  function getVariants(e, hasVariants) {\n    router.loadVariants(e.target.value).then(data => {\n      console.log('result of getProduct');\n\n      if (data) {\n        //   console.log(res.data)\n        if (hasVariants) {\n          setVariantData(data);\n          setVariantSelectHidden(false);\n        } else {\n          setVariantSelected({\n            id: data[0].id,\n            title: data[0].text,\n            cost: data[0].cost\n          });\n          setQuantityHidden(false); //   console.log(res.data)\n        } //   setLoading(false)      \n\n      } else {\n        console.log(\"Error getting product data\");\n      }\n    });\n  }\n\n  function orderClicked() {\n    if (btnText === \"Order\") {\n      // Start Order - add products\n      setOrdering(true);\n      setBtnText(\"Next\");\n      setOrderItemsHidden(false);\n      setOrderState(\"Choose Products\");\n    } else if (btnText === \"Next\") {\n      // Going to next page of ordering after added products\n      setNextPage(true);\n      setOrderState(\"Choose Variants/Qty\"); // newColumns = addColumns(columns)\n\n      router.loadOrderProducts(dataToUpdate).then(data => {\n        console.log('result of getProduct');\n\n        if (data) {\n          console.log('yuheee');\n          console.log(data);\n          setVariantData(data);\n          setDataToUpdate([]);\n          setBtnText(\"Review\");\n        }\n      }); // setOrderOptionsHidden(false)\n      // setEditColor(\"#26B1FF\")\n      // setBtnText(\"Submit\")\n    } else if (btnText === \"Review\") {\n      console.log('Review');\n      setNextPage(false);\n      setReviewOrder(true);\n\n      if (comm_method === \"website\") {\n        setBtnText(\"Order on website\");\n      } else {\n        setBtnText(\"Submit\");\n      }\n\n      setOrderOptionsHidden(false);\n      setOrderState(\"Review Order\");\n    } else if (btnText === \"Order on website\") {\n      window.open(\"https://amazon.com\", '_blank'); // NEED TO CHANGE\n    } else if (btnText === \"Submit\") {\n      // Submit - save order\n      console.log('sending message');\n      sendMessage();\n      setOrderState(null);\n    }\n  }\n\n  function backClicked() {\n    if (orderState === \"Choose Products\") {\n      console.log('u know it dawg');\n      setOrdering(false);\n      setBtnText(\"Order\");\n      setOrderItemsHidden(true);\n      setOrderState(null);\n    } else if (orderState === \"Choose Variants/Qty\") {\n      setNextPage(false);\n      setOrderState(\"Choose Products\");\n      setBtnText(\"Next\"); // newColumns = addColumns(columns)\n      // router.loadOrderProducts(dataToUpdate).then(data => {\n      //       console.log('result of getProduct')\n      //       if (data) {\n      //         console.log('yuheee')\n      //         console.log(data)\n      //         setVariantData(data)\n      //         setDataToUpdate([])\n      //         setBtnText(\"Review\")\n      //       }\n      // })\n    } else if (orderState === \"Review Order\") {\n      setNextPage(true);\n      setReviewOrder(false);\n      setBtnText(\"Review\");\n      setOrderOptionsHidden(true);\n      setOrderState(\"Choose Variants/Qty\");\n    }\n  }\n\n  function selectChanged(e) {\n    // Get the text and remove the stockLevel at the end\n    // console.log(text.slice(0,-1).join(\" \"))\n    // console.log(e.target.label)\n    // console.log(e.target.text)\n    if (e.target.id === \"productFilter\") {\n      const text = e.target[e.target.selectedIndex].label.split(\" \").slice(0, -1).join(\" \");\n      setProductSelected({\n        id: e.target.value,\n        title: text\n      }); // Check to see if has variants\n\n      var hasVariants = false;\n\n      if (e.target[e.target.selectedIndex].text != 1) {\n        hasVariants = true;\n      }\n\n      getVariants(e, hasVariants);\n    } else {\n      const text = e.target[e.target.selectedIndex].text;\n      setVariantSelected({\n        id: e.target.value.split(',')[0],\n        title: text,\n        cost: e.target.value.split(',')[1]\n      });\n      setQuantityHidden(false);\n    }\n  }\n\n  function sendMessage() {\n    if (comm_method === \"text\") {\n      router.sendText(props.values.contact_name, dataToUpdate, \"4848885912\").then(data => {\n        // NEED TO CHANGE\n        console.log(\"i dont think we're getting here\");\n        save();\n      });\n    } else if (comm_method === \"email\") {\n      router.sendEmail(props.values.contact_name, dataToUpdate, \"stepan.cannuscio@gmail.com\").then(data => {\n        // NEED TO CHANGE\n        save();\n      });\n    } else if (comm_method === \"website\") {\n      save();\n    } else {\n      alert(\"No communication method for this vendor! Contact Step for help\");\n    }\n  }\n\n  function save() {\n    const order = {\n      vendor: props.data.row.values.id,\n      subtotal: 0,\n      status: \"submitted\"\n    };\n    const orderItems = [];\n    dataToUpdate.forEach(item => {\n      console.log(item.subtotal);\n\n      if (item.subtotal != 0) {\n        order.subtotal += item.subtotal;\n        orderItems.push({\n          variant: item.variantId,\n          subtotal: item.subtotal,\n          // this is the subtotal including multiple qtys\n          quantity: item.quantity\n        });\n      }\n    });\n\n    if (dataToUpdate.length > 0) {\n      router.saveOrder(order, orderItems, props.user.id).then(data => {\n        console.log(data);\n\n        if (data === \"Success\") {\n          props.toggle();\n        } else {\n          console.log('error saving');\n        }\n      });\n    }\n  }\n\n  function handleChange(e) {\n    setQuantity(e.target.value);\n    setAddBtnHidden(false);\n  }\n\n  function addVariant() {\n    const newData = {\n      productTitle: productSelected.title,\n      productId: productSelected.id,\n      variantTitle: variantSelected.title,\n      variantId: variantSelected.id,\n      cost: variantSelected.cost,\n      quantity: quantity,\n      subtotal: Math.round(variantSelected.cost * quantity * 100, 2) / 100\n    };\n    setDataToUpdate(oldArray => [...oldArray, newData]); // resetOrderItem()\n  }\n\n  function resetOrderItem() {\n    setProductSelected(\"\");\n    setVariantSelected(\"\");\n    setQuantity(0);\n    setProductSelectHidden(true);\n    setVariantSelectHidden(true);\n    setQuantityHidden(true);\n    setAddBtnHidden(true);\n    console.log(variantSelect.current.value);\n    variantSelect.current.value = \"none\";\n    productSelect.current.value = \"none\";\n    quantityInput.current.value = \"\";\n    quantityInput.current.placeholder = \"0\";\n  }\n\n  function rowSelected(data) {\n    // console.log(data)\n    // console.log(!data.isSelected)\n    if (!data.isSelected) {\n      // I don't know why but this is reversed when receiving the data\n      setDataToUpdate(oldArray => [...oldArray, data.values.id]);\n    } else {\n      var array = [...dataToUpdate]; // make a separate copy of the array\n\n      var index = array.indexOf(data.values.id);\n\n      if (index !== -1) {\n        array.splice(index, 1);\n        setDataToUpdate(array);\n      }\n    }\n  }\n\n  function remove(array, element) {\n    console.log(element.values);\n    console.log('we removing');\n    variantData.forEach((item, index) => {\n      if (item.variant_id === element.values.variant_id) {\n        var array = [...variantData]; // make a separate copy of the array\n\n        if (index !== -1) {\n          array.splice(index, 1);\n          setVariantData(array);\n        } // console.log(dataToUpdate[index])\n\n      }\n    });\n\n    if (dataToUpdate.length > 0) {\n      dataToUpdate.forEach((item, index) => {\n        if (item.variantId === element.values.variant_id) {\n          var array = [...dataToUpdate]; // make a separate copy of the array\n\n          if (index !== -1) {\n            array.splice(index, 1);\n            setDataToUpdate(array);\n          } // console.log(dataToUpdate[index])\n\n        }\n      });\n    } // var copyArray = [...array]; // make a separate copy of the array\n    // var index = copyArray.indexOf(item.values)\n    // if (index !== -1) {\n    //     copyArray.splice(index, 1);\n    //     setVariantData(copyArray);\n    // }        \n\n  }\n\n  function addOrderItem(data, orderQuantity) {\n    // console.log(data)\n    console.log(variantsToUpdate);\n    console.log(data.variant_id);\n    const newData = {\n      productTitle: data.title,\n      productId: data.id,\n      variantTitle: data.variant,\n      variantId: data.variant_id,\n      cost: data.cost,\n      quantity: orderQuantity,\n      subtotal: Math.round(data.cost * orderQuantity * 100, 2) / 100\n    }; // console.log(Object.values(dataToUpdate))\n\n    if (variantsToUpdate.includes(data.variant_id)) {\n      console.log('yes');\n      dataToUpdate.forEach((item, index) => {\n        if (item.variantId === data.variant_id) {\n          var array = [...dataToUpdate]; // make a separate copy of the array\n\n          if (index !== -1) {\n            array.splice(index, 1);\n            setDataToUpdate(array);\n          }\n\n          setDataToUpdate(oldArray => [...oldArray, newData]); // console.log(dataToUpdate[index])\n        }\n      });\n    } else {\n      // console.log(variantsToUpdate)\n      console.log('no');\n      setVariantsToUpdate(oldArray => [...oldArray, data.variant_id]);\n      setDataToUpdate(oldArray => [...oldArray, newData]);\n    } // resetOrderItem()\n\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close\",\n        onClick: () => props.toggle(),\n        children: \"\\xD7    \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 599,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: data[0] ? data[0].name : \"Default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Products: \", props.values.products]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Low Products: \", props.values.low_products]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 17\n      }, this), isOrdering ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: backClicked,\n        className: \"edit-btn\",\n        style: {\n          backgroundColor: \"grey\"\n        },\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 603,\n        columnNumber: 31\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: orderClicked,\n        className: \"edit-btn\",\n        style: {\n          backgroundColor: editColor\n        },\n        children: btnText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 604,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 598,\n      columnNumber: 13\n    }, this), isOrdering ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        hidden: isOrderItemsHidden,\n        children: nextPage ? /*#__PURE__*/_jsxDEV(Table, {\n          columns: columns.concat({\n            Header: 'Variant ID',\n            accessor: 'variant_id',\n            show: false\n          }, {\n            Header: 'Cost',\n            accessor: 'cost',\n            sortDescFirst: true\n          }, {\n            Header: 'Order Quantity',\n            accessor: 'orderQuantity'\n          }, {\n            Header: 'Remove',\n            accessor: 'remove'\n          }),\n          data: variantData,\n          search: false,\n          type: \"order-variant\",\n          popupEnabled: false,\n          perPage: 5,\n          update: (data, orderQuantity) => addOrderItem(data, orderQuantity),\n          removeItem: item => remove(variantData, item)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 21\n        }, this) // <table>\n        //     <thead>\n        //         <tr>\n        //             <th>Product</th>\n        //             <th>Variant</th>\n        //             <th>Current Quantity</th>\n        //             <th>Recent Purchases</th>\n        //             <th>Stock Level</th>\n        //             <th>Recent Order</th>\n        //             <th>Cost</th>\n        //             <th>Order Quantity</th>\n        //         </tr>\n        //     </thead>\n        //     <tbody>\n        //         {variantData.map((variant, index) => {\n        //                 return (\n        //                     <tr key={index}>\n        //                         <td>{variant.product}</td>\n        //                         <td>{variant.variant}</td>\n        //                         <td>{variant.quantity}</td>\n        //                         <td>{variant.purchases}</td>\n        //                         <td>{variant.stockLevel}</td>\n        //                         <td>{variant.recentOrder}</td>\n        //                         <td>{variant.cost}</td>\n        //                         <input type=\"text\" placeholder=\"0\"/>\n        //                     </tr>\n        //                 )\n        //         })}\n        //     </tbody>\n        // </table>\n        : reviewOrder ? /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Variant\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 689,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 690,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Cost/unit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 691,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Subtotal\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 692,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: dataToUpdate.map((order_item, index) => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: order_item.productTitle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 700,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: order_item.variantTitle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 701,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: order_item.quantity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 702,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [\"$\", order_item.cost]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 703,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [\"$\", order_item.subtotal]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 704,\n                  columnNumber: 41\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 699,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 695,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Table, {\n          columns: columns,\n          data: data,\n          search: false,\n          type: \"order\",\n          checkbox: true,\n          popupEnabled: false,\n          perPage: 5,\n          update: data => rowSelected(data)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 712,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 612,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      data: data,\n      type: \"order\",\n      search: false,\n      popupEnabled: false,\n      perPage: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 798,\n      columnNumber: 13\n    }, this) // <table style={{textAlign: \"center\"}}>\n    //     <thead >\n    //         <tr>\n    //             <th className=\"table-header\">Product</th>\n    //             <th className=\"table-header\">Quantity</th>\n    //             <th className=\"table-header\">Purchases (last 30 days)</th>\n    //             <th className=\"table-header\">Stock Level</th>\n    //             <th className=\"table-header\">Last Order</th>\n    //         </tr>\n    //     </thead>\n    //     <tbody>\n    //     {data.map((item, index) => {\n    //         var recentOrder = \"\"\n    //         if (item.status && item.status.split(',')[0] === \"completed\") {\n    //             recentOrder = `${item.quantity_ordered.split(',')[0]} units received on ${new Date(item.completed_date.split(',')[0]).toDateString()}`\n    //         } else if (item.status && item.status.split(',')[0] === \"fulfilled\") {\n    //             recentOrder = `Fulfilled on ${new Date(item.fulfilled_date.split(',')[0]).toDateString()} - ${item.tracking.split(',')[0]}`\n    //         } else if (item.status && item.status.split(',')[0] === \"submitted\") {\n    //             recentOrder = `Submitted order for ${item.quantity_ordered.split(',')[0]} units on ${new Date(item.submitted_date.split(',')[0]).toDateString()}`\n    //         }\n    //         return (\n    //             <tr key={index}>\n    //                 <td className=\"table-cell\">{item.title}</td>\n    //                 <td className=\"table-cell\">{item.quantity}</td>\n    //                 <td className=\"table-cell\">{item.purchases}</td>\n    //                 <td className=\"table-cell\">{item.stockLevel}</td>\n    //                 <td className=\"table-cell\">{recentOrder}</td>\n    //             </tr>\n    //             ) \n    //         })\n    //     }\n    //     </tbody>\n    // </table>\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 597,\n    columnNumber: 9\n  }, this);\n}\n\n_s(VendorPopup, \"QUi/SII3s2DfCvobG4QQ44pJKc0=\");\n\n_c = VendorPopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"VendorPopup\");","map":{"version":3,"sources":["/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/Vendors/VendorPopup.js"],"names":["useState","useEffect","useRef","useMemo","MessageOption","Table","router","VendorPopup","props","variantSelect","productSelect","quantityInput","btnText","setBtnText","isOrdering","setOrdering","isLoading","setLoading","editColor","setEditColor","isOrderItemsHidden","setOrderItemsHidden","isOrderOptionsHidden","setOrderOptionsHidden","dataToUpdate","setDataToUpdate","variantsToUpdate","setVariantsToUpdate","data","setData","variantData","setVariantData","isAddBtnHidden","setAddBtnHidden","isQuantityHidden","setQuantityHidden","quantity","setQuantity","isProductSelectHidden","setProductSelectHidden","isVariantSelectHidden","setVariantSelectHidden","productSelected","setProductSelected","title","id","variantSelected","setVariantSelected","cost","nextPage","setNextPage","reviewOrder","setReviewOrder","orderState","setOrderState","comm_method","row","values","console","log","orderItemsStyle","color","margin","padding","backgroundColor","textAlign","columns","Header","accessor","sortDescFirst","show","reviewColumns","addColumns","newColumns","push","getVendor","loadVendor","then","getVariants","e","hasVariants","loadVariants","target","value","text","orderClicked","loadOrderProducts","window","open","sendMessage","backClicked","selectChanged","selectedIndex","label","split","slice","join","sendText","contact_name","save","sendEmail","alert","order","vendor","subtotal","status","orderItems","forEach","item","variant","variantId","length","saveOrder","user","toggle","handleChange","addVariant","newData","productTitle","productId","variantTitle","Math","round","oldArray","resetOrderItem","current","placeholder","rowSelected","isSelected","array","index","indexOf","splice","remove","element","variant_id","addOrderItem","orderQuantity","includes","name","products","low_products","concat","map","order_item"],"mappings":"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","sourcesContent":["import \"../styles/Popup.css\"\nimport {useState, useEffect, useRef, useMemo} from \"react\"\nimport MessageOption from \"./MessageOption\"\nimport Table from \"../components/Table\"\nimport * as router from \"./vendorAPI\"\n\n\nexport default function VendorPopup(props) {\n\n    const variantSelect = useRef()\n    const productSelect = useRef()\n    const quantityInput = useRef()\n\n    const [btnText, setBtnText] = useState(\"Order\")\n    const [isOrdering, setOrdering] = useState(false)\n    const [isLoading, setLoading] = useState(true)\n    const [editColor, setEditColor] = useState(\"#76c32d\")\n    const [isOrderItemsHidden, setOrderItemsHidden] = useState(true)\n    const [isOrderOptionsHidden, setOrderOptionsHidden] = useState(true)\n    const [dataToUpdate, setDataToUpdate] = useState([])\n    const [variantsToUpdate, setVariantsToUpdate] = useState([])\n    const [data, setData] = useState([])\n\n    const [variantData, setVariantData] = useState([])\n    const [isAddBtnHidden, setAddBtnHidden] = useState(true)\n    const [isQuantityHidden, setQuantityHidden] = useState(true)\n    const [quantity, setQuantity] = useState(0)\n    const [isProductSelectHidden, setProductSelectHidden] = useState(true)\n    const [isVariantSelectHidden, setVariantSelectHidden] = useState(true)\n    const [productSelected, setProductSelected] = useState({title: \"\", id: \"\"})\n    const [variantSelected, setVariantSelected] = useState({title: \"\", id: \"\", cost: 0})\n    const [nextPage, setNextPage] = useState(false)\n    const [reviewOrder, setReviewOrder] = useState(false)\n    const [orderState, setOrderState] = useState(null)\n    const comm_method = props.data.row.values.comm_method\n\n    console.log(dataToUpdate)\n    console.log(variantData)\n    // console.log(data)\n\n    const orderItemsStyle = {\n        color: \"black\", \n        margin: \"20px 0\", \n        padding: \"10px 20px\", \n        backgroundColor: \"#efefef\", \n        textAlign: \"center\"\n    }\n\n\n    const columns = useMemo(\n        () => [\n        {\n            Header: 'ID',\n            accessor: 'id', // Product ID\n            sortDescFirst: true\n            },\n          {\n            Header: 'Product',\n            accessor: 'title',\n            sortDescFirst: true\n          },\n          {\n            Header: 'Variant',\n            accessor: 'variant',\n            sortDescFirst: true,\n            show: true\n          },\n          {\n            Header: 'Quantity',\n            accessor: 'quantity',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Recent Purchases',\n            accessor: 'purchases',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Stock Level',\n            accessor: 'stockLevel',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Recent Order',\n            accessor: 'recentOrder',\n            sortDescFirst: true,\n          },\n        ],\n        []\n      )\n\n\n      const reviewColumns = useMemo(\n        () => [\n\n          {\n            Header: 'Product',\n            accessor: 'title',\n            sortDescFirst: true\n          },\n          {\n            Header: 'Variant',\n            accessor: 'variant',\n            sortDescFirst: true,\n            show: true\n          },\n          {\n            Header: 'Variant ID',\n            accessor: 'variantId',\n            show: false\n          },\n          {\n            Header: 'Order Quantity',\n            accessor: 'orderQuantity',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Cost/unit',\n            accessor: 'cost',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Subtotal',\n            accessor: 'subtotal',\n            sortDescFirst: true,\n          },\n        ],\n        []\n      )\n\n\n      \n                    //             <th></th>\n                    //             <th>Variant</th>\n                    //             <th>Current Quantity</th>\n                    //             <th>Recent Purchases</th>\n                    //             <th>Stock Level</th>\n                    //             <th>Recent Order</th>\n                    //             <th>Cost</th>\n                    //             <th>Order Quantity</th>\n                    //         </tr>\n                    //     </thead>\n                    //     <tbody>\n                    //         {variantData.map((variant, index) => {\n                           \n                    //                 return (\n                    //                     <tr key={index}>\n                    //                         <td>{variant.product}</td>\n                    //                         <td>{variant.variant}</td>\n                    //                         <td>{variant.quantity}</td>\n                    //                         <td>{variant.purchases}</td>\n                    //                         <td>{variant.stockLevel}</td>\n                    //                         <td>{variant.recentOrder}</td>\n                    //                         <td>{variant.cost}</td>\n                    //                         <input type=\"text\" placeholder=\"0\"/>\n                    //                     </tr>\n                    //        \n                \n    \n\n    function addColumns(columns) {\n\n        const newColumns = columns\n        newColumns.push(\n            {\n                Header: 'Variant',\n                accessor: 'variant',\n                sortDescFirst: true \n            },\n            {\n                Header: 'Cost',\n                accessor: 'cost',\n                sortDescFirst: true\n            }\n        )\n        return newColumns\n        \n    }\n\n   \n\n    \n    //   const newColumns = useMemo(\n    //     () => [\n    //     {\n    //         Header: 'Product',\n    //         accessor: 'product', // Product ID\n    //         sortDescFirst: true\n    //         },\n    //       {\n    //         Header: 'Variant',\n    //         accessor: 'variant',\n    //         sortDescFirst: true\n    //       },\n    //       {\n    //         Header: 'Current Quantity',\n    //         accessor: 'quantity',\n    //         sortDescFirst: true,\n    //       },\n    //       {\n    //         Header: 'Recent Purchases',\n    //         accessor: 'purchases',\n    //         sortDescFirst: true,\n    //       },\n    //       {\n    //         Header: 'Stock Level',\n    //         accessor: 'stockLevel',\n    //         sortDescFirst: true,\n    //       },\n    //       {\n    //         Header: 'Recent Order',\n    //         accessor: 'recentOrder',\n    //         sortDescFirst: true,\n    //       },\n    //     ],\n    //     []\n    //   )\n\n      \n\n\n      \n\n\n    function getVendor() {\n        setLoading(true)\n        router.loadVendor(props.values.id).then(data => {\n            if (data) {\n                // console.log(data)\n                setData(data)\n                setLoading(false)\n            } else {\n                console.log(\"Error getting product data\")\n            }\n        });\n      }\n\n      useEffect(() => {\n        getVendor()\n    }, []);\n\n    function getVariants(e, hasVariants) {\n        router.loadVariants(e.target.value).then(data => {\n          console.log('result of getProduct')\n          if (data) {\n            //   console.log(res.data)\n\n              if (hasVariants) {\n                setVariantData(data)\n                setVariantSelectHidden(false)\n              } else {\n                setVariantSelected({\n                    id: data[0].id,\n                    title: data[0].text,\n                    cost: data[0].cost\n                })\n                setQuantityHidden(false)\n                //   console.log(res.data)\n              }\n              \n            //   setLoading(false)      \n          } else {\n              console.log(\"Error getting product data\")\n          }\n      });\n    }\n\n    function orderClicked() {\n        if (btnText === \"Order\") {\n            // Start Order - add products\n            setOrdering(true)\n            setBtnText(\"Next\")\n            setOrderItemsHidden(false)\n            setOrderState(\"Choose Products\")\n\n        } else if (btnText === \"Next\") {\n            // Going to next page of ordering after added products\n\n            setNextPage(true)\n            setOrderState(\"Choose Variants/Qty\")\n            // newColumns = addColumns(columns)\n\n            router.loadOrderProducts(dataToUpdate).then(data => {\n                  console.log('result of getProduct')\n                  if (data) {\n                    console.log('yuheee')\n                    console.log(data)\n                    setVariantData(data)\n                    setDataToUpdate([])\n                    setBtnText(\"Review\")\n                  }\n            })\n            \n            // setOrderOptionsHidden(false)\n            // setEditColor(\"#26B1FF\")\n            // setBtnText(\"Submit\")\n        } else if (btnText === \"Review\") {\n            console.log('Review')\n            setNextPage(false)\n            setReviewOrder(true)\n            if (comm_method === \"website\") {\n                setBtnText(\"Order on website\")\n            } else {\n                setBtnText(\"Submit\")\n            }\n            setOrderOptionsHidden(false)\n            setOrderState(\"Review Order\")\n\n        } else if (btnText === \"Order on website\") {\n           window.open(\"https://amazon.com\",'_blank') // NEED TO CHANGE\n            \n        }  else if (btnText === \"Submit\") {\n            // Submit - save order\n            console.log('sending message')\n            sendMessage()\n            setOrderState(null)\n        }\n    }\n    \n    function backClicked() {\n        if (orderState === \"Choose Products\") {\n            console.log('u know it dawg')\n            setOrdering(false)\n            setBtnText(\"Order\")\n            setOrderItemsHidden(true)\n            setOrderState(null)\n        } else if (orderState === \"Choose Variants/Qty\") {\n            setNextPage(false)\n            setOrderState(\"Choose Products\")\n            setBtnText(\"Next\")\n            // newColumns = addColumns(columns)\n\n            // router.loadOrderProducts(dataToUpdate).then(data => {\n            //       console.log('result of getProduct')\n            //       if (data) {\n            //         console.log('yuheee')\n            //         console.log(data)\n            //         setVariantData(data)\n            //         setDataToUpdate([])\n            //         setBtnText(\"Review\")\n            //       }\n            // })\n        } else if (orderState === \"Review Order\") {\n            setNextPage(true)\n            setReviewOrder(false)\n            setBtnText(\"Review\")\n            setOrderOptionsHidden(true)\n            setOrderState(\"Choose Variants/Qty\")\n        }\n\n    }\n\n    function selectChanged(e) {\n\n        // Get the text and remove the stockLevel at the end\n        \n        // console.log(text.slice(0,-1).join(\" \"))\n        // console.log(e.target.label)\n        // console.log(e.target.text)\n        if (e.target.id === \"productFilter\") {\n\n            const text = e.target[e.target.selectedIndex].label.split(\" \").slice(0,-1).join(\" \")\n\n            setProductSelected({\n                id: e.target.value,\n                title: text\n            })\n            // Check to see if has variants\n            var hasVariants = false\n            if (e.target[e.target.selectedIndex].text != 1) {\n                hasVariants = true\n            } \n\n            getVariants(e, hasVariants)\n            \n          \n            \n        } else {\n\n            const text = e.target[e.target.selectedIndex].text\n            setVariantSelected({\n                id: e.target.value.split(',')[0],\n                title: text,\n                cost: e.target.value.split(',')[1]\n            })\n            setQuantityHidden(false)\n        }\n    }\n\n    function sendMessage() {\n\n        if (comm_method === \"text\") {\n            router.sendText(props.values.contact_name, dataToUpdate, \"4848885912\").then(data => { // NEED TO CHANGE\n                console.log(\"i dont think we're getting here\")\n                save()\n            })\n        }\n        else if (comm_method === \"email\") {\n            router.sendEmail(props.values.contact_name, dataToUpdate, \"stepan.cannuscio@gmail.com\").then(data => { // NEED TO CHANGE\n                save()\n            })\n        } else if (comm_method === \"website\") {\n            save()\n        } else {\n            alert(\"No communication method for this vendor! Contact Step for help\")\n        }\n    }\n\n    function save() {\n            \n        const order = {\n            vendor: props.data.row.values.id,\n            subtotal: 0,\n            status: \"submitted\"\n        }\n\n        const orderItems = []\n        dataToUpdate.forEach(item => {\n            console.log(item.subtotal)\n            if (item.subtotal != 0) {\n       \n                order.subtotal += item.subtotal\n                orderItems.push({\n                    variant: item.variantId,\n                    subtotal: item.subtotal, // this is the subtotal including multiple qtys\n                    quantity: item.quantity\n                })\n            }\n        \n        })\n     \n        if (dataToUpdate.length > 0) {\n            router.saveOrder(order, orderItems, props.user.id).then(data => {\n                console.log(data)\n            if (data === \"Success\") {\n                props.toggle()\n            } else {\n                console.log('error saving')\n            }\n         })\n        } \n    }\n    \n\n    function handleChange(e) {\n        setQuantity(e.target.value)\n        setAddBtnHidden(false)\n    }\n\n    function addVariant() {\n        const newData = {\n            productTitle: productSelected.title,\n            productId: productSelected.id,\n            variantTitle: variantSelected.title,\n            variantId: variantSelected.id,\n            cost: variantSelected.cost,\n            quantity: quantity,\n            subtotal: Math.round(variantSelected.cost * quantity * 100, 2) / 100\n        }\n        setDataToUpdate(oldArray => [...oldArray, newData])\n\n        // resetOrderItem()\n    }\n\n    function resetOrderItem() {\n        setProductSelected(\"\")\n        setVariantSelected(\"\")\n        setQuantity(0)\n        setProductSelectHidden(true)\n        setVariantSelectHidden(true)\n        setQuantityHidden(true)\n        setAddBtnHidden(true)\n        console.log(variantSelect.current.value)\n        variantSelect.current.value = \"none\"\n        productSelect.current.value = \"none\"\n        quantityInput.current.value = \"\"\n        quantityInput.current.placeholder = \"0\"\n    }\n\n    function rowSelected(data) {\n        // console.log(data)\n        // console.log(!data.isSelected)\n        if (!data.isSelected) { // I don't know why but this is reversed when receiving the data\n            setDataToUpdate(oldArray => [...oldArray, data.values.id])\n        } else {\n            var array = [...dataToUpdate]; // make a separate copy of the array\n            var index = array.indexOf(data.values.id)\n            if (index !== -1) {\n                array.splice(index, 1);\n                setDataToUpdate(array);\n            }        \n     } \n    }\n\n    function remove(array, element) {\n        console.log(element.values)\n        console.log('we removing')\n\n        variantData.forEach((item, index) => {\n                \n            if (item.variant_id === element.values.variant_id) {\n                var array = [...variantData]; // make a separate copy of the array\n                if (index !== -1) {\n                    array.splice(index, 1);\n                    setVariantData(array);\n                } \n  \n                // console.log(dataToUpdate[index])\n              \n            }\n        })\n\n        if (dataToUpdate.length > 0) {\n            dataToUpdate.forEach((item, index) => {\n                \n                if (item.variantId === element.values.variant_id) {\n                    var array = [...dataToUpdate]; // make a separate copy of the array\n                    if (index !== -1) {\n                        array.splice(index, 1);\n                        setDataToUpdate(array);\n                    } \n                     \n                    // console.log(dataToUpdate[index])\n                  \n                }\n            })\n        }\n        // var copyArray = [...array]; // make a separate copy of the array\n\n        \n        // var index = copyArray.indexOf(item.values)\n        // if (index !== -1) {\n        //     copyArray.splice(index, 1);\n        //     setVariantData(copyArray);\n        // }        \n    }\n\n    function addOrderItem(data, orderQuantity) {\n        // console.log(data)\n        console.log(variantsToUpdate)\n        console.log(data.variant_id)\n\n        const newData = {\n            productTitle: data.title,\n            productId: data.id,\n            variantTitle: data.variant,\n            variantId: data.variant_id,\n            cost: data.cost,\n            quantity: orderQuantity,\n            subtotal: Math.round(data.cost * orderQuantity * 100, 2) / 100\n        }\n\n        // console.log(Object.values(dataToUpdate))\n\n        if (variantsToUpdate.includes(data.variant_id)) {\n            console.log('yes')\n            \n        \n            dataToUpdate.forEach((item, index) => {\n                \n                if (item.variantId === data.variant_id) {\n                    var array = [...dataToUpdate]; // make a separate copy of the array\n                    if (index !== -1) {\n                        array.splice(index, 1);\n                        setDataToUpdate(array);\n                    } \n                    setDataToUpdate(oldArray => [...oldArray, newData])       \n                    // console.log(dataToUpdate[index])\n                  \n                }\n            })\n        } else {\n            // console.log(variantsToUpdate)\n            console.log('no')\n            setVariantsToUpdate(oldArray => [...oldArray, data.variant_id])\n            \n            setDataToUpdate(oldArray => [...oldArray, newData])\n            \n        }\n\n       \n\n        \n\n        \n    \n\n        // resetOrderItem()\n    }\n\n\n    if (isLoading) {\n        return <div className=\"loader\"></div>;\n    }\n\n    return (\n        <div>\n            <div className=\"top-content\">\n                <span className=\"close\" onClick={() =>  props.toggle()}>&times;    </span>\n                <h2 >{data[0] ? data[0].name : \"Default\"}</h2>\n                <p>Products: {props.values.products}</p>\n                <p>Low Products: {props.values.low_products}</p>\n                {isOrdering ? <button onClick={backClicked} className=\"edit-btn\" style={{backgroundColor: \"grey\"}}>Back</button> : null }\n                <button onClick={orderClicked} className=\"edit-btn\" style={{backgroundColor: editColor}}>{btnText}</button>\n\n                \n            </div>\n      \n            {isOrdering \n\n            ?\n            <div>\n                <div hidden={isOrderItemsHidden}>\n                    {/* <button style={{display: \"block\"}} onClick={() => setProductSelectHidden(false)}>New Product</button> */}\n                    {/* <select ref={productSelect} hidden={isProductSelectHidden} onChange={selectChanged} defaultValue=\"none\" id=\"productFilter\" name=\"productFilter\">\n                        <option value=\"none\">Choose Product:</option>\n                        {data.map((product, index) => {\n                            return (\n                                <option key={index} label={`${product.title} (${product.stockLevel})`} value={product.id}>{product.variants}</option>\n                            )\n                        })}\n                    </select> */}\n                    \n                    \n\n                    {nextPage \n                    ?\n                    <Table columns={ columns.concat(\n                    {\n                        Header: 'Variant ID',\n                        accessor: 'variant_id',\n                        show: false\n                    },\n                    {\n                        Header: 'Cost',\n                        accessor: 'cost',\n                        sortDescFirst: true\n                    },\n                    {\n                        Header: 'Order Quantity',\n                        accessor: 'orderQuantity',\n                    },\n                    {\n                        Header: 'Remove',\n                        accessor: 'remove',\n                    },\n                    )} data={variantData} search={false} type=\"order-variant\" popupEnabled={false} perPage={5} update={(data, orderQuantity) => addOrderItem(data, orderQuantity)} removeItem={(item) =>remove(variantData, item)}/>\n\n                    // <table>\n                    //     <thead>\n                    //         <tr>\n                    //             <th>Product</th>\n                    //             <th>Variant</th>\n                    //             <th>Current Quantity</th>\n                    //             <th>Recent Purchases</th>\n                    //             <th>Stock Level</th>\n                    //             <th>Recent Order</th>\n                    //             <th>Cost</th>\n                    //             <th>Order Quantity</th>\n                    //         </tr>\n                    //     </thead>\n                    //     <tbody>\n                    //         {variantData.map((variant, index) => {\n                           \n                    //                 return (\n                    //                     <tr key={index}>\n                    //                         <td>{variant.product}</td>\n                    //                         <td>{variant.variant}</td>\n                    //                         <td>{variant.quantity}</td>\n                    //                         <td>{variant.purchases}</td>\n                    //                         <td>{variant.stockLevel}</td>\n                    //                         <td>{variant.recentOrder}</td>\n                    //                         <td>{variant.cost}</td>\n                    //                         <input type=\"text\" placeholder=\"0\"/>\n                    //                     </tr>\n                    //                 )\n                                \n                    //         })}\n                    //     </tbody>\n                    // </table>\n\n                    :\n                    reviewOrder \n                    ?\n                    <table>\n                    <thead>\n                        <tr>\n                            <th>Product</th>\n                            <th>Variant</th>\n                            <th>Quantity</th>\n                            <th>Cost/unit</th>\n                            <th>Subtotal</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {dataToUpdate.map((order_item, index) => {\n                       \n                                return (\n                                    <tr key={index}>\n                                        <td>{order_item.productTitle}</td>\n                                        <td>{order_item.variantTitle}</td>\n                                        <td>{order_item.quantity}</td>\n                                        <td>${order_item.cost}</td>\n                                        <td>${order_item.subtotal}</td>\n                                    </tr>\n                                )\n                            \n                        })}\n                    </tbody>\n                </table>\n                    :\n                    <Table columns={columns} data={data} search={false} type=\"order\" checkbox={true} popupEnabled={false} perPage={5} update={(data) => rowSelected(data)}/>\n                        }\n              \n                    {/* <select ref={variantSelect} hidden={isVariantSelectHidden} onChange={selectChanged} defaultValue=\"none\" id=\"variantFilter\" name=\"variantFilter\">\n                    <option value=\"none\">Choose Variant:</option>\n                        {variantData.map((variant, index) => {\n                            return (\n                                <option key={index} value={[variant.id, variant.cost]}>{variant.title}</option>\n                            )\n                        })}\n                    </select> */}\n                    {/* <input ref={quantityInput} hidden={isQuantityHidden} placeholder={quantity} onChange={handleChange} />\n                    <button hidden={isAddBtnHidden} onClick={addVariant}>Add</button> */}\n                   \n                    \n            \n                    \n                </div>\n                {/* <div hidden={isOrderOptionsHidden}>\n                    {comm_method === \"email\" \n                    ?\n                    <MessageOption type=\"Email\" contact_name={props.values.contact_name} to=\"stepan.cannuscio@gmail.com\" dataToUpdate={dataToUpdate} />\n                    :\n                                \n                    comm_method === \"call\" \n                    ?\n                    <a href=\"tel:4848885912\"><button>Call: 484-888-5912</button></a>\n\n                    :\n                    comm_method === \"text\" \n                    ?\n                    <MessageOption type=\"Text\" contact_name={props.values.contact_name} to=\"4848885912\" dataToUpdate={dataToUpdate} />\n                    :\n                    comm_method === \"website\"\n                    ?\n                    <MessageOption type=\"Website\" contact_name={props.values.contact_name} to=\"https://amazon.com\" dataToUpdate={dataToUpdate} />\n                    :\n                    <p>Not sure about this one!</p>\n                    }           \n                        \n                       \n                        \n                </div> */}\n       \n        \n            {/* <table style={{textAlign: \"center\"}}>\n            <thead >\n                <tr>\n                    <th className=\"table-header\">Product</th>\n                    <th className=\"table-header\">Quantity</th>\n                    <th className=\"table-header\">Purchases (last 30 days)</th>\n                    <th className=\"table-header\">Stock Level</th>\n                    <th className=\"table-header\">Last Order</th>\n                </tr>\n            </thead>\n\n            <tbody>\n            {data.map((item, index) => {\n                var recentOrder = \"\"\n                if (item.status && item.status.split(',')[0] === \"completed\") {\n                    recentOrder = `${item.quantity_ordered.split(',')[0]} units received on ${new Date(item.completed_date.split(',')[0]).toDateString()}`\n                } else if (item.status && item.status.split(',')[0] === \"fulfilled\") {\n                    recentOrder = `Fulfilled on ${new Date(item.fulfilled_date.split(',')[0]).toDateString()} - ${item.tracking.split(',')[0]}`\n                } else if (item.status && item.status.split(',')[0] === \"submitted\") {\n                    recentOrder = `Submitted order for ${item.quantity_ordered.split(',')[0]} units on ${new Date(item.submitted_date.split(',')[0]).toDateString()}`\n                }\n                \n                return (\n                    <tr key={index}>\n                        <td className=\"table-cell\">{item.title}</td>\n                        <td className=\"table-cell\">{item.quantity}</td>\n                        <td className=\"table-cell\">{item.purchases}</td>\n                        <td className=\"table-cell\">{item.stockLevel}</td>\n                        <td className=\"table-cell\">{recentOrder}</td>\n                        \n                    </tr>\n                    ) \n                })\n            }\n            </tbody>\n        </table>\n        </div> */}\n        </div>\n    \n            :\n\n            <Table columns={columns} data={data} type=\"order\" search={false} popupEnabled={false} perPage={5}/>\n    \n            // <table style={{textAlign: \"center\"}}>\n            //     <thead >\n            //         <tr>\n            //             <th className=\"table-header\">Product</th>\n            //             <th className=\"table-header\">Quantity</th>\n            //             <th className=\"table-header\">Purchases (last 30 days)</th>\n            //             <th className=\"table-header\">Stock Level</th>\n            //             <th className=\"table-header\">Last Order</th>\n            //         </tr>\n            //     </thead>\n\n            //     <tbody>\n            //     {data.map((item, index) => {\n            //         var recentOrder = \"\"\n            //         if (item.status && item.status.split(',')[0] === \"completed\") {\n            //             recentOrder = `${item.quantity_ordered.split(',')[0]} units received on ${new Date(item.completed_date.split(',')[0]).toDateString()}`\n            //         } else if (item.status && item.status.split(',')[0] === \"fulfilled\") {\n            //             recentOrder = `Fulfilled on ${new Date(item.fulfilled_date.split(',')[0]).toDateString()} - ${item.tracking.split(',')[0]}`\n            //         } else if (item.status && item.status.split(',')[0] === \"submitted\") {\n            //             recentOrder = `Submitted order for ${item.quantity_ordered.split(',')[0]} units on ${new Date(item.submitted_date.split(',')[0]).toDateString()}`\n            //         }\n                    \n            //         return (\n            //             <tr key={index}>\n            //                 <td className=\"table-cell\">{item.title}</td>\n            //                 <td className=\"table-cell\">{item.quantity}</td>\n            //                 <td className=\"table-cell\">{item.purchases}</td>\n            //                 <td className=\"table-cell\">{item.stockLevel}</td>\n            //                 <td className=\"table-cell\">{recentOrder}</td>\n                            \n            //             </tr>\n            //             ) \n            //         })\n            //     }\n            //     </tbody>\n            // </table>\n}       \n  </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}