{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/sims/frontend/src/Vendors/VendorPopup.js\",\n    _s = $RefreshSig$();\n\nimport \"../styles/Popup.css\";\nimport { useState, useEffect, useRef, useMemo } from \"react\";\nimport MessageOption from \"./MessageOption\";\nimport Table from \"../components/Table\";\nimport * as router from \"./vendorAPI\";\nexport default function VendorPopup(props) {\n  _s();\n\n  // console.log(props)\n  const variantSelect = useRef();\n  const productSelect = useRef();\n  const quantityInput = useRef();\n  const [percentage, setPercentage] = useState(0);\n  const [btnText, setBtnText] = useState(\"Order\");\n  const [isOrdering, setOrdering] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n  const [editColor, setEditColor] = useState(\"#76c32d\");\n  const [isOrderItemsHidden, setOrderItemsHidden] = useState(true);\n  const [isOrderOptionsHidden, setOrderOptionsHidden] = useState(true);\n  const [dataToUpdate, setDataToUpdate] = useState([]);\n  const [variantsToUpdate, setVariantsToUpdate] = useState([]);\n  const [data, setData] = useState([]);\n  const [variantData, setVariantData] = useState([]);\n  const [isAddBtnHidden, setAddBtnHidden] = useState(true);\n  const [isQuantityHidden, setQuantityHidden] = useState(true);\n  const [quantity, setQuantity] = useState(0);\n  const [isProductSelectHidden, setProductSelectHidden] = useState(true);\n  const [isVariantSelectHidden, setVariantSelectHidden] = useState(true);\n  const [isExtraOptionHidden, setExtraOptionHidden] = useState(true);\n  const [extraOptionText, setExtraOptionText] = useState(\"\");\n  const [productSelected, setProductSelected] = useState({\n    title: \"\",\n    id: \"\"\n  });\n  const [variantSelected, setVariantSelected] = useState({\n    title: \"\",\n    id: \"\",\n    cost: 0\n  });\n  const [nextPage, setNextPage] = useState(false);\n  const [reviewOrder, setReviewOrder] = useState(false);\n  const [orderState, setOrderState] = useState(null);\n  const commMethodPlain = props.data.row.values.comm_method;\n  var commMethod = commMethodPlain.includes(',') ? commMethodPlain.split(',')[0] : commMethodPlain; // console.log(commMethod)\n\n  const formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0\n  });\n  const phone = props.values.phone ? `${props.values.phone.slice(0, 3)}-${props.values.phone.slice(3, 6)}-${props.values.phone.slice(6)}` : \"\"; // console.log(dataToUpdate)\n  // console.log(variantData)\n  // console.log(props)\n  // console.log(data)\n\n  const orderItemsStyle = {\n    color: \"black\",\n    margin: \"20px 0\",\n    padding: \"10px 20px\",\n    backgroundColor: \"#efefef\",\n    textAlign: \"center\"\n  };\n  const columns = useMemo(() => [{\n    Header: 'ID',\n    accessor: 'id',\n    // Product ID\n    sortDescFirst: true\n  }, {\n    Header: 'Product',\n    accessor: 'title',\n    sortDescFirst: true\n  }, {\n    Header: 'Variant',\n    accessor: 'variant',\n    sortDescFirst: true,\n    show: true\n  }, {\n    Header: 'Quantity',\n    accessor: 'quantity',\n    sortDescFirst: true\n  }, {\n    Header: 'Recent Purchases',\n    accessor: 'purchases',\n    sortDescFirst: true\n  }, {\n    Header: 'Stock Level',\n    accessor: 'stockLevel',\n    disableSortBy: true\n  }, {\n    Header: 'Recent Order',\n    accessor: 'recentOrder',\n    disableSortBy: true\n  }], []);\n  const reviewColumns = useMemo(() => [{\n    Header: 'Product',\n    accessor: 'title',\n    sortDescFirst: true\n  }, {\n    Header: 'Variant',\n    accessor: 'variant',\n    sortDescFirst: true,\n    show: true\n  }, {\n    Header: 'Variant ID',\n    accessor: 'variantId',\n    show: false\n  }, {\n    Header: 'Order Quantity',\n    accessor: 'orderQuantity',\n    sortDescFirst: true\n  }, {\n    Header: 'Cost/unit',\n    accessor: 'cost',\n    sortDescFirst: true\n  }, {\n    Header: 'Subtotal',\n    accessor: 'subtotal',\n    sortDescFirst: true\n  }], []); //             <th></th>\n  //             <th>Variant</th>\n  //             <th>Current Quantity</th>\n  //             <th>Recent Purchases</th>\n  //             <th>Stock Level</th>\n  //             <th>Recent Order</th>\n  //             <th>Cost</th>\n  //             <th>Order Quantity</th>\n  //         </tr>\n  //     </thead>\n  //     <tbody>\n  //         {variantData.map((variant, index) => {\n  //                 return (\n  //                     <tr key={index}>\n  //                         <td>{variant.product}</td>\n  //                         <td>{variant.variant}</td>\n  //                         <td>{variant.quantity}</td>\n  //                         <td>{variant.purchases}</td>\n  //                         <td>{variant.stockLevel}</td>\n  //                         <td>{variant.recentOrder}</td>\n  //                         <td>{variant.cost}</td>\n  //                         <input type=\"text\" placeholder=\"0\"/>\n  //                     </tr>\n  //        \n\n  function addColumns(columns) {\n    const newColumns = columns;\n    newColumns.push({\n      Header: 'Variant',\n      accessor: 'variant',\n      sortDescFirst: true\n    }, {\n      Header: 'Cost',\n      accessor: 'cost',\n      sortDescFirst: true\n    });\n    return newColumns;\n  } //   const newColumns = useMemo(\n  //     () => [\n  //     {\n  //         Header: 'Product',\n  //         accessor: 'product', // Product ID\n  //         sortDescFirst: true\n  //         },\n  //       {\n  //         Header: 'Variant',\n  //         accessor: 'variant',\n  //         sortDescFirst: true\n  //       },\n  //       {\n  //         Header: 'Current Quantity',\n  //         accessor: 'quantity',\n  //         sortDescFirst: true,\n  //       },\n  //       {\n  //         Header: 'Recent Purchases',\n  //         accessor: 'purchases',\n  //         sortDescFirst: true,\n  //       },\n  //       {\n  //         Header: 'Stock Level',\n  //         accessor: 'stockLevel',\n  //         sortDescFirst: true,\n  //       },\n  //       {\n  //         Header: 'Recent Order',\n  //         accessor: 'recentOrder',\n  //         sortDescFirst: true,\n  //       },\n  //     ],\n  //     []\n  //   )\n\n\n  function getData() {\n    setLoading(true); // console.log('loading Vendor')\n\n    router.loadVendor(props.values.id).then(data => {\n      if (data) {\n        // console.log(data)\n        setData(data);\n        setLoading(false);\n      } else {// console.log(\"Error getting product data\")\n      }\n    });\n  }\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  function getVariants(e, hasVariants) {\n    // console.log('loading Variants')\n    router.loadVariants(e.target.value).then(data => {\n      // console.log('result of getProduct')\n      if (data) {\n        //   console.log(res.data)\n        if (hasVariants) {\n          setVariantData(data);\n          setVariantSelectHidden(false);\n        } else {\n          setVariantSelected({\n            id: data[0].id,\n            title: data[0].text,\n            cost: data[0].cost\n          });\n          setQuantityHidden(false); //   console.log(res.data)\n        } //   setLoading(false)      \n\n      } else {// console.log(\"Error getting product data\")\n        }\n    });\n  }\n\n  function orderClicked(btnIndex) {\n    const phone = `${props.values.phone.slice(0, 3)}-${props.values.phone.slice(3, 6)}-${props.values.phone.slice(6)}`;\n    const orderSteps = commMethodPlain.includes(\"call\") || commMethodPlain.includes(\"website\") || commMethodPlain.includes(',') ? 4 : 3; // console.log(orderSteps)\n\n    if (!isOrdering) {\n      // Start Order - change to add products\n      setOrdering(true);\n      setBtnText(\"Next\");\n      setOrderItemsHidden(false);\n      setOrderState(\"Choose Products\");\n      setPercentage(100 / orderSteps);\n    } else if (orderState === \"Choose Products\") {\n      // Going to next page of ordering after added products - choose variants and quantities\n      setPercentage(100 / orderSteps * 2); // update progress bar\n\n      setNextPage(true);\n      setOrderState(\"Choose Variants/Qty\");\n      console.log('loading order products');\n      router.loadOrderProducts(dataToUpdate).then(data => {\n        if (data) {\n          setVariantData(data);\n          setDataToUpdate([]); // empty dataToUpdate from any previous orders\n\n          setBtnText(\"Review\");\n        }\n      });\n    } else if (orderState === \"Choose Variants/Qty\") {\n      // Going to next page to review order and submit or use communication method\n      setNextPage(false);\n      setReviewOrder(true);\n      setPercentage(100 / orderSteps * 3); // update progress bar\n\n      if (commMethodPlain.includes(',')) {\n        // Multiple vendors\n        setExtraOptionHidden(false);\n        setExtraOptionText(`${capitalizeFirstLetter(commMethodPlain.split(',')[1])} ${commMethodPlain.split(',')[1] === 'call' ? phone : \"\"}`);\n        setBtnText(`${capitalizeFirstLetter(commMethod)} ${commMethod === 'call' ? phone : \"\"}`);\n        setOrderState(\"Multiple Vendors\");\n      } else {\n        // Only 1 vendor (as it is for the vast majority)\n        if (commMethodPlain.includes(\"website\")) {\n          setBtnText(\"Order on website\");\n          setOrderState(\"Website Order\");\n        } else if (commMethodPlain.includes('call')) {\n          setBtnText(`Call ${phone}`);\n          setOrderState(\"Calling Order\");\n        } else {\n          console.log('dis where we should be');\n          setBtnText(\"Submit\");\n          setOrderState(\"Review Order\");\n        }\n      } // setOrderOptionsHidden(false)\n      // setOrderState(\"Review Order\")\n\n    } else if (orderState === \"Website Order\") {\n      window.open(\"https://amazon.com\", '_blank'); // NEED TO CHANGE\n\n      setBtnText(\"Submit\");\n      setOrderState(\"Review Order\");\n      setPercentage(100 / orderSteps * 4);\n    } else if (orderState === \"Calling Order\") {\n      setPercentage(100 / orderSteps * 4);\n      setBtnText(\"Submit\");\n      setOrderState(\"Review Order\");\n    } else if (orderState === \"Multiple Vendors\") {\n      // One of the 2 buttons was clicked'\n      // console.log(commMethodPlain)\n      // console.log(btnIndex)\n      const method = commMethodPlain.split(',')[btnIndex]; // console.log(method)\n\n      if (method === \"call\") {\n        // Clicked on the Call button so now need to submit the order\n        setPercentage(100 / orderSteps * 4);\n        setBtnText(\"Submit\");\n        setOrderState(\"Review Order\");\n        setExtraOptionHidden(true);\n      } else if (method === \"website\") {\n        // Clicked on Website so now need to submit the order\n        window.open(\"https://amazon.com\", '_blank'); // NEED TO CHANGE\n\n        setBtnText(\"Submit\");\n        setOrderState(\"Review Order\");\n        setExtraOptionHidden(true);\n        setPercentage(100 / orderSteps * 4);\n      } else {\n        // Clicked on Email or Text so need to send the message which will then save the order\n        // console.log(btnText)\n        sendMessage(btnIndex); // setBtnText(\"Submit\")\n        // setOrderState(\"Review Order\")\n        // setExtraOptionHidden(true)\n\n        setPercentage(100 / orderSteps * 4);\n        setOrderState(null);\n        setOrdering(false);\n      }\n    } else if (orderState === \"Review Order\") {\n      // Submit - save order\n      commMethodPlain.includes(',') ? save() : sendMessage();\n      setOrderState(null);\n      setOrdering(false);\n    } // else {\n    //     // this only happens when have multiple vendors\n    //     console.log('this was called')\n    //     sendMessage(btnIndex)\n    //     setOrderState(null)\n    // }\n\n  }\n\n  function backClicked() {\n    // console.log(orderState)\n    const phone = `${props.values.phone.slice(0, 3)}-${props.values.phone.slice(3, 6)}-${props.values.phone.slice(6)}`;\n    const orderSteps = commMethod === \"text\" || commMethod === \"email\" ? 4 : 5;\n\n    if (orderState === \"Choose Products\") {\n      // console.log('u know it dawg')\n      setOrdering(false);\n      setBtnText(\"Order\");\n      setOrderItemsHidden(true);\n      setOrderState(null);\n      setPercentage(0);\n    } else if (orderState === \"Choose Variants/Qty\") {\n      setNextPage(false);\n      setOrderState(\"Choose Products\");\n      setBtnText(\"Next\");\n      setPercentage(100 / orderSteps);\n      console.log(data); // setOrderItemsHidden(false)\n      // newColumns = addColumns(columns)\n\n      setVariantData([]);\n      setDataToUpdate([]);\n      setVariantsToUpdate([]);\n    } else if (orderState === \"Website Order\" || orderState === \"Calling Order\" || orderState === \"Multiple Vendors\") {\n      console.log('dis where we are'); // chooseVariantsQty(phone, orderSteps)\n\n      setNextPage(true);\n      setReviewOrder(false);\n      setBtnText(\"Review\");\n      setOrderState(\"Choose Variants/Qty\");\n      setExtraOptionHidden(true); // setBtnText(\"Review\")\n      // setOrderState(\"Choose Variants/Qty\")\n      // setNextPage(false)\n      // setReviewOrder(true)\n\n      setPercentage(100 / orderSteps * 2); // update progress bar\n      // // setExtraOptionHidden(false)\n      // // setDataToUpdate([])\n      // // setVariantsToUpdate([])\n      // // setPercentage(100/orderSteps * 3)\n      // // setNextPage(false)\n      // // setReviewOrder(false)\n      // setOrderOptionsHidden(false)\n    } else if (orderState === \"Review Order\") {\n      // setNextPage(true)\n      setReviewOrder(false); // setBtnText(\"Review\")\n      // setNextPage(true)\n      // setReviewOrder(false)\n      // setReviewOrder(true)\n\n      setPercentage(100 / orderSteps * 3); // update progress bar\n\n      if (commMethodPlain.includes(',')) {\n        // Multiple vendors\n        setExtraOptionHidden(false);\n        setExtraOptionText(`${capitalizeFirstLetter(commMethodPlain.split(',')[1])} ${commMethodPlain.split(',')[1] === 'call' ? phone : \"\"}`);\n        setBtnText(`${capitalizeFirstLetter(commMethod)} ${commMethod === 'call' ? phone : \"\"}`);\n        setOrderState(\"Multiple Vendors\");\n      } else {\n        // Only 1 vendor (as it is for the vast majority)\n        if (commMethodPlain.includes(\"website\")) {\n          setBtnText(\"Order on website\");\n          setOrderState(\"Website Order\");\n        } else if (commMethodPlain.includes('call')) {\n          setBtnText(`Call ${phone}`);\n          setOrderState(\"Calling Order\");\n        } else {\n          setBtnText(\"Review\"); // setOrderOptionsHidden(true)\n\n          setOrderState(\"Choose Variants/Qty\");\n          setPercentage(100 / orderSteps * 2); // update progress bar\n\n          setNextPage(true);\n        }\n      } // setOrderOptionsHidden(false)\n\n    }\n  }\n\n  function chooseVariantsQty(phone, orderSteps) {}\n\n  function selectChanged(e) {\n    // Get the text and remove the stockLevel at the end\n    // console.log(text.slice(0,-1).join(\" \"))\n    // console.log(e.target.label)\n    // console.log(e.target.text)\n    if (e.target.id === \"productFilter\") {\n      const text = e.target[e.target.selectedIndex].label.split(\" \").slice(0, -1).join(\" \");\n      setProductSelected({\n        id: e.target.value,\n        title: text\n      }); // Check to see if has variants\n\n      var hasVariants = false;\n\n      if (e.target[e.target.selectedIndex].text != 1) {\n        hasVariants = true;\n      }\n\n      getVariants(e, hasVariants);\n    } else {\n      const text = e.target[e.target.selectedIndex].text;\n      setVariantSelected({\n        id: e.target.value.split(',')[0],\n        title: text,\n        cost: e.target.value.split(',')[1]\n      });\n      setQuantityHidden(false);\n    }\n  }\n\n  function sendMessage(btnIndex, isSave = true) {\n    // console.log(btnIndex)\n    // console.log(commMethodPlain)\n    if (btnIndex) {\n      commMethod = commMethodPlain.split(',')[btnIndex];\n    } // console.log(commMethod)\n\n\n    if (commMethod === \"text\") {\n      router.sendText(props.values.contact_name, dataToUpdate, \"4848885912\").then(data => {\n        // NEED TO CHANGE\n        // console.log(\"i dont think we're getting here\")\n        // if (isSave) {\n        //     console.log('im saving here dawg')\n        //     save()\n        // }\n        save();\n      });\n    } else if (commMethod === \"email\") {\n      router.sendEmail(props.values.contact_name, dataToUpdate, \"stepan.cannuscio@gmail.com\").then(data => {\n        // NEED TO CHANGE\n        // if (isSave) {\n        //     console.log('im saving here dawg')\n        //     save()\n        // }\n        save();\n      });\n    } else if (commMethod === \"website\" || commMethod === \"call\") {\n      // if (isSave) {\n      //     console.log('im saving here dawg')\n      //     save()\n      // }\n      save();\n    } else {\n      alert(\"No communication method for this vendor! Contact Step for help\");\n    }\n  }\n\n  function save() {\n    const order = {\n      vendor: props.data.row.values.id,\n      subtotal: 0,\n      status: \"submitted\"\n    };\n    const orderItems = [];\n    dataToUpdate.forEach(item => {\n      // console.log(item.subtotal)\n      if (item.subtotal != 0) {\n        order.subtotal += item.subtotal;\n        orderItems.push({\n          variant: item.variantId,\n          subtotal: item.subtotal,\n          // this is the subtotal including multiple qtys\n          quantity: item.quantity\n        });\n      }\n    });\n\n    if (dataToUpdate.length > 0) {\n      router.saveOrder(order, orderItems, props.user.id).then(data => {\n        // console.log(data)\n        if (data === \"Success\") {\n          props.toggle();\n        } else {// console.log('error saving')\n        }\n      });\n    }\n  }\n\n  function handleChange(e) {\n    setQuantity(e.target.value);\n    setAddBtnHidden(false);\n  }\n\n  function addVariant() {\n    const newData = {\n      productTitle: productSelected.title,\n      productId: productSelected.id,\n      variantTitle: variantSelected.title,\n      variantId: variantSelected.id,\n      cost: variantSelected.cost,\n      quantity: quantity,\n      subtotal: Math.round(variantSelected.cost * quantity * 100, 2) / 100\n    };\n    setDataToUpdate(oldArray => [...oldArray, newData]); // resetOrderItem()\n  }\n\n  function resetOrderItem() {\n    setProductSelected(\"\");\n    setVariantSelected(\"\");\n    setQuantity(0);\n    setProductSelectHidden(true);\n    setVariantSelectHidden(true);\n    setQuantityHidden(true);\n    setAddBtnHidden(true); // console.log(variantSelect.current.value)\n\n    variantSelect.current.value = \"none\";\n    productSelect.current.value = \"none\";\n    quantityInput.current.value = \"\";\n    quantityInput.current.placeholder = \"0\";\n  }\n\n  function rowSelected(data) {\n    // console.log(data)\n    // console.log(!data.isSelected)\n    if (!data.isSelected) {\n      // I don't know why but this is reversed when receiving the data\n      setDataToUpdate(oldArray => [...oldArray, data.values.id]);\n    } else {\n      var array = [...dataToUpdate]; // make a separate copy of the array\n\n      var index = array.indexOf(data.values.id);\n\n      if (index !== -1) {\n        array.splice(index, 1);\n        setDataToUpdate(array);\n      }\n    }\n  }\n\n  function remove(array, element) {\n    // console.log(element)\n    // console.log('we removing')\n    variantData.forEach((item, index) => {\n      if (item.variant_id === element.variant_id) {\n        var array = [...variantData]; // make a separate copy of the array\n\n        if (index !== -1) {\n          array.splice(index, 1); // console.log(array)\n\n          setVariantData(array);\n        } // console.log(dataToUpdate[index])\n\n      }\n    });\n\n    if (dataToUpdate.length > 0) {\n      dataToUpdate.forEach((item, index) => {\n        if (item.variantId === element.variant_id) {\n          var array = [...dataToUpdate]; // make a separate copy of the array\n\n          if (index !== -1) {\n            array.splice(index, 1);\n            setDataToUpdate(array);\n          } // console.log(dataToUpdate[index])\n\n        }\n      });\n    } // var copyArray = [...array]; // make a separate copy of the array\n    // var index = copyArray.indexOf(item.values)\n    // if (index !== -1) {\n    //     copyArray.splice(index, 1);\n    //     setVariantData(copyArray);\n    // }        \n\n  }\n\n  function addOrderItem(data, orderQuantity, index) {\n    // console.log(data)\n    // console.log(variantsToUpdate)\n    // console.log(data)\n    // const newVariantData = data\n    // newVariantData.orderQuantity = orderQuantity\n    // if (index) {\n    //     variantData.forEach((item, newIndex) => {\n    //         if (newIndex === index) {\n    //             var array = [...variantData]; // make a separate copy of the array\n    //             if (index !== -1) {\n    //                 array.splice(index, 1);\n    //                 setVariantData(array);\n    //             } \n    //             setVariantData(oldArray => [...oldArray, newVariantData])   \n    //         }\n    //         // if (item.variantId === data.variant_id) {\n    //         //     // console.log(dataToUpdate[index])\n    //         // }\n    //     })\n    // }\n    const newData = {\n      productTitle: data.title,\n      productId: data.id,\n      variantTitle: data.variant,\n      variantId: data.variant_id,\n      cost: data.cost,\n      quantity: orderQuantity,\n      subtotal: Math.round(data.cost * orderQuantity * 100, 2) / 100\n    }; // console.log(Object.values(dataToUpdate))\n\n    if (variantsToUpdate.includes(data.variant_id)) {\n      // console.log('yes')\n      dataToUpdate.forEach((item, index) => {\n        if (item.variantId === data.variant_id) {\n          var array = [...dataToUpdate]; // make a separate copy of the array\n\n          if (index !== -1) {\n            array.splice(index, 1);\n            setDataToUpdate(array);\n          }\n\n          setDataToUpdate(oldArray => [...oldArray, newData]); // console.log(dataToUpdate[index])\n        }\n      });\n    } else {\n      // console.log(variantsToUpdate)\n      // console.log('no')\n      setVariantsToUpdate(oldArray => [...oldArray, data.variant_id]);\n      setDataToUpdate(oldArray => [...oldArray, newData]);\n    }\n  }\n\n  function capitalizeFirstLetter(string) {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  } // resetOrderItem()\n\n\n  const Filler = props => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filler\",\n      style: {\n        width: `${props.percentage}%`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 16\n    }, this);\n  };\n\n  const ProgressBar = props => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(Filler, {\n        percentage: props.percentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 805,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 804,\n      columnNumber: 13\n    }, this);\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 812,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-content\",\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        percentage: percentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 819,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close\",\n        onClick: () => props.toggle(),\n        children: \"\\xD7    \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 820,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: data[0] ? data[0].name : \"Default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 821,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Products: \", props.values.products]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 822,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Low Products: \", props.values.low_products]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 823,\n        columnNumber: 17\n      }, this), isOrdering ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: backClicked,\n        className: \"edit-btn\",\n        style: {\n          backgroundColor: \"grey\"\n        },\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 31\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => orderClicked(0),\n        className: \"edit-btn\",\n        style: {\n          backgroundColor: editColor\n        },\n        children: btnText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 825,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        hidden: isExtraOptionHidden,\n        onClick: () => orderClicked(1),\n        className: \"edit-btn\",\n        style: {\n          backgroundColor: editColor\n        },\n        children: extraOptionText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 826,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 818,\n      columnNumber: 13\n    }, this), isOrdering ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        hidden: isOrderItemsHidden,\n        children: nextPage ? /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 852,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Variant\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 853,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Current Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 854,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Recent Purchases\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 855,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Stock Level\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 856,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Cost/unit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 857,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Order Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 858,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 859,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 851,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 850,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: variantData.map((variant, index) => {\n              var orderQuantity = 0;\n              dataToUpdate.forEach(item => {\n                if (item.variantId === variant.variant_id) {\n                  // console.log('ywehasflj')\n                  orderQuantity = item.quantity;\n                }\n              });\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: variant.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 875,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: variant.variant\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 876,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: variant.quantity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 877,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: variant.purchases\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 878,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: variant.stockLevel\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 879,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: formatter.format(variant.cost)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 880,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    placeholder: \"0\",\n                    value: orderQuantity,\n                    onChange: e => {\n                      addOrderItem(variant, e.target.value, index);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 881,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 881,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"close\",\n                    style: {\n                      color: \"red\"\n                    },\n                    onClick: () => remove(variantData, variant),\n                    children: \"\\xD7\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 886,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 886,\n                  columnNumber: 41\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 874,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 862,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 849,\n          columnNumber: 21\n        }, this) // <Table columns={ columns.concat(\n        // {\n        //     Header: 'Variant ID',\n        //     accessor: 'variant_id',\n        //     show: false\n        // },\n        // {\n        //     Header: 'Cost',\n        //     accessor: 'cost',\n        //     sortDescFirst: true\n        // },\n        // {\n        //     Header: 'Order Quantity',\n        //     accessor: 'orderQuantity',\n        // },\n        // {\n        //     Header: 'Remove',\n        //     accessor: 'remove',\n        // },\n        // )} data={variantData} search={false} type=\"order-variant\" popupEnabled={false} perPage={5} update={(data, orderQuantity) => addOrderItem(data, orderQuantity)} removeItem={(item) =>remove(variantData, item)}/>\n        // <table>\n        //     <thead>\n        //         <tr>\n        //             <th>Product</th>\n        //             <th>Variant</th>\n        //             <th>Current Quantity</th>\n        //             <th>Recent Purchases</th>\n        //             <th>Stock Level</th>\n        //             <th>Recent Order</th>\n        //             <th>Cost</th>\n        //             <th>Order Quantity</th>\n        //         </tr>\n        //     </thead>\n        //     <tbody>\n        //         {variantData.map((variant, index) => {\n        //                 return (\n        //                     <tr key={index}>\n        //                         <td>{variant.product}</td>\n        //                         <td>{variant.variant}</td>\n        //                         <td>{variant.quantity}</td>\n        //                         <td>{variant.purchases}</td>\n        //                         <td>{variant.stockLevel}</td>\n        //                         <td>{variant.recentOrder}</td>\n        //                         <td>{variant.cost}</td>\n        //                         <input type=\"text\" placeholder=\"0\"/>\n        //                     </tr>\n        //                 )\n        //         })}\n        //     </tbody>\n        // </table>\n        : reviewOrder ? /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 953,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Variant\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 954,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 955,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Cost/unit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 956,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Subtotal\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 957,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 952,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 951,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: dataToUpdate.map((order_item, index) => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: order_item.productTitle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 965,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: order_item.variantTitle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 966,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: order_item.quantity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 967,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: formatter.format(order_item.cost)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 968,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: formatter.format(order_item.subtotal)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 969,\n                  columnNumber: 41\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 964,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 960,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 950,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Table, {\n          columns: columns,\n          data: data,\n          search: false,\n          type: \"order\",\n          checkbox: true,\n          popupEnabled: false,\n          perPage: 5,\n          update: data => rowSelected(data)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 977,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 834,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 833,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      data: data,\n      type: \"order\",\n      search: false,\n      popupEnabled: false,\n      perPage: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1063,\n      columnNumber: 13\n    }, this) // <table style={{textAlign: \"center\"}}>\n    //     <thead >\n    //         <tr>\n    //             <th className=\"table-header\">Product</th>\n    //             <th className=\"table-header\">Quantity</th>\n    //             <th className=\"table-header\">Purchases (last 30 days)</th>\n    //             <th className=\"table-header\">Stock Level</th>\n    //             <th className=\"table-header\">Last Order</th>\n    //         </tr>\n    //     </thead>\n    //     <tbody>\n    //     {data.map((item, index) => {\n    //         var recentOrder = \"\"\n    //         if (item.status && item.status.split(',')[0] === \"completed\") {\n    //             recentOrder = `${item.quantity_ordered.split(',')[0]} units received on ${new Date(item.completed_date.split(',')[0]).toDateString()}`\n    //         } else if (item.status && item.status.split(',')[0] === \"fulfilled\") {\n    //             recentOrder = `Fulfilled on ${new Date(item.fulfilled_date.split(',')[0]).toDateString()} - ${item.tracking.split(',')[0]}`\n    //         } else if (item.status && item.status.split(',')[0] === \"submitted\") {\n    //             recentOrder = `Submitted order for ${item.quantity_ordered.split(',')[0]} units on ${new Date(item.submitted_date.split(',')[0]).toDateString()}`\n    //         }\n    //         return (\n    //             <tr key={index}>\n    //                 <td className=\"table-cell\">{item.title}</td>\n    //                 <td className=\"table-cell\">{item.quantity}</td>\n    //                 <td className=\"table-cell\">{item.purchases}</td>\n    //                 <td className=\"table-cell\">{item.stockLevel}</td>\n    //                 <td className=\"table-cell\">{recentOrder}</td>\n    //             </tr>\n    //             ) \n    //         })\n    //     }\n    //     </tbody>\n    // </table>\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 816,\n    columnNumber: 9\n  }, this);\n}\n\n_s(VendorPopup, \"SKzWElWcVCn5sDGBAQlszxRODQE=\");\n\n_c = VendorPopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"VendorPopup\");","map":{"version":3,"sources":["/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/sims/frontend/src/Vendors/VendorPopup.js"],"names":["useState","useEffect","useRef","useMemo","MessageOption","Table","router","VendorPopup","props","variantSelect","productSelect","quantityInput","percentage","setPercentage","btnText","setBtnText","isOrdering","setOrdering","isLoading","setLoading","editColor","setEditColor","isOrderItemsHidden","setOrderItemsHidden","isOrderOptionsHidden","setOrderOptionsHidden","dataToUpdate","setDataToUpdate","variantsToUpdate","setVariantsToUpdate","data","setData","variantData","setVariantData","isAddBtnHidden","setAddBtnHidden","isQuantityHidden","setQuantityHidden","quantity","setQuantity","isProductSelectHidden","setProductSelectHidden","isVariantSelectHidden","setVariantSelectHidden","isExtraOptionHidden","setExtraOptionHidden","extraOptionText","setExtraOptionText","productSelected","setProductSelected","title","id","variantSelected","setVariantSelected","cost","nextPage","setNextPage","reviewOrder","setReviewOrder","orderState","setOrderState","commMethodPlain","row","values","comm_method","commMethod","includes","split","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","phone","slice","orderItemsStyle","color","margin","padding","backgroundColor","textAlign","columns","Header","accessor","sortDescFirst","show","disableSortBy","reviewColumns","addColumns","newColumns","push","getData","loadVendor","then","getVariants","e","hasVariants","loadVariants","target","value","text","orderClicked","btnIndex","orderSteps","console","log","loadOrderProducts","capitalizeFirstLetter","window","open","method","sendMessage","save","backClicked","chooseVariantsQty","selectChanged","selectedIndex","label","join","isSave","sendText","contact_name","sendEmail","alert","order","vendor","subtotal","status","orderItems","forEach","item","variant","variantId","length","saveOrder","user","toggle","handleChange","addVariant","newData","productTitle","productId","variantTitle","Math","round","oldArray","resetOrderItem","current","placeholder","rowSelected","isSelected","array","index","indexOf","splice","remove","element","variant_id","addOrderItem","orderQuantity","string","charAt","toUpperCase","Filler","width","ProgressBar","name","products","low_products","map","purchases","stockLevel","format","order_item"],"mappings":"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","sourcesContent":["import \"../styles/Popup.css\"\nimport {useState, useEffect, useRef, useMemo} from \"react\"\nimport MessageOption from \"./MessageOption\"\nimport Table from \"../components/Table\"\nimport * as router from \"./vendorAPI\"\n\n\nexport default function VendorPopup(props) {\n    // console.log(props)\n\n    const variantSelect = useRef()\n    const productSelect = useRef()\n    const quantityInput = useRef()\n\n    const [percentage, setPercentage] = useState(0)\n\n    const [btnText, setBtnText] = useState(\"Order\")\n    const [isOrdering, setOrdering] = useState(false)\n    const [isLoading, setLoading] = useState(true)\n    const [editColor, setEditColor] = useState(\"#76c32d\")\n    const [isOrderItemsHidden, setOrderItemsHidden] = useState(true)\n    const [isOrderOptionsHidden, setOrderOptionsHidden] = useState(true)\n    const [dataToUpdate, setDataToUpdate] = useState([])\n    const [variantsToUpdate, setVariantsToUpdate] = useState([])\n    const [data, setData] = useState([])\n\n    const [variantData, setVariantData] = useState([])\n    const [isAddBtnHidden, setAddBtnHidden] = useState(true)\n    const [isQuantityHidden, setQuantityHidden] = useState(true)\n    const [quantity, setQuantity] = useState(0)\n    const [isProductSelectHidden, setProductSelectHidden] = useState(true)\n    const [isVariantSelectHidden, setVariantSelectHidden] = useState(true)\n    const [isExtraOptionHidden, setExtraOptionHidden] = useState(true)\n    const [extraOptionText, setExtraOptionText] = useState(\"\")\n    const [productSelected, setProductSelected] = useState({title: \"\", id: \"\"})\n    const [variantSelected, setVariantSelected] = useState({title: \"\", id: \"\", cost: 0})\n    const [nextPage, setNextPage] = useState(false)\n    const [reviewOrder, setReviewOrder] = useState(false)\n    const [orderState, setOrderState] = useState(null)\n    const commMethodPlain = props.data.row.values.comm_method\n    var commMethod = commMethodPlain.includes(',') ? commMethodPlain.split(',')[0] : commMethodPlain\n    // console.log(commMethod)\n\n    const formatter = new Intl.NumberFormat('en-US', {\n        style: 'currency',\n        currency: 'USD',\n        minimumFractionDigits: 0\n      })\n\n    const phone = props.values.phone ? `${props.values.phone.slice(0,3)}-${props.values.phone.slice(3,6)}-${props.values.phone.slice(6,)}` : \"\"\n\n    // console.log(dataToUpdate)\n    // console.log(variantData)\n    // console.log(props)\n    // console.log(data)\n\n    const orderItemsStyle = {\n        color: \"black\", \n        margin: \"20px 0\", \n        padding: \"10px 20px\", \n        backgroundColor: \"#efefef\", \n        textAlign: \"center\"\n    }\n\n\n    const columns = useMemo(\n        () => [\n        {\n            Header: 'ID',\n            accessor: 'id', // Product ID\n            sortDescFirst: true\n            },\n          {\n            Header: 'Product',\n            accessor: 'title',\n            sortDescFirst: true\n          },\n          {\n            Header: 'Variant',\n            accessor: 'variant',\n            sortDescFirst: true,\n            show: true\n          },\n          {\n            Header: 'Quantity',\n            accessor: 'quantity',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Recent Purchases',\n            accessor: 'purchases',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Stock Level',\n            accessor: 'stockLevel',\n            disableSortBy: true\n          },\n          {\n            Header: 'Recent Order',\n            accessor: 'recentOrder',\n            disableSortBy: true\n          },\n        ],\n        []\n      )\n\n\n      const reviewColumns = useMemo(\n        () => [\n\n          {\n            Header: 'Product',\n            accessor: 'title',\n            sortDescFirst: true\n          },\n          {\n            Header: 'Variant',\n            accessor: 'variant',\n            sortDescFirst: true,\n            show: true\n          },\n          {\n            Header: 'Variant ID',\n            accessor: 'variantId',\n            show: false\n          },\n          {\n            Header: 'Order Quantity',\n            accessor: 'orderQuantity',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Cost/unit',\n            accessor: 'cost',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Subtotal',\n            accessor: 'subtotal',\n            sortDescFirst: true,\n          },\n        ],\n        []\n      )\n\n\n      \n                    //             <th></th>\n                    //             <th>Variant</th>\n                    //             <th>Current Quantity</th>\n                    //             <th>Recent Purchases</th>\n                    //             <th>Stock Level</th>\n                    //             <th>Recent Order</th>\n                    //             <th>Cost</th>\n                    //             <th>Order Quantity</th>\n                    //         </tr>\n                    //     </thead>\n                    //     <tbody>\n                    //         {variantData.map((variant, index) => {\n                           \n                    //                 return (\n                    //                     <tr key={index}>\n                    //                         <td>{variant.product}</td>\n                    //                         <td>{variant.variant}</td>\n                    //                         <td>{variant.quantity}</td>\n                    //                         <td>{variant.purchases}</td>\n                    //                         <td>{variant.stockLevel}</td>\n                    //                         <td>{variant.recentOrder}</td>\n                    //                         <td>{variant.cost}</td>\n                    //                         <input type=\"text\" placeholder=\"0\"/>\n                    //                     </tr>\n                    //        \n                \n   \n    \n\n    function addColumns(columns) {\n\n        const newColumns = columns\n        newColumns.push(\n            {\n                Header: 'Variant',\n                accessor: 'variant',\n                sortDescFirst: true \n            },\n            {\n                Header: 'Cost',\n                accessor: 'cost',\n                sortDescFirst: true\n            }\n        )\n        return newColumns\n        \n    }\n\n   \n\n    \n    //   const newColumns = useMemo(\n    //     () => [\n    //     {\n    //         Header: 'Product',\n    //         accessor: 'product', // Product ID\n    //         sortDescFirst: true\n    //         },\n    //       {\n    //         Header: 'Variant',\n    //         accessor: 'variant',\n    //         sortDescFirst: true\n    //       },\n    //       {\n    //         Header: 'Current Quantity',\n    //         accessor: 'quantity',\n    //         sortDescFirst: true,\n    //       },\n    //       {\n    //         Header: 'Recent Purchases',\n    //         accessor: 'purchases',\n    //         sortDescFirst: true,\n    //       },\n    //       {\n    //         Header: 'Stock Level',\n    //         accessor: 'stockLevel',\n    //         sortDescFirst: true,\n    //       },\n    //       {\n    //         Header: 'Recent Order',\n    //         accessor: 'recentOrder',\n    //         sortDescFirst: true,\n    //       },\n    //     ],\n    //     []\n    //   )\n\n      \n\n\n      \n\n\n    function getData() {\n        setLoading(true)\n        // console.log('loading Vendor')\n        router.loadVendor(props.values.id).then(data => {\n            if (data) {\n                // console.log(data)\n                setData(data)\n                setLoading(false)\n            } else {\n                // console.log(\"Error getting product data\")\n            }\n        });\n      }\n\n      useEffect(() => {\n        getData()\n    }, []);\n\n    function getVariants(e, hasVariants) {\n        // console.log('loading Variants')\n        router.loadVariants(e.target.value).then(data => {\n          // console.log('result of getProduct')\n          if (data) {\n            //   console.log(res.data)\n\n              if (hasVariants) {\n                setVariantData(data)\n                setVariantSelectHidden(false)\n              } else {\n                setVariantSelected({\n                    id: data[0].id,\n                    title: data[0].text,\n                    cost: data[0].cost\n                })\n                setQuantityHidden(false)\n                //   console.log(res.data)\n              }\n              \n            //   setLoading(false)      \n          } else {\n              // console.log(\"Error getting product data\")\n          }\n      });\n    }\n\n    function orderClicked(btnIndex) {\n        const phone = `${props.values.phone.slice(0,3)}-${props.values.phone.slice(3,6)}-${props.values.phone.slice(6,)}`\n        const orderSteps = commMethodPlain.includes(\"call\") || commMethodPlain.includes(\"website\") || commMethodPlain.includes(',') ? 4 : 3\n        // console.log(orderSteps)\n        if (!isOrdering) {\n            // Start Order - change to add products\n            setOrdering(true)\n            setBtnText(\"Next\")\n            setOrderItemsHidden(false)\n            setOrderState(\"Choose Products\")\n            setPercentage(100/orderSteps)\n\n        } else if (orderState === \"Choose Products\") {\n            // Going to next page of ordering after added products - choose variants and quantities\n            setPercentage(100/orderSteps * 2) // update progress bar\n            setNextPage(true)\n            setOrderState(\"Choose Variants/Qty\")\n\n            console.log('loading order products')\n\n            router.loadOrderProducts(dataToUpdate).then(data => {\n                  if (data) {\n                    setVariantData(data)\n                    setDataToUpdate([]) // empty dataToUpdate from any previous orders\n                    setBtnText(\"Review\")\n                  }\n            })\n            \n        } else if (orderState === \"Choose Variants/Qty\") {\n            // Going to next page to review order and submit or use communication method\n\n            setNextPage(false)\n            setReviewOrder(true)\n            setPercentage(100/orderSteps * 3) // update progress bar\n    \n\n            if (commMethodPlain.includes(',')) {\n                // Multiple vendors\n                setExtraOptionHidden(false)\n                setExtraOptionText(`${capitalizeFirstLetter(commMethodPlain.split(',')[1])} ${commMethodPlain.split(',')[1] === 'call' ? phone : \"\"}`)\n                setBtnText(`${capitalizeFirstLetter(commMethod)} ${commMethod === 'call' ? phone : \"\"}`)\n                setOrderState(\"Multiple Vendors\")\n\n                \n            } else {\n                // Only 1 vendor (as it is for the vast majority)\n                if (commMethodPlain.includes(\"website\")) {        \n                    setBtnText(\"Order on website\")\n                    setOrderState(\"Website Order\")\n                } else if (commMethodPlain.includes('call')) {\n                    setBtnText(`Call ${phone}`)\n                    setOrderState(\"Calling Order\")         \n                } else {\n                    console.log('dis where we should be')\n                    setBtnText(\"Submit\")\n                    setOrderState(\"Review Order\")\n                }\n            }\n            // setOrderOptionsHidden(false)\n            \n                \n         \n            \n            // setOrderState(\"Review Order\")\n            \n\n        } else if (orderState === \"Website Order\") {\n           window.open(\"https://amazon.com\",'_blank') // NEED TO CHANGE\n           setBtnText(\"Submit\")\n           setOrderState(\"Review Order\")\n           setPercentage(100/orderSteps * 4)\n        } else if (orderState === \"Calling Order\") {\n            setPercentage(100/orderSteps * 4)\n            setBtnText(\"Submit\")\n            setOrderState(\"Review Order\")\n        } else if (orderState === \"Multiple Vendors\") {\n            // One of the 2 buttons was clicked'\n            // console.log(commMethodPlain)\n            // console.log(btnIndex)\n            const method = commMethodPlain.split(',')[btnIndex]\n            // console.log(method)\n            if (method === \"call\") {\n                // Clicked on the Call button so now need to submit the order\n                setPercentage(100/orderSteps * 4)\n                setBtnText(\"Submit\")\n                setOrderState(\"Review Order\")\n                setExtraOptionHidden(true)\n            } else if (method === \"website\") {\n                // Clicked on Website so now need to submit the order\n                window.open(\"https://amazon.com\",'_blank') // NEED TO CHANGE\n                setBtnText(\"Submit\")\n                setOrderState(\"Review Order\")\n                setExtraOptionHidden(true)\n                setPercentage(100/orderSteps * 4)\n            } else {\n                // Clicked on Email or Text so need to send the message which will then save the order\n                // console.log(btnText)\n                sendMessage(btnIndex)\n                // setBtnText(\"Submit\")\n                // setOrderState(\"Review Order\")\n                // setExtraOptionHidden(true)\n                setPercentage(100/orderSteps * 4)\n                setOrderState(null)\n                setOrdering(false)\n            }\n        }  else if (orderState === \"Review Order\") {\n            // Submit - save order\n            commMethodPlain.includes(',') ? save() : sendMessage() \n            setOrderState(null)\n            setOrdering(false)\n        } \n        // else {\n        //     // this only happens when have multiple vendors\n        //     console.log('this was called')\n        //     sendMessage(btnIndex)\n        //     setOrderState(null)\n        // }\n    }\n    \n    function backClicked() {\n        // console.log(orderState)\n        const phone = `${props.values.phone.slice(0,3)}-${props.values.phone.slice(3,6)}-${props.values.phone.slice(6,)}`\n        const orderSteps = commMethod === \"text\" || commMethod === \"email\" ? 4 : 5\n        if (orderState === \"Choose Products\") {\n            // console.log('u know it dawg')\n            setOrdering(false)\n            setBtnText(\"Order\")\n            setOrderItemsHidden(true)\n            setOrderState(null)\n            setPercentage(0)\n        } else if (orderState === \"Choose Variants/Qty\") {\n            setNextPage(false)\n            setOrderState(\"Choose Products\")\n            setBtnText(\"Next\")\n            setPercentage(100/orderSteps)\n            console.log(data)\n       \n    \n            // setOrderItemsHidden(false)\n           \n            // newColumns = addColumns(columns)\n            setVariantData([])\n            setDataToUpdate([])\n            setVariantsToUpdate([])\n        } else if (orderState === \"Website Order\" || orderState === \"Calling Order\" || orderState === \"Multiple Vendors\") {\n            console.log('dis where we are')\n            // chooseVariantsQty(phone, orderSteps)\n            setNextPage(true)\n            setReviewOrder(false)\n            setBtnText(\"Review\")\n  \n            setOrderState(\"Choose Variants/Qty\")\n\n            setExtraOptionHidden(true)\n            // setBtnText(\"Review\")\n            // setOrderState(\"Choose Variants/Qty\")\n            // setNextPage(false)\n            // setReviewOrder(true)\n            setPercentage(100/orderSteps * 2) // update progress bar\n            // // setExtraOptionHidden(false)\n            // // setDataToUpdate([])\n            // // setVariantsToUpdate([])\n            // // setPercentage(100/orderSteps * 3)\n\n\n            // // setNextPage(false)\n            // // setReviewOrder(false)\n\n            // setOrderOptionsHidden(false)\n        \n        } else if (orderState === \"Review Order\") {\n            // setNextPage(true)\n            setReviewOrder(false)\n            // setBtnText(\"Review\")\n     \n\n            // setNextPage(true)\n            // setReviewOrder(false)\n            \n            // setReviewOrder(true)\n\n            setPercentage(100/orderSteps * 3) // update progress bar\n    \n\n            if (commMethodPlain.includes(',')) {\n                // Multiple vendors\n                setExtraOptionHidden(false)\n                setExtraOptionText(`${capitalizeFirstLetter(commMethodPlain.split(',')[1])} ${commMethodPlain.split(',')[1] === 'call' ? phone : \"\"}`)\n                setBtnText(`${capitalizeFirstLetter(commMethod)} ${commMethod === 'call' ? phone : \"\"}`)\n                setOrderState(\"Multiple Vendors\")\n\n                \n            } else {\n                // Only 1 vendor (as it is for the vast majority)\n                if (commMethodPlain.includes(\"website\")) {        \n                    setBtnText(\"Order on website\")\n                    setOrderState(\"Website Order\")\n                } else if (commMethodPlain.includes('call')) {\n                    setBtnText(`Call ${phone}`)\n                    setOrderState(\"Calling Order\")         \n                } else {\n                    setBtnText(\"Review\")\n                    // setOrderOptionsHidden(true)\n                    setOrderState(\"Choose Variants/Qty\")\n\n                    setPercentage(100/orderSteps * 2) // update progress bar\n                    setNextPage(true)\n                }\n            }\n            // setOrderOptionsHidden(false)\n                \n        } \n\n    }\n\n    function chooseVariantsQty(phone, orderSteps) {\n       \n    }\n\n    \n\n    function selectChanged(e) {\n\n        // Get the text and remove the stockLevel at the end\n        \n        // console.log(text.slice(0,-1).join(\" \"))\n        // console.log(e.target.label)\n        // console.log(e.target.text)\n        if (e.target.id === \"productFilter\") {\n\n            const text = e.target[e.target.selectedIndex].label.split(\" \").slice(0,-1).join(\" \")\n\n            setProductSelected({\n                id: e.target.value,\n                title: text\n            })\n            // Check to see if has variants\n            var hasVariants = false\n            if (e.target[e.target.selectedIndex].text != 1) {\n                hasVariants = true\n            } \n\n            getVariants(e, hasVariants)\n            \n          \n            \n        } else {\n\n            const text = e.target[e.target.selectedIndex].text\n            setVariantSelected({\n                id: e.target.value.split(',')[0],\n                title: text,\n                cost: e.target.value.split(',')[1]\n            })\n            setQuantityHidden(false)\n        }\n    }\n\n    function sendMessage(btnIndex, isSave=true) {\n\n        // console.log(btnIndex)\n        // console.log(commMethodPlain)\n\n        if (btnIndex) {\n            commMethod = commMethodPlain.split(',')[btnIndex]\n        }\n\n        // console.log(commMethod)\n\n        if (commMethod === \"text\") {\n            router.sendText(props.values.contact_name, dataToUpdate, \"4848885912\").then(data => { // NEED TO CHANGE\n                // console.log(\"i dont think we're getting here\")\n                // if (isSave) {\n                //     console.log('im saving here dawg')\n                //     save()\n                // }\n                save()\n            })\n        }\n        else if (commMethod === \"email\") {\n            router.sendEmail(props.values.contact_name, dataToUpdate, \"stepan.cannuscio@gmail.com\").then(data => { // NEED TO CHANGE\n                // if (isSave) {\n                //     console.log('im saving here dawg')\n                //     save()\n                // }\n                save()\n            })\n        } else if (commMethod === \"website\" || commMethod === \"call\") {\n            // if (isSave) {\n            //     console.log('im saving here dawg')\n            //     save()\n            // }\n\n            save()\n        } else {\n            alert(\"No communication method for this vendor! Contact Step for help\")\n        }\n    }\n\n    function save() {\n            \n        const order = {\n            vendor: props.data.row.values.id,\n            subtotal: 0,\n            status: \"submitted\"\n        }\n\n        const orderItems = []\n        dataToUpdate.forEach(item => {\n            // console.log(item.subtotal)\n            if (item.subtotal != 0) {\n       \n                order.subtotal += item.subtotal\n                orderItems.push({\n                    variant: item.variantId,\n                    subtotal: item.subtotal, // this is the subtotal including multiple qtys\n                    quantity: item.quantity\n                })\n            }\n        \n        })\n     \n        if (dataToUpdate.length > 0) {\n            router.saveOrder(order, orderItems, props.user.id).then(data => {\n                // console.log(data)\n            if (data === \"Success\") {\n                props.toggle()\n            } else {\n                // console.log('error saving')\n            }\n         })\n        } \n    }\n    \n\n    function handleChange(e) {\n        setQuantity(e.target.value)\n        setAddBtnHidden(false)\n    }\n\n    function addVariant() {\n        const newData = {\n            productTitle: productSelected.title,\n            productId: productSelected.id,\n            variantTitle: variantSelected.title,\n            variantId: variantSelected.id,\n            cost: variantSelected.cost,\n            quantity: quantity,\n            subtotal: Math.round(variantSelected.cost * quantity * 100, 2) / 100\n        }\n        setDataToUpdate(oldArray => [...oldArray, newData])\n\n        // resetOrderItem()\n    }\n\n    function resetOrderItem() {\n        setProductSelected(\"\")\n        setVariantSelected(\"\")\n        setQuantity(0)\n        setProductSelectHidden(true)\n        setVariantSelectHidden(true)\n        setQuantityHidden(true)\n        setAddBtnHidden(true)\n        // console.log(variantSelect.current.value)\n        variantSelect.current.value = \"none\"\n        productSelect.current.value = \"none\"\n        quantityInput.current.value = \"\"\n        quantityInput.current.placeholder = \"0\"\n    }\n\n    function rowSelected(data) {\n        // console.log(data)\n        // console.log(!data.isSelected)\n        if (!data.isSelected) { // I don't know why but this is reversed when receiving the data\n            setDataToUpdate(oldArray => [...oldArray, data.values.id])\n        } else {\n            var array = [...dataToUpdate]; // make a separate copy of the array\n            var index = array.indexOf(data.values.id)\n            if (index !== -1) {\n                array.splice(index, 1);\n                setDataToUpdate(array);\n            }        \n     } \n    }\n\n    function remove(array, element) {\n        // console.log(element)\n        // console.log('we removing')\n\n        variantData.forEach((item, index) => {\n                \n            if (item.variant_id === element.variant_id) {\n                var array = [...variantData]; // make a separate copy of the array\n                if (index !== -1) {\n                    array.splice(index, 1);\n                    // console.log(array)\n                    setVariantData(array);\n                } \n  \n                // console.log(dataToUpdate[index])\n              \n            }\n        })\n\n        if (dataToUpdate.length > 0) {\n            dataToUpdate.forEach((item, index) => {\n                \n                if (item.variantId === element.variant_id) {\n                    var array = [...dataToUpdate]; // make a separate copy of the array\n                    if (index !== -1) {\n                        array.splice(index, 1);\n                        setDataToUpdate(array);\n                    } \n                     \n                    // console.log(dataToUpdate[index])\n                  \n                }\n            })\n        }\n        // var copyArray = [...array]; // make a separate copy of the array\n\n        \n        // var index = copyArray.indexOf(item.values)\n        // if (index !== -1) {\n        //     copyArray.splice(index, 1);\n        //     setVariantData(copyArray);\n        // }        \n    }\n\n    function addOrderItem(data, orderQuantity, index) {\n        // console.log(data)\n        // console.log(variantsToUpdate)\n        // console.log(data)\n\n        // const newVariantData = data\n        // newVariantData.orderQuantity = orderQuantity\n        // if (index) {\n        //     variantData.forEach((item, newIndex) => {\n        //         if (newIndex === index) {\n        //             var array = [...variantData]; // make a separate copy of the array\n        //             if (index !== -1) {\n        //                 array.splice(index, 1);\n        //                 setVariantData(array);\n        //             } \n        //             setVariantData(oldArray => [...oldArray, newVariantData])   \n        //         }\n                \n        //         // if (item.variantId === data.variant_id) {\n                      \n        //         //     // console.log(dataToUpdate[index])\n                  \n        //         // }\n        //     })\n        // }\n\n        const newData = {\n            productTitle: data.title,\n            productId: data.id,\n            variantTitle: data.variant,\n            variantId: data.variant_id,\n            cost: data.cost,\n            quantity: orderQuantity,\n            subtotal: Math.round(data.cost * orderQuantity * 100, 2) / 100\n        }\n\n        // console.log(Object.values(dataToUpdate))\n\n        if (variantsToUpdate.includes(data.variant_id)) {\n            // console.log('yes')\n            \n        \n            dataToUpdate.forEach((item, index) => {\n                \n                if (item.variantId === data.variant_id) {\n                    var array = [...dataToUpdate]; // make a separate copy of the array\n                    if (index !== -1) {\n                        array.splice(index, 1);\n                        setDataToUpdate(array);\n                    } \n                    setDataToUpdate(oldArray => [...oldArray, newData])       \n                    // console.log(dataToUpdate[index])\n                  \n                }\n            })\n        } else {\n            // console.log(variantsToUpdate)\n            // console.log('no')\n            setVariantsToUpdate(oldArray => [...oldArray, data.variant_id])\n            \n            setDataToUpdate(oldArray => [...oldArray, newData])\n            \n        }\n    }\n\n\n\n\n    function capitalizeFirstLetter(string) {\n        return string.charAt(0).toUpperCase() + string.slice(1);\n        }\n\n       \n\n        \n\n        \n    \n\n        // resetOrderItem()\n\n\n    const Filler = (props) => {\n        return <div className=\"filler\" style={{width: `${props.percentage}%`}}></div>\n    }\n\n    const ProgressBar = (props) => {\n        return (\n            <div className=\"progress-bar\">\n                <Filler percentage={props.percentage}/>\n            </div>\n        )\n    }\n\n\n    if (isLoading) {\n        return <div className=\"loader\"></div>;\n    }\n\n    return (\n        <div>\n            \n            <div className=\"top-content\">\n            <ProgressBar percentage={percentage}/>\n                <span className=\"close\" onClick={() =>  props.toggle()}>&times;    </span>\n                <h2 >{data[0] ? data[0].name : \"Default\"}</h2>\n                <p>Products: {props.values.products}</p>\n                <p>Low Products: {props.values.low_products}</p>\n                {isOrdering ? <button onClick={backClicked} className=\"edit-btn\" style={{backgroundColor: \"grey\"}}>Back</button> : null }\n                <button onClick={() => orderClicked(0)} className=\"edit-btn\" style={{backgroundColor: editColor}}>{btnText}</button>\n                <button hidden={isExtraOptionHidden} onClick={() => orderClicked(1)} className=\"edit-btn\" style={{backgroundColor: editColor}}>{extraOptionText}</button>\n                \n            </div>\n      \n            {isOrdering \n\n            ?\n            <div>\n                <div hidden={isOrderItemsHidden}>\n                    {/* <button style={{display: \"block\"}} onClick={() => setProductSelectHidden(false)}>New Product</button> */}\n                    {/* <select ref={productSelect} hidden={isProductSelectHidden} onChange={selectChanged} defaultValue=\"none\" id=\"productFilter\" name=\"productFilter\">\n                        <option value=\"none\">Choose Product:</option>\n                        {data.map((product, index) => {\n                            return (\n                                <option key={index} label={`${product.title} (${product.stockLevel})`} value={product.id}>{product.variants}</option>\n                            )\n                        })}\n                    </select> */}\n                    \n                    \n\n                    {nextPage \n                    ?\n                    <table>\n                    <thead>\n                        <tr>\n                            <th>Product</th>\n                            <th>Variant</th>\n                            <th>Current Quantity</th>\n                            <th>Recent Purchases</th>\n                            <th>Stock Level</th>\n                            <th>Cost/unit</th>\n                            <th>Order Quantity</th>\n                            <th>Remove</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {variantData.map((variant, index) => {\n\n                            var orderQuantity = 0\n                            dataToUpdate.forEach(item => {\n                                if (item.variantId === variant.variant_id) {\n                                    // console.log('ywehasflj')\n                                    orderQuantity = item.quantity\n                                }\n                            })\n                       \n                                return (\n                                    <tr key={index}>\n                                        <td>{variant.title}</td>\n                                        <td>{variant.variant}</td>\n                                        <td>{variant.quantity}</td>\n                                        <td>{variant.purchases}</td>\n                                        <td>{variant.stockLevel}</td>\n                                        <td>{formatter.format(variant.cost)}</td>\n                                        <td><input type=\"text\" placeholder=\"0\" value={orderQuantity} onChange={(e) => {\n                                            addOrderItem(variant, e.target.value, index) \n                                       \n                                           \n                                        }}/></td>\n                                        <td><span className=\"close\" style={{color: \"red\"}} onClick={() =>  remove(variantData, variant)}>&times;</span></td>\n                                    </tr>\n                                )\n                            \n                        })}\n                    </tbody>\n                </table>\n                    // <Table columns={ columns.concat(\n                    // {\n                    //     Header: 'Variant ID',\n                    //     accessor: 'variant_id',\n                    //     show: false\n                    // },\n                    // {\n                    //     Header: 'Cost',\n                    //     accessor: 'cost',\n                    //     sortDescFirst: true\n                    // },\n                    // {\n                    //     Header: 'Order Quantity',\n                    //     accessor: 'orderQuantity',\n                    // },\n                    // {\n                    //     Header: 'Remove',\n                    //     accessor: 'remove',\n                    // },\n                    // )} data={variantData} search={false} type=\"order-variant\" popupEnabled={false} perPage={5} update={(data, orderQuantity) => addOrderItem(data, orderQuantity)} removeItem={(item) =>remove(variantData, item)}/>\n\n                    // <table>\n                    //     <thead>\n                    //         <tr>\n                    //             <th>Product</th>\n                    //             <th>Variant</th>\n                    //             <th>Current Quantity</th>\n                    //             <th>Recent Purchases</th>\n                    //             <th>Stock Level</th>\n                    //             <th>Recent Order</th>\n                    //             <th>Cost</th>\n                    //             <th>Order Quantity</th>\n                    //         </tr>\n                    //     </thead>\n                    //     <tbody>\n                    //         {variantData.map((variant, index) => {\n                           \n                    //                 return (\n                    //                     <tr key={index}>\n                    //                         <td>{variant.product}</td>\n                    //                         <td>{variant.variant}</td>\n                    //                         <td>{variant.quantity}</td>\n                    //                         <td>{variant.purchases}</td>\n                    //                         <td>{variant.stockLevel}</td>\n                    //                         <td>{variant.recentOrder}</td>\n                    //                         <td>{variant.cost}</td>\n                    //                         <input type=\"text\" placeholder=\"0\"/>\n                    //                     </tr>\n                    //                 )\n                                \n                    //         })}\n                    //     </tbody>\n                    // </table>\n\n                    :\n                    reviewOrder \n                    ?\n                    <table>\n                    <thead>\n                        <tr>\n                            <th>Product</th>\n                            <th>Variant</th>\n                            <th>Quantity</th>\n                            <th>Cost/unit</th>\n                            <th>Subtotal</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {dataToUpdate.map((order_item, index) => {\n                       \n                                return (\n                                    <tr key={index}>\n                                        <td>{order_item.productTitle}</td>\n                                        <td>{order_item.variantTitle}</td>\n                                        <td>{order_item.quantity}</td>\n                                        <td>{formatter.format(order_item.cost)}</td>\n                                        <td>{formatter.format(order_item.subtotal)}</td>\n                                    </tr>\n                                )\n                            \n                        })}\n                    </tbody>\n                </table>\n                    :\n                    <Table columns={columns} data={data} search={false} type=\"order\" checkbox={true} popupEnabled={false} perPage={5} update={(data) => rowSelected(data)}/>\n                        }\n              \n                    {/* <select ref={variantSelect} hidden={isVariantSelectHidden} onChange={selectChanged} defaultValue=\"none\" id=\"variantFilter\" name=\"variantFilter\">\n                    <option value=\"none\">Choose Variant:</option>\n                        {variantData.map((variant, index) => {\n                            return (\n                                <option key={index} value={[variant.id, variant.cost]}>{variant.title}</option>\n                            )\n                        })}\n                    </select> */}\n                    {/* <input ref={quantityInput} hidden={isQuantityHidden} placeholder={quantity} onChange={handleChange} />\n                    <button hidden={isAddBtnHidden} onClick={addVariant}>Add</button> */}\n                   \n                    \n            \n                    \n                </div>\n                {/* <div hidden={isOrderOptionsHidden}>\n                    {comm_method === \"email\" \n                    ?\n                    <MessageOption type=\"Email\" contact_name={props.values.contact_name} to=\"stepan.cannuscio@gmail.com\" dataToUpdate={dataToUpdate} />\n                    :\n                                \n                    comm_method === \"call\" \n                    ?\n                    <a href=\"tel:4848885912\"><button>Call: 484-888-5912</button></a>\n\n                    :\n                    comm_method === \"text\" \n                    ?\n                    <MessageOption type=\"Text\" contact_name={props.values.contact_name} to=\"4848885912\" dataToUpdate={dataToUpdate} />\n                    :\n                    comm_method === \"website\"\n                    ?\n                    <MessageOption type=\"Website\" contact_name={props.values.contact_name} to=\"https://amazon.com\" dataToUpdate={dataToUpdate} />\n                    :\n                    <p>Not sure about this one!</p>\n                    }           \n                        \n                       \n                        \n                </div> */}\n       \n        \n            {/* <table style={{textAlign: \"center\"}}>\n            <thead >\n                <tr>\n                    <th className=\"table-header\">Product</th>\n                    <th className=\"table-header\">Quantity</th>\n                    <th className=\"table-header\">Purchases (last 30 days)</th>\n                    <th className=\"table-header\">Stock Level</th>\n                    <th className=\"table-header\">Last Order</th>\n                </tr>\n            </thead>\n\n            <tbody>\n            {data.map((item, index) => {\n                var recentOrder = \"\"\n                if (item.status && item.status.split(',')[0] === \"completed\") {\n                    recentOrder = `${item.quantity_ordered.split(',')[0]} units received on ${new Date(item.completed_date.split(',')[0]).toDateString()}`\n                } else if (item.status && item.status.split(',')[0] === \"fulfilled\") {\n                    recentOrder = `Fulfilled on ${new Date(item.fulfilled_date.split(',')[0]).toDateString()} - ${item.tracking.split(',')[0]}`\n                } else if (item.status && item.status.split(',')[0] === \"submitted\") {\n                    recentOrder = `Submitted order for ${item.quantity_ordered.split(',')[0]} units on ${new Date(item.submitted_date.split(',')[0]).toDateString()}`\n                }\n                \n                return (\n                    <tr key={index}>\n                        <td className=\"table-cell\">{item.title}</td>\n                        <td className=\"table-cell\">{item.quantity}</td>\n                        <td className=\"table-cell\">{item.purchases}</td>\n                        <td className=\"table-cell\">{item.stockLevel}</td>\n                        <td className=\"table-cell\">{recentOrder}</td>\n                        \n                    </tr>\n                    ) \n                })\n            }\n            </tbody>\n        </table>\n        </div> */}\n        </div>\n    \n            :\n\n            <Table columns={columns} data={data} type=\"order\" search={false} popupEnabled={false} perPage={5}/>\n    \n            // <table style={{textAlign: \"center\"}}>\n            //     <thead >\n            //         <tr>\n            //             <th className=\"table-header\">Product</th>\n            //             <th className=\"table-header\">Quantity</th>\n            //             <th className=\"table-header\">Purchases (last 30 days)</th>\n            //             <th className=\"table-header\">Stock Level</th>\n            //             <th className=\"table-header\">Last Order</th>\n            //         </tr>\n            //     </thead>\n\n            //     <tbody>\n            //     {data.map((item, index) => {\n            //         var recentOrder = \"\"\n            //         if (item.status && item.status.split(',')[0] === \"completed\") {\n            //             recentOrder = `${item.quantity_ordered.split(',')[0]} units received on ${new Date(item.completed_date.split(',')[0]).toDateString()}`\n            //         } else if (item.status && item.status.split(',')[0] === \"fulfilled\") {\n            //             recentOrder = `Fulfilled on ${new Date(item.fulfilled_date.split(',')[0]).toDateString()} - ${item.tracking.split(',')[0]}`\n            //         } else if (item.status && item.status.split(',')[0] === \"submitted\") {\n            //             recentOrder = `Submitted order for ${item.quantity_ordered.split(',')[0]} units on ${new Date(item.submitted_date.split(',')[0]).toDateString()}`\n            //         }\n                    \n            //         return (\n            //             <tr key={index}>\n            //                 <td className=\"table-cell\">{item.title}</td>\n            //                 <td className=\"table-cell\">{item.quantity}</td>\n            //                 <td className=\"table-cell\">{item.purchases}</td>\n            //                 <td className=\"table-cell\">{item.stockLevel}</td>\n            //                 <td className=\"table-cell\">{recentOrder}</td>\n                            \n            //             </tr>\n            //             ) \n            //         })\n            //     }\n            //     </tbody>\n            // </table>\n}       \n  </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}