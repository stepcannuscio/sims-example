{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/components/Chart.js\",\n    _s = $RefreshSig$();\n\nimport { ResponsiveContainer, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nexport default function Chart() {\n  _s();\n\n  const [salesData, setSalesData] = useState([]);\n\n  function getSales() {\n    axios.get('http://localhost:5000/orders/', {\n      withCredentials: true\n    }).then(response => {\n      if (response.data) {\n        const salesByDate = [];\n        const shopifyDateDict = {};\n        const wooDateDict = {};\n        response.data.forEach(order => {\n          const orderDate = order.date.slice(0, 10);\n\n          if (order.source === \"Shopify\") {\n            if (orderDate in shopifyDateDict) {\n              shopifyDateDict[orderDate] += order.price;\n            } else {\n              shopifyDateDict[orderDate] = order.price;\n            }\n          } else {\n            if (orderDate in wooDateDict) {\n              wooDateDict[orderDate] += order.price;\n            } else {\n              wooDateDict[orderDate] = order.price;\n            }\n          }\n        });\n\n        for (var key in shopifyDateDict) {\n          //   console.log(key)\n          salesByDate.push({\n            date: key,\n            shopify: shopifyDateDict[key],\n            woo: key in wooDateDict ? wooDateDict[key] : 0\n          });\n        }\n\n        for (var key in wooDateDict) {\n          if (!(key in shopifyDateDict)) {\n            // console.log(key)\n            salesByDate.push({\n              date: key,\n              shopify: 0,\n              woo: wooDateDict[key]\n            });\n          }\n        }\n\n        salesByDate.sort(function (a, b) {\n          a = a.date.split('/').reverse().join('');\n          b = b.date.split('/').reverse().join('');\n          return a > b ? 1 : a < b ? -1 : 0;\n        });\n        console.log(salesByDate);\n        setSalesData(salesByDate);\n      }\n    });\n  }\n\n  useEffect(() => {\n    getSales();\n  }, []); //   sortProducts(salesByDate,\"high\")\n  //    console.log(salesByDate)\n\n  const data = [{\n    name: 'Page A',\n    uv: 400,\n    pv: 1400,\n    amt: 1800\n  }, {\n    name: 'Page B',\n    uv: 500,\n    pv: 2500,\n    amt: 1600\n  }, {\n    name: 'Page C',\n    uv: 800,\n    pv: 3600,\n    amt: 2900\n  }, {\n    name: 'Page D',\n    uv: 700,\n    pv: 1200,\n    amt: 3200\n  }, {\n    name: 'Page E',\n    uv: 4095,\n    pv: 4900,\n    amt: 5600\n  }];\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"50vh\",\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      data: salesData,\n      margin: {\n        right: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"shopify\",\n        stroke: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"woo\",\n        stroke: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n        stroke: \"#ccc\",\n        strokeDasharray: \"5 5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 9\n  }, this);\n} // //  margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\n// const renderLineChart = () => (\n// );\n// export default renderLineChart;\n\n_s(Chart, \"ivuxsniXM1EI1p/SbwyOVTwtldo=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/components/Chart.js"],"names":["ResponsiveContainer","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","useEffect","useState","axios","Chart","salesData","setSalesData","getSales","get","withCredentials","then","response","data","salesByDate","shopifyDateDict","wooDateDict","forEach","order","orderDate","date","slice","source","price","key","push","shopify","woo","sort","a","b","split","reverse","join","console","log","name","uv","pv","amt","right"],"mappings":"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","sourcesContent":["import { ResponsiveContainer, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nimport {useEffect, useState} from \"react\"\nimport axios from \"axios\"\n\nexport default function Chart() {\n\n    const [salesData, setSalesData] = useState([])\n\n    function getSales() {\n        axios.get('http://localhost:5000/orders/', {withCredentials: true}).then(response => {\n            if (response.data) {\n\n                const salesByDate = []\n                const shopifyDateDict = {}\n                const wooDateDict = {}\n\n                response.data.forEach(order => {\n                    const orderDate = order.date.slice(0,10)\n                    if (order.source === \"Shopify\") {\n                        if (orderDate in shopifyDateDict) {\n                            shopifyDateDict[orderDate] += order.price\n                        } else {\n                            shopifyDateDict[orderDate] = order.price\n                        }\n                    } else {\n                        if (orderDate in wooDateDict) {\n                            wooDateDict[orderDate] += order.price\n                        } else {\n                            wooDateDict[orderDate] = order.price\n                        }\n                    }\n                    \n                })\n                \n                for (var key in shopifyDateDict) {\n                    //   console.log(key)\n                    salesByDate.push({\n                        date: key,\n                        shopify: shopifyDateDict[key],\n                        woo: key in wooDateDict ? wooDateDict[key] : 0\n                        })\n                }\n\n                for (var key in wooDateDict) {\n                    if (!(key in shopifyDateDict)) {\n                        // console.log(key)\n                        salesByDate.push({\n                        date: key,\n                        shopify: 0,\n                        woo: wooDateDict[key]\n                    })\n                    }\n                }\n                \n\n                salesByDate.sort(function(a,b) {\n                    a = a.date.split('/').reverse().join('');\n                    b = b.date.split('/').reverse().join('');\n                    return a > b ? 1 : a < b ? -1 : 0;\n                  });\n                  console.log(salesByDate)\n                \n                  setSalesData(salesByDate)\n                }         \n            })\n        \n      }\n  \n      useEffect(() => {\n        getSales()\n      }, []);\n\n  \n//   sortProducts(salesByDate,\"high\")\n//    console.log(salesByDate)\n    const data = [\n        {\n            name: 'Page A', uv: 400, pv: 1400, amt: 1800\n        },\n        {\n            name: 'Page B', uv: 500, pv: 2500, amt: 1600\n        },\n        {\n            name: 'Page C', uv: 800, pv: 3600, amt: 2900\n        },\n        {\n            name: 'Page D', uv: 700, pv: 1200, amt: 3200\n        },\n        {\n            name: 'Page E', uv: 4095, pv: 4900, amt: 5600\n        },\n         ];\n    return (\n        <ResponsiveContainer width=\"100%\" height=\"50vh\" >\n        <LineChart data={salesData} margin={{right: 20}}>\n            <Line type=\"monotone\" dataKey=\"shopify\" stroke=\"#8884d8\" />\n            <Line type=\"monotone\" dataKey=\"woo\" stroke=\"red\" />\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis/>\n            <Tooltip />\n        </LineChart>\n  </ResponsiveContainer>\n    )\n}\n\n// //  margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\n// const renderLineChart = () => (\n   \n// );\n\n// export default renderLineChart;"]},"metadata":{},"sourceType":"module"}