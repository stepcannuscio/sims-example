{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/sims/frontend/src/Home/CogsChart.js\";\nimport { ResponsiveContainer, AreaChart, Area, Legend, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nexport default function CogsChart(props) {\n  // const [data, setData] = useState([])\n  // function getData() {\n  //     axios.get('http://localhost:5000/purchases/cogs', {withCredentials: true}).then(response => {\n  //         if (response.data) {\n  //             // console.log(response.data)\n  //             const salesByDate = []\n  //             const priceDateDict = {}\n  //             const costWithDiscountDateDict = {}\n  //             const costDateDict = {}\n  //             response.data.forEach(purchase => {\n  //                 const orderDate = purchase.date.slice(0,7)\n  //                     if (orderDate in priceDateDict) {\n  //                         priceDateDict[orderDate] += purchase.price\n  //                         costWithDiscountDateDict[orderDate] += (purchase.discount + purchase.cost)\n  //                         costDateDict[orderDate] += purchase.cost\n  //                     } else {\n  //                         priceDateDict[orderDate] = purchase.price\n  //                         costWithDiscountDateDict[orderDate] = (purchase.discount + purchase.cost)\n  //                         costDateDict[orderDate] = purchase.cost     \n  //                     } \n  //             })     \n  //             for (var key in priceDateDict) {\n  //                 //   console.log(key)\n  //                 salesByDate.push({\n  //                     date: key,\n  //                     price: priceDateDict[key],\n  //                     costWithDiscount: costWithDiscountDateDict[key],\n  //                     cost: costDateDict[key]\n  //                 })\n  //             }\n  //             salesByDate.sort(function(a,b) {\n  //                 a = a.date.split('/').reverse().join('');\n  //                 b = b.date.split('/').reverse().join('');\n  //                 return a > b ? 1 : a < b ? -1 : 0;\n  //               });\n  //               console.log(salesByDate)  \n  //               setData(salesByDate)\n  //         }\n  //     })\n  // }\n  //   useEffect(() => {\n  //     getData()\n  //   }, []);\n  const CustomTooltip = ({\n    active,\n    payload,\n    label\n  }) => {\n    // console.log(payload)\n    if (active) {\n      // const total = payload[0].value + payload[1].value + payload[2].value\n      // console.log(total)\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"custom-tooltip\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"label\",\n            children: payload ? payload[0].payload.date : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"label\",\n          children: payload ? `Sales: ${Math.round(payload[0].value / (payload[1].value + payload[2].value + payload[0].value) * 100)}%` : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"label\",\n          children: payload ? `Discounts: ${Math.round(payload[1].value / (payload[1].value + payload[2].value + payload[0].value) * 100)}%` : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"label\",\n          children: payload ? `COGS: ${Math.round(payload[2].value / (payload[1].value + payload[2].value + payload[0].value) * 100)}%` : null\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this);\n    }\n\n    return null;\n  };\n\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"80%\",\n    children: /*#__PURE__*/_jsxDEV(AreaChart // width={500}\n    // height={400}\n    , {\n      data: props.data // margin={{\n      // top: 10, right: 30, left: 0, bottom: 0,\n      // }}\n      ,\n      children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {\n        strokeDasharray: \"3 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        content: /*#__PURE__*/_jsxDEV(CustomTooltip, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 35\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"price\",\n        stackId: \"1\",\n        stroke: \"#8884d8\",\n        fill: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"costWithDiscount\",\n        stackId: \"2\",\n        stroke: \"#82ca9d\",\n        fill: \"#82ca9d\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Area, {\n        type: \"monotone\",\n        dataKey: \"cost\",\n        stackId: \"3\",\n        stroke: \"#ffc658\",\n        fill: \"#ffc658\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Legend, {\n        verticalAlign: \"top\",\n        height: 36\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 9\n  }, this);\n}\n_c = CogsChart;\n\nvar _c;\n\n$RefreshReg$(_c, \"CogsChart\");","map":{"version":3,"sources":["/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/sims/frontend/src/Home/CogsChart.js"],"names":["ResponsiveContainer","AreaChart","Area","Legend","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","CogsChart","props","CustomTooltip","active","payload","label","date","Math","round","value","data"],"mappings":"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","sourcesContent":["import { ResponsiveContainer, AreaChart, Area, Legend, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\n\nexport default function CogsChart(props) {\n\n    // const [data, setData] = useState([])\n\n    // function getData() {\n    //     axios.get('http://localhost:5000/purchases/cogs', {withCredentials: true}).then(response => {\n    //         if (response.data) {\n    //             // console.log(response.data)\n    //             const salesByDate = []\n    //             const priceDateDict = {}\n    //             const costWithDiscountDateDict = {}\n    //             const costDateDict = {}\n\n    //             response.data.forEach(purchase => {\n    //                 const orderDate = purchase.date.slice(0,7)\n               \n    //                     if (orderDate in priceDateDict) {\n    //                         priceDateDict[orderDate] += purchase.price\n    //                         costWithDiscountDateDict[orderDate] += (purchase.discount + purchase.cost)\n    //                         costDateDict[orderDate] += purchase.cost\n\n    //                     } else {\n    //                         priceDateDict[orderDate] = purchase.price\n    //                         costWithDiscountDateDict[orderDate] = (purchase.discount + purchase.cost)\n    //                         costDateDict[orderDate] = purchase.cost     \n    //                     } \n    //             })     \n    //             for (var key in priceDateDict) {\n    //                 //   console.log(key)\n    //                 salesByDate.push({\n    //                     date: key,\n    //                     price: priceDateDict[key],\n    //                     costWithDiscount: costWithDiscountDateDict[key],\n    //                     cost: costDateDict[key]\n    //                 })\n    //             }\n    //             salesByDate.sort(function(a,b) {\n    //                 a = a.date.split('/').reverse().join('');\n    //                 b = b.date.split('/').reverse().join('');\n    //                 return a > b ? 1 : a < b ? -1 : 0;\n    //               });\n    //               console.log(salesByDate)  \n    //               setData(salesByDate)\n    //         }\n    //     })\n        \n    // }\n  \n    //   useEffect(() => {\n    //     getData()\n    //   }, []);\n\n    const CustomTooltip = ({ active, payload, label }) => {\n        // console.log(payload)\n        \n     \n    if (active) {\n        // const total = payload[0].value + payload[1].value + payload[2].value\n        // console.log(total)\n        return (\n        <div className=\"custom-tooltip\">\n            <strong><p className=\"label\">{payload ? payload[0].payload.date : null}</p></strong>\n            {/* <p className=\"label\">{`Sales: $${Math.round(payload[0].value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`}</p> */}\n            <p className=\"label\">{payload ? `Sales: ${Math.round(payload[0].value / (payload[1].value + payload[2].value + payload[0].value)*100)}%` : null}</p>\n            {/* <p className=\"label\">{`Discounts: $${Math.round(payload[1].value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`}</p> */}\n            <p className=\"label\">{payload ? `Discounts: ${Math.round(payload[1].value / (payload[1].value + payload[2].value + payload[0].value)*100)}%` : null}</p>\n            {/* <p className=\"label\">{`COGS: $${Math.round(payload[2].value).toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}`}</p> */}\n            <p className=\"label\">{payload ? `COGS: ${Math.round(payload[2].value / (payload[1].value + payload[2].value + payload[0].value)*100)}%` : null}</p>\n        </div>\n        );\n    }\n    \n    return null;\n    };\n    \n\n    return (\n        <ResponsiveContainer width=\"100%\" height=\"80%\">\n            <AreaChart\n                    // width={500}\n                    // height={400}\n                    data={props.data}\n                    // margin={{\n                    // top: 10, right: 30, left: 0, bottom: 0,\n                    // }}\n                >   \n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip content={<CustomTooltip />}/>\n                <Area type=\"monotone\" dataKey=\"price\" stackId=\"1\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n                <Area type=\"monotone\" dataKey=\"costWithDiscount\" stackId=\"2\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\n                <Area type=\"monotone\" dataKey=\"cost\" stackId=\"3\" stroke=\"#ffc658\" fill=\"#ffc658\" />\n                <Legend verticalAlign=\"top\" height={36}/>\n            </AreaChart>\n        {/* <LineChart data={salesData} margin={{right: 20}}>\n            <Legend verticalAlign=\"top\" height={36}/>\n            <Line type=\"monotone\" dataKey=\"shopify\" stroke=\"#8884d8\" />\n            <Line type=\"monotone\" dataKey=\"woo\" stroke=\"red\" />\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis/>\n            <Tooltip />\n        </LineChart> */}\n        </ResponsiveContainer>\n  \n    )\n\n}"]},"metadata":{},"sourceType":"module"}