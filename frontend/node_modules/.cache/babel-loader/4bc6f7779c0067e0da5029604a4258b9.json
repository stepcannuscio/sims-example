{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/sims/frontend/src/components/OutsideAlerter.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n/**\n * Hook that alerts clicks outside of the passed ref\n */\n\nfunction useOutsideAlerter(ref, props) {\n  _s();\n\n  useEffect(() => {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event) {\n      console.log(ref.current.className);\n\n      if (ref.current && !ref.current.contains(event.target)) {\n        if (props.includes('display')) {\n          if (props.display === \"block\") {\n            props.hide();\n          }\n        } else {\n          props.hide();\n        }\n      }\n    } // Bind the event listener\n\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref, props]);\n}\n/**\n * Component that alerts if you click outside of it\n */\n\n\n_s(useOutsideAlerter, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nfunction OutsideAlerter(props) {\n  _s2();\n\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef, props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 10\n  }, this);\n}\n\n_s2(OutsideAlerter, \"kF1gJ+9qozGrx9T2BaxcGZVoPDQ=\", false, function () {\n  return [useOutsideAlerter];\n});\n\n_c = OutsideAlerter;\nOutsideAlerter.propTypes = {\n  children: PropTypes.element.isRequired\n};\nexport default OutsideAlerter;\n\nvar _c;\n\n$RefreshReg$(_c, \"OutsideAlerter\");","map":{"version":3,"sources":["/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/sims/frontend/src/components/OutsideAlerter.js"],"names":["React","useRef","useEffect","PropTypes","useOutsideAlerter","ref","props","handleClickOutside","event","console","log","current","className","contains","target","includes","display","hide","document","addEventListener","removeEventListener","OutsideAlerter","wrapperRef","children","propTypes","element","isRequired"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,KAAhC,EAAuC;AAAA;;AACrCJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACJ;AACA;AACI,aAASK,kBAAT,CAA4BC,KAA5B,EAAmC;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAYL,GAAG,CAACM,OAAJ,CAAYC,SAAxB;;AACF,UAAIP,GAAG,CAACM,OAAJ,IAAe,CAACN,GAAG,CAACM,OAAJ,CAAYE,QAAZ,CAAqBL,KAAK,CAACM,MAA3B,CAApB,EAAwD;AACtD,YAAIR,KAAK,CAACS,QAAN,CAAe,SAAf,CAAJ,EAA+B;AAC5B,cAAIT,KAAK,CAACU,OAAN,KAAkB,OAAtB,EAA+B;AAC9BV,YAAAA,KAAK,CAACW,IAAN;AACA;AACH,SAJD,MAIO;AACHX,UAAAA,KAAK,CAACW,IAAN;AACH;AACF;AACF,KAfa,CAgBd;;;AACAC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCZ,kBAAvC;AACA,WAAO,MAAM;AACX;AACAW,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0Cb,kBAA1C;AACD,KAHD;AAID,GAtBQ,EAsBN,CAACF,GAAD,EAAMC,KAAN,CAtBM,CAAT;AAuBD;AAED;AACA;AACA;;;GA5BSF,iB;;AA6BT,SAASiB,cAAT,CAAwBf,KAAxB,EAA+B;AAAA;;AAC7B,QAAMgB,UAAU,GAAGrB,MAAM,CAAC,IAAD,CAAzB;AACAG,EAAAA,iBAAiB,CAACkB,UAAD,EAAahB,KAAb,CAAjB;AAEA,sBAAO;AAAK,IAAA,GAAG,EAAEgB,UAAV;AAAA,cAAuBhB,KAAK,CAACiB;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;IALQF,c;UAEPjB,iB;;;KAFOiB,c;AAOTA,cAAc,CAACG,SAAf,GAA2B;AACzBD,EAAAA,QAAQ,EAAEpB,SAAS,CAACsB,OAAV,CAAkBC;AADH,CAA3B;AAIA,eAAeL,cAAf","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Hook that alerts clicks outside of the passed ref\n */\nfunction useOutsideAlerter(ref, props) {\n  useEffect(() => {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event) {\n        console.log(ref.current.className)\n      if (ref.current && !ref.current.contains(event.target)) {\n        if (props.includes('display')) {\n           if (props.display === \"block\") {\n            props.hide()\n           }\n        } else {\n            props.hide()\n        }\n      }\n    }\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref, props]);\n}\n\n/**\n * Component that alerts if you click outside of it\n */\nfunction OutsideAlerter(props) {\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef, props);\n\n  return <div ref={wrapperRef}>{props.children}</div>;\n}\n\nOutsideAlerter.propTypes = {\n  children: PropTypes.element.isRequired\n};\n\nexport default OutsideAlerter;\n"]},"metadata":{},"sourceType":"module"}