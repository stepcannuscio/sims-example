{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/sims/frontend/src/components/OutsideAlerter.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n/**\n * Hook that alerts clicks outside of the passed ref\n */\n\nfunction useOutsideAlerter(ref, props) {\n  _s();\n\n  useEffect(() => {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event) {\n      console.log(props);\n\n      if (ref.current && !ref.current.contains(event.target) && props.display === \"block\") {\n        props.hide();\n      }\n    } // Bind the event listener\n\n\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref, props]);\n}\n/**\n * Component that alerts if you click outside of it\n */\n\n\n_s(useOutsideAlerter, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nfunction OutsideAlerter(props) {\n  _s2();\n\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef, props);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: wrapperRef,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 10\n  }, this);\n}\n\n_s2(OutsideAlerter, \"kF1gJ+9qozGrx9T2BaxcGZVoPDQ=\", false, function () {\n  return [useOutsideAlerter];\n});\n\n_c = OutsideAlerter;\nOutsideAlerter.propTypes = {\n  children: PropTypes.element.isRequired\n};\nexport default OutsideAlerter;\n\nvar _c;\n\n$RefreshReg$(_c, \"OutsideAlerter\");","map":{"version":3,"sources":["/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/sims/frontend/src/components/OutsideAlerter.js"],"names":["React","useRef","useEffect","PropTypes","useOutsideAlerter","ref","props","handleClickOutside","event","console","log","current","contains","target","display","hide","document","addEventListener","removeEventListener","OutsideAlerter","wrapperRef","children","propTypes","element","isRequired"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA;AACA;AACA;;AACA,SAASC,iBAAT,CAA2BC,GAA3B,EAAgCC,KAAhC,EAAuC;AAAA;;AACrCJ,EAAAA,SAAS,CAAC,MAAM;AACd;AACJ;AACA;AACI,aAASK,kBAAT,CAA4BC,KAA5B,EAAmC;AAC/BC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;;AACF,UAAID,GAAG,CAACM,OAAJ,IAAe,CAACN,GAAG,CAACM,OAAJ,CAAYC,QAAZ,CAAqBJ,KAAK,CAACK,MAA3B,CAAhB,IAAsDP,KAAK,CAACQ,OAAN,KAAkB,OAA5E,EAAqF;AAEnFR,QAAAA,KAAK,CAACS,IAAN;AACD;AACF,KAVa,CAWd;;;AACAC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCV,kBAAvC;AACA,WAAO,MAAM;AACX;AACAS,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CX,kBAA1C;AACD,KAHD;AAID,GAjBQ,EAiBN,CAACF,GAAD,EAAMC,KAAN,CAjBM,CAAT;AAkBD;AAED;AACA;AACA;;;GAvBSF,iB;;AAwBT,SAASe,cAAT,CAAwBb,KAAxB,EAA+B;AAAA;;AAC7B,QAAMc,UAAU,GAAGnB,MAAM,CAAC,IAAD,CAAzB;AACAG,EAAAA,iBAAiB,CAACgB,UAAD,EAAad,KAAb,CAAjB;AAEA,sBAAO;AAAK,IAAA,GAAG,EAAEc,UAAV;AAAA,cAAuBd,KAAK,CAACe;AAA7B;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;IALQF,c;UAEPf,iB;;;KAFOe,c;AAOTA,cAAc,CAACG,SAAf,GAA2B;AACzBD,EAAAA,QAAQ,EAAElB,SAAS,CAACoB,OAAV,CAAkBC;AADH,CAA3B;AAIA,eAAeL,cAAf","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\n/**\n * Hook that alerts clicks outside of the passed ref\n */\nfunction useOutsideAlerter(ref, props) {\n  useEffect(() => {\n    /**\n     * Alert if clicked on outside of element\n     */\n    function handleClickOutside(event) {\n        console.log(props)\n      if (ref.current && !ref.current.contains(event.target) && props.display === \"block\") {\n\n        props.hide()\n      }\n    }\n    // Bind the event listener\n    document.addEventListener(\"mousedown\", handleClickOutside);\n    return () => {\n      // Unbind the event listener on clean up\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [ref, props]);\n}\n\n/**\n * Component that alerts if you click outside of it\n */\nfunction OutsideAlerter(props) {\n  const wrapperRef = useRef(null);\n  useOutsideAlerter(wrapperRef, props);\n\n  return <div ref={wrapperRef}>{props.children}</div>;\n}\n\nOutsideAlerter.propTypes = {\n  children: PropTypes.element.isRequired\n};\n\nexport default OutsideAlerter;\n"]},"metadata":{},"sourceType":"module"}