{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/Vendors/VendorPopup.js\",\n    _s = $RefreshSig$();\n\nimport \"../styles/Popup.css\";\nimport { useState, useEffect, useRef, useMemo } from \"react\";\nimport MessageOption from \"./MessageOption\";\nimport Table from \"../components/Table\";\nimport * as router from \"./vendorAPI\";\nexport default function VendorPopup(props) {\n  _s();\n\n  console.log(props);\n  const variantSelect = useRef();\n  const productSelect = useRef();\n  const quantityInput = useRef();\n  const [percentage, setPercentage] = useState(0);\n  const [btnText, setBtnText] = useState(\"Order\");\n  const [isOrdering, setOrdering] = useState(false);\n  const [isLoading, setLoading] = useState(true);\n  const [editColor, setEditColor] = useState(\"#76c32d\");\n  const [isOrderItemsHidden, setOrderItemsHidden] = useState(true);\n  const [isOrderOptionsHidden, setOrderOptionsHidden] = useState(true);\n  const [dataToUpdate, setDataToUpdate] = useState([]);\n  const [variantsToUpdate, setVariantsToUpdate] = useState([]);\n  const [data, setData] = useState([]);\n  const [variantData, setVariantData] = useState([]);\n  const [isAddBtnHidden, setAddBtnHidden] = useState(true);\n  const [isQuantityHidden, setQuantityHidden] = useState(true);\n  const [quantity, setQuantity] = useState(0);\n  const [isProductSelectHidden, setProductSelectHidden] = useState(true);\n  const [isVariantSelectHidden, setVariantSelectHidden] = useState(true);\n  const [productSelected, setProductSelected] = useState({\n    title: \"\",\n    id: \"\"\n  });\n  const [variantSelected, setVariantSelected] = useState({\n    title: \"\",\n    id: \"\",\n    cost: 0\n  });\n  const [nextPage, setNextPage] = useState(false);\n  const [reviewOrder, setReviewOrder] = useState(false);\n  const [orderState, setOrderState] = useState(null);\n  const comm_method = props.data.row.values.comm_method;\n  console.log(dataToUpdate);\n  console.log(variantData);\n  console.log(props); // console.log(data)\n\n  const orderItemsStyle = {\n    color: \"black\",\n    margin: \"20px 0\",\n    padding: \"10px 20px\",\n    backgroundColor: \"#efefef\",\n    textAlign: \"center\"\n  };\n  const columns = useMemo(() => [{\n    Header: 'ID',\n    accessor: 'id',\n    // Product ID\n    sortDescFirst: true\n  }, {\n    Header: 'Product',\n    accessor: 'title',\n    sortDescFirst: true\n  }, {\n    Header: 'Variant',\n    accessor: 'variant',\n    sortDescFirst: true,\n    show: true\n  }, {\n    Header: 'Quantity',\n    accessor: 'quantity',\n    sortDescFirst: true\n  }, {\n    Header: 'Recent Purchases',\n    accessor: 'purchases',\n    sortDescFirst: true\n  }, {\n    Header: 'Stock Level',\n    accessor: 'stockLevel',\n    sortDescFirst: true\n  }, {\n    Header: 'Recent Order',\n    accessor: 'recentOrder',\n    sortDescFirst: true\n  }], []);\n  const reviewColumns = useMemo(() => [{\n    Header: 'Product',\n    accessor: 'title',\n    sortDescFirst: true\n  }, {\n    Header: 'Variant',\n    accessor: 'variant',\n    sortDescFirst: true,\n    show: true\n  }, {\n    Header: 'Variant ID',\n    accessor: 'variantId',\n    show: false\n  }, {\n    Header: 'Order Quantity',\n    accessor: 'orderQuantity',\n    sortDescFirst: true\n  }, {\n    Header: 'Cost/unit',\n    accessor: 'cost',\n    sortDescFirst: true\n  }, {\n    Header: 'Subtotal',\n    accessor: 'subtotal',\n    sortDescFirst: true\n  }], []); //             <th></th>\n  //             <th>Variant</th>\n  //             <th>Current Quantity</th>\n  //             <th>Recent Purchases</th>\n  //             <th>Stock Level</th>\n  //             <th>Recent Order</th>\n  //             <th>Cost</th>\n  //             <th>Order Quantity</th>\n  //         </tr>\n  //     </thead>\n  //     <tbody>\n  //         {variantData.map((variant, index) => {\n  //                 return (\n  //                     <tr key={index}>\n  //                         <td>{variant.product}</td>\n  //                         <td>{variant.variant}</td>\n  //                         <td>{variant.quantity}</td>\n  //                         <td>{variant.purchases}</td>\n  //                         <td>{variant.stockLevel}</td>\n  //                         <td>{variant.recentOrder}</td>\n  //                         <td>{variant.cost}</td>\n  //                         <input type=\"text\" placeholder=\"0\"/>\n  //                     </tr>\n  //        \n\n  function addColumns(columns) {\n    const newColumns = columns;\n    newColumns.push({\n      Header: 'Variant',\n      accessor: 'variant',\n      sortDescFirst: true\n    }, {\n      Header: 'Cost',\n      accessor: 'cost',\n      sortDescFirst: true\n    });\n    return newColumns;\n  } //   const newColumns = useMemo(\n  //     () => [\n  //     {\n  //         Header: 'Product',\n  //         accessor: 'product', // Product ID\n  //         sortDescFirst: true\n  //         },\n  //       {\n  //         Header: 'Variant',\n  //         accessor: 'variant',\n  //         sortDescFirst: true\n  //       },\n  //       {\n  //         Header: 'Current Quantity',\n  //         accessor: 'quantity',\n  //         sortDescFirst: true,\n  //       },\n  //       {\n  //         Header: 'Recent Purchases',\n  //         accessor: 'purchases',\n  //         sortDescFirst: true,\n  //       },\n  //       {\n  //         Header: 'Stock Level',\n  //         accessor: 'stockLevel',\n  //         sortDescFirst: true,\n  //       },\n  //       {\n  //         Header: 'Recent Order',\n  //         accessor: 'recentOrder',\n  //         sortDescFirst: true,\n  //       },\n  //     ],\n  //     []\n  //   )\n\n\n  function getVendor() {\n    setLoading(true);\n    router.loadVendor(props.values.id).then(data => {\n      if (data) {\n        // console.log(data)\n        setData(data);\n        setLoading(false);\n      } else {\n        console.log(\"Error getting product data\");\n      }\n    });\n  }\n\n  useEffect(() => {\n    getVendor();\n  }, []);\n\n  function getVariants(e, hasVariants) {\n    router.loadVariants(e.target.value).then(data => {\n      console.log('result of getProduct');\n\n      if (data) {\n        //   console.log(res.data)\n        if (hasVariants) {\n          setVariantData(data);\n          setVariantSelectHidden(false);\n        } else {\n          setVariantSelected({\n            id: data[0].id,\n            title: data[0].text,\n            cost: data[0].cost\n          });\n          setQuantityHidden(false); //   console.log(res.data)\n        } //   setLoading(false)      \n\n      } else {\n        console.log(\"Error getting product data\");\n      }\n    });\n  }\n\n  function orderClicked() {\n    const phone = `${props.values.phone.slice(0, 3)}-${props.values.phone.slice(3, 6)}-${props.values.phone.slice(6)}`;\n\n    if (btnText === \"Order\") {\n      // Start Order - add products\n      setOrdering(true);\n      setBtnText(\"Next\");\n      setOrderItemsHidden(false);\n      setOrderState(\"Choose Products\");\n    } else if (btnText === \"Next\") {\n      // Going to next page of ordering after added products\n      setPercentage(.60);\n      setNextPage(true);\n      setOrderState(\"Choose Variants/Qty\"); // newColumns = addColumns(columns)\n\n      router.loadOrderProducts(dataToUpdate).then(data => {\n        console.log('result of getProduct');\n\n        if (data) {\n          console.log('yuheee');\n          console.log(data);\n          setVariantData(data);\n          setDataToUpdate([]);\n          setBtnText(\"Review\");\n        }\n      }); // setOrderOptionsHidden(false)\n      // setEditColor(\"#26B1FF\")\n      // setBtnText(\"Submit\")\n    } else if (btnText === \"Review\") {\n      console.log('Review');\n      setNextPage(false);\n      setReviewOrder(true);\n\n      if (comm_method === \"website\") {\n        setBtnText(\"Order on website\");\n      } else if (comm_method === \"call\") {\n        setBtnText(`Call: ${phone}`);\n      } else {\n        setBtnText(\"Submit\");\n      }\n\n      setOrderOptionsHidden(false);\n      setOrderState(\"Review Order\");\n    } else if (btnText === \"Order on website\") {\n      window.open(\"https://amazon.com\", '_blank'); // NEED TO CHANGE\n\n      setBtnText(\"Submit\");\n    } else if (btnText === `Call: ${phone}`) {\n      setBtnText(\"Submit\");\n      setOrderState(\"Calling\");\n    } else if (btnText === \"Submit\") {\n      // Submit - save order\n      console.log('sending message');\n      sendMessage();\n      setOrderState(null);\n    }\n  }\n\n  function backClicked() {\n    console.log(orderState);\n\n    if (orderState === \"Choose Products\") {\n      console.log('u know it dawg');\n      setOrdering(false);\n      setBtnText(\"Order\");\n      setOrderItemsHidden(true);\n      setOrderState(null);\n    } else if (orderState === \"Choose Variants/Qty\") {\n      setNextPage(false);\n      setOrderState(\"Choose Products\");\n      setBtnText(\"Next\"); // newColumns = addColumns(columns)\n      // router.loadOrderProducts(dataToUpdate).then(data => {\n      //       console.log('result of getProduct')\n      //       if (data) {\n      //         console.log('yuheee')\n      //         console.log(data)\n      //         setVariantData(data)\n      //         setDataToUpdate([])\n      //         setBtnText(\"Review\")\n      //       }\n      // })\n    } else if (orderState === \"Review Order\") {\n      setNextPage(true);\n      setReviewOrder(false);\n      setBtnText(\"Review\");\n      setOrderOptionsHidden(true);\n      setOrderState(\"Choose Variants/Qty\");\n    } else if (orderState === \"Calling\") {\n      console.log('we hee right?');\n      setBtnText(\"Call: \" + props.values.phone);\n      setOrderState(\"Review Order\");\n    }\n  }\n\n  function selectChanged(e) {\n    // Get the text and remove the stockLevel at the end\n    // console.log(text.slice(0,-1).join(\" \"))\n    // console.log(e.target.label)\n    // console.log(e.target.text)\n    if (e.target.id === \"productFilter\") {\n      const text = e.target[e.target.selectedIndex].label.split(\" \").slice(0, -1).join(\" \");\n      setProductSelected({\n        id: e.target.value,\n        title: text\n      }); // Check to see if has variants\n\n      var hasVariants = false;\n\n      if (e.target[e.target.selectedIndex].text != 1) {\n        hasVariants = true;\n      }\n\n      getVariants(e, hasVariants);\n    } else {\n      const text = e.target[e.target.selectedIndex].text;\n      setVariantSelected({\n        id: e.target.value.split(',')[0],\n        title: text,\n        cost: e.target.value.split(',')[1]\n      });\n      setQuantityHidden(false);\n    }\n  }\n\n  function sendMessage() {\n    if (comm_method === \"text\") {\n      router.sendText(props.values.contact_name, dataToUpdate, \"4848885912\").then(data => {\n        // NEED TO CHANGE\n        console.log(\"i dont think we're getting here\");\n        save();\n      });\n    } else if (comm_method === \"email\") {\n      router.sendEmail(props.values.contact_name, dataToUpdate, \"stepan.cannuscio@gmail.com\").then(data => {\n        // NEED TO CHANGE\n        save();\n      });\n    } else if (comm_method === \"website\" || comm_method === \"call\") {\n      save();\n    } else {\n      alert(\"No communication method for this vendor! Contact Step for help\");\n    }\n  }\n\n  function save() {\n    const order = {\n      vendor: props.data.row.values.id,\n      subtotal: 0,\n      status: \"submitted\"\n    };\n    const orderItems = [];\n    dataToUpdate.forEach(item => {\n      console.log(item.subtotal);\n\n      if (item.subtotal != 0) {\n        order.subtotal += item.subtotal;\n        orderItems.push({\n          variant: item.variantId,\n          subtotal: item.subtotal,\n          // this is the subtotal including multiple qtys\n          quantity: item.quantity\n        });\n      }\n    });\n\n    if (dataToUpdate.length > 0) {\n      router.saveOrder(order, orderItems, props.user.id).then(data => {\n        console.log(data);\n\n        if (data === \"Success\") {\n          props.toggle();\n        } else {\n          console.log('error saving');\n        }\n      });\n    }\n  }\n\n  function handleChange(e) {\n    setQuantity(e.target.value);\n    setAddBtnHidden(false);\n  }\n\n  function addVariant() {\n    const newData = {\n      productTitle: productSelected.title,\n      productId: productSelected.id,\n      variantTitle: variantSelected.title,\n      variantId: variantSelected.id,\n      cost: variantSelected.cost,\n      quantity: quantity,\n      subtotal: Math.round(variantSelected.cost * quantity * 100, 2) / 100\n    };\n    setDataToUpdate(oldArray => [...oldArray, newData]); // resetOrderItem()\n  }\n\n  function resetOrderItem() {\n    setProductSelected(\"\");\n    setVariantSelected(\"\");\n    setQuantity(0);\n    setProductSelectHidden(true);\n    setVariantSelectHidden(true);\n    setQuantityHidden(true);\n    setAddBtnHidden(true);\n    console.log(variantSelect.current.value);\n    variantSelect.current.value = \"none\";\n    productSelect.current.value = \"none\";\n    quantityInput.current.value = \"\";\n    quantityInput.current.placeholder = \"0\";\n  }\n\n  function rowSelected(data) {\n    // console.log(data)\n    // console.log(!data.isSelected)\n    if (!data.isSelected) {\n      // I don't know why but this is reversed when receiving the data\n      setDataToUpdate(oldArray => [...oldArray, data.values.id]);\n    } else {\n      var array = [...dataToUpdate]; // make a separate copy of the array\n\n      var index = array.indexOf(data.values.id);\n\n      if (index !== -1) {\n        array.splice(index, 1);\n        setDataToUpdate(array);\n      }\n    }\n  }\n\n  function remove(array, element) {\n    console.log(element);\n    console.log('we removing');\n    variantData.forEach((item, index) => {\n      if (item.variant_id === element.variant_id) {\n        var array = [...variantData]; // make a separate copy of the array\n\n        if (index !== -1) {\n          array.splice(index, 1);\n          console.log(array);\n          setVariantData(array);\n        } // console.log(dataToUpdate[index])\n\n      }\n    });\n\n    if (dataToUpdate.length > 0) {\n      dataToUpdate.forEach((item, index) => {\n        if (item.variantId === element.variant_id) {\n          var array = [...dataToUpdate]; // make a separate copy of the array\n\n          if (index !== -1) {\n            array.splice(index, 1);\n            setDataToUpdate(array);\n          } // console.log(dataToUpdate[index])\n\n        }\n      });\n    } // var copyArray = [...array]; // make a separate copy of the array\n    // var index = copyArray.indexOf(item.values)\n    // if (index !== -1) {\n    //     copyArray.splice(index, 1);\n    //     setVariantData(copyArray);\n    // }        \n\n  }\n\n  function addOrderItem(data, orderQuantity, index) {\n    // console.log(data)\n    console.log(variantsToUpdate);\n    console.log(data); // const newVariantData = data\n    // newVariantData.orderQuantity = orderQuantity\n    // if (index) {\n    //     variantData.forEach((item, newIndex) => {\n    //         if (newIndex === index) {\n    //             var array = [...variantData]; // make a separate copy of the array\n    //             if (index !== -1) {\n    //                 array.splice(index, 1);\n    //                 setVariantData(array);\n    //             } \n    //             setVariantData(oldArray => [...oldArray, newVariantData])   \n    //         }\n    //         // if (item.variantId === data.variant_id) {\n    //         //     // console.log(dataToUpdate[index])\n    //         // }\n    //     })\n    // }\n\n    const newData = {\n      productTitle: data.title,\n      productId: data.id,\n      variantTitle: data.variant,\n      variantId: data.variant_id,\n      cost: data.cost,\n      quantity: orderQuantity,\n      subtotal: Math.round(data.cost * orderQuantity * 100, 2) / 100\n    }; // console.log(Object.values(dataToUpdate))\n\n    if (variantsToUpdate.includes(data.variant_id)) {\n      console.log('yes');\n      dataToUpdate.forEach((item, index) => {\n        if (item.variantId === data.variant_id) {\n          var array = [...dataToUpdate]; // make a separate copy of the array\n\n          if (index !== -1) {\n            array.splice(index, 1);\n            setDataToUpdate(array);\n          }\n\n          setDataToUpdate(oldArray => [...oldArray, newData]); // console.log(dataToUpdate[index])\n        }\n      });\n    } else {\n      // console.log(variantsToUpdate)\n      console.log('no');\n      setVariantsToUpdate(oldArray => [...oldArray, data.variant_id]);\n      setDataToUpdate(oldArray => [...oldArray, newData]);\n    } // resetOrderItem()\n\n  }\n\n  const Filler = props => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"filler\",\n      style: {\n        width: `${props.percentage}`\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 16\n    }, this);\n  };\n\n  const ProgressBar = props => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(Filler, {\n        percentage: props.percentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 641,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 13\n    }, this);\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 648,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"top-content\",\n      children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n        percentage: percentage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 655,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"close\",\n        onClick: () => props.toggle(),\n        children: \"\\xD7    \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 656,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: data[0] ? data[0].name : \"Default\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Products: \", props.values.products]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 658,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Low Products: \", props.values.low_products]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 17\n      }, this), isOrdering ? /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: backClicked,\n        className: \"edit-btn\",\n        style: {\n          backgroundColor: \"grey\"\n        },\n        children: \"Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 31\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: orderClicked,\n        className: \"edit-btn\",\n        style: {\n          backgroundColor: editColor\n        },\n        children: btnText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 654,\n      columnNumber: 13\n    }, this), isOrdering ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        hidden: isOrderItemsHidden,\n        children: nextPage ? /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 688,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Variant\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 689,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Current Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 690,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Recent Purchases\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 691,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Stock Level\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 692,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Cost/unit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 693,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Order Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 694,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Remove\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 695,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 687,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 686,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: variantData.map((variant, index) => {\n              var orderQuantity = 0;\n              dataToUpdate.forEach(item => {\n                if (item.variantId === variant.variant_id) {\n                  console.log('ywehasflj');\n                  orderQuantity = item.quantity;\n                }\n              });\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: variant.title\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 711,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: variant.variant\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 712,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: variant.quantity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 713,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: variant.purchases\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 714,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: variant.stockLevel\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 715,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: variant.cost\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 716,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"input\", {\n                    type: \"text\",\n                    placeholder: \"0\",\n                    value: orderQuantity,\n                    onChange: e => {\n                      addOrderItem(variant, e.target.value, index);\n                    }\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 717,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 717,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"close\",\n                    style: {\n                      color: \"red\"\n                    },\n                    onClick: () => remove(variantData, variant),\n                    children: \"\\xD7\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 722,\n                    columnNumber: 45\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 722,\n                  columnNumber: 41\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 710,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 21\n        }, this) // <Table columns={ columns.concat(\n        // {\n        //     Header: 'Variant ID',\n        //     accessor: 'variant_id',\n        //     show: false\n        // },\n        // {\n        //     Header: 'Cost',\n        //     accessor: 'cost',\n        //     sortDescFirst: true\n        // },\n        // {\n        //     Header: 'Order Quantity',\n        //     accessor: 'orderQuantity',\n        // },\n        // {\n        //     Header: 'Remove',\n        //     accessor: 'remove',\n        // },\n        // )} data={variantData} search={false} type=\"order-variant\" popupEnabled={false} perPage={5} update={(data, orderQuantity) => addOrderItem(data, orderQuantity)} removeItem={(item) =>remove(variantData, item)}/>\n        // <table>\n        //     <thead>\n        //         <tr>\n        //             <th>Product</th>\n        //             <th>Variant</th>\n        //             <th>Current Quantity</th>\n        //             <th>Recent Purchases</th>\n        //             <th>Stock Level</th>\n        //             <th>Recent Order</th>\n        //             <th>Cost</th>\n        //             <th>Order Quantity</th>\n        //         </tr>\n        //     </thead>\n        //     <tbody>\n        //         {variantData.map((variant, index) => {\n        //                 return (\n        //                     <tr key={index}>\n        //                         <td>{variant.product}</td>\n        //                         <td>{variant.variant}</td>\n        //                         <td>{variant.quantity}</td>\n        //                         <td>{variant.purchases}</td>\n        //                         <td>{variant.stockLevel}</td>\n        //                         <td>{variant.recentOrder}</td>\n        //                         <td>{variant.cost}</td>\n        //                         <input type=\"text\" placeholder=\"0\"/>\n        //                     </tr>\n        //                 )\n        //         })}\n        //     </tbody>\n        // </table>\n        : reviewOrder ? /*#__PURE__*/_jsxDEV(\"table\", {\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Product\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 789,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Variant\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 790,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Quantity\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 791,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Cost/unit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 792,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Subtotal\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 793,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 788,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 787,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: dataToUpdate.map((order_item, index) => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: order_item.productTitle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 801,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: order_item.variantTitle\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 802,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: order_item.quantity\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 803,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [\"$\", order_item.cost]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 804,\n                  columnNumber: 41\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: [\"$\", order_item.subtotal]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 805,\n                  columnNumber: 41\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 800,\n                columnNumber: 37\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 796,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 786,\n          columnNumber: 21\n        }, this) : /*#__PURE__*/_jsxDEV(Table, {\n          columns: columns,\n          data: data,\n          search: false,\n          type: \"order\",\n          checkbox: true,\n          popupEnabled: false,\n          perPage: 5,\n          update: data => rowSelected(data)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 813,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(Table, {\n      columns: columns,\n      data: data,\n      type: \"order\",\n      search: false,\n      popupEnabled: false,\n      perPage: 5\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 899,\n      columnNumber: 13\n    }, this) // <table style={{textAlign: \"center\"}}>\n    //     <thead >\n    //         <tr>\n    //             <th className=\"table-header\">Product</th>\n    //             <th className=\"table-header\">Quantity</th>\n    //             <th className=\"table-header\">Purchases (last 30 days)</th>\n    //             <th className=\"table-header\">Stock Level</th>\n    //             <th className=\"table-header\">Last Order</th>\n    //         </tr>\n    //     </thead>\n    //     <tbody>\n    //     {data.map((item, index) => {\n    //         var recentOrder = \"\"\n    //         if (item.status && item.status.split(',')[0] === \"completed\") {\n    //             recentOrder = `${item.quantity_ordered.split(',')[0]} units received on ${new Date(item.completed_date.split(',')[0]).toDateString()}`\n    //         } else if (item.status && item.status.split(',')[0] === \"fulfilled\") {\n    //             recentOrder = `Fulfilled on ${new Date(item.fulfilled_date.split(',')[0]).toDateString()} - ${item.tracking.split(',')[0]}`\n    //         } else if (item.status && item.status.split(',')[0] === \"submitted\") {\n    //             recentOrder = `Submitted order for ${item.quantity_ordered.split(',')[0]} units on ${new Date(item.submitted_date.split(',')[0]).toDateString()}`\n    //         }\n    //         return (\n    //             <tr key={index}>\n    //                 <td className=\"table-cell\">{item.title}</td>\n    //                 <td className=\"table-cell\">{item.quantity}</td>\n    //                 <td className=\"table-cell\">{item.purchases}</td>\n    //                 <td className=\"table-cell\">{item.stockLevel}</td>\n    //                 <td className=\"table-cell\">{recentOrder}</td>\n    //             </tr>\n    //             ) \n    //         })\n    //     }\n    //     </tbody>\n    // </table>\n    ]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 652,\n    columnNumber: 9\n  }, this);\n}\n\n_s(VendorPopup, \"cW7abmQbXEL7Tm3VNe6qlh3nkCo=\");\n\n_c = VendorPopup;\n\nvar _c;\n\n$RefreshReg$(_c, \"VendorPopup\");","map":{"version":3,"sources":["/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/Vendors/VendorPopup.js"],"names":["useState","useEffect","useRef","useMemo","MessageOption","Table","router","VendorPopup","props","console","log","variantSelect","productSelect","quantityInput","percentage","setPercentage","btnText","setBtnText","isOrdering","setOrdering","isLoading","setLoading","editColor","setEditColor","isOrderItemsHidden","setOrderItemsHidden","isOrderOptionsHidden","setOrderOptionsHidden","dataToUpdate","setDataToUpdate","variantsToUpdate","setVariantsToUpdate","data","setData","variantData","setVariantData","isAddBtnHidden","setAddBtnHidden","isQuantityHidden","setQuantityHidden","quantity","setQuantity","isProductSelectHidden","setProductSelectHidden","isVariantSelectHidden","setVariantSelectHidden","productSelected","setProductSelected","title","id","variantSelected","setVariantSelected","cost","nextPage","setNextPage","reviewOrder","setReviewOrder","orderState","setOrderState","comm_method","row","values","orderItemsStyle","color","margin","padding","backgroundColor","textAlign","columns","Header","accessor","sortDescFirst","show","reviewColumns","addColumns","newColumns","push","getVendor","loadVendor","then","getVariants","e","hasVariants","loadVariants","target","value","text","orderClicked","phone","slice","loadOrderProducts","window","open","sendMessage","backClicked","selectChanged","selectedIndex","label","split","join","sendText","contact_name","save","sendEmail","alert","order","vendor","subtotal","status","orderItems","forEach","item","variant","variantId","length","saveOrder","user","toggle","handleChange","addVariant","newData","productTitle","productId","variantTitle","Math","round","oldArray","resetOrderItem","current","placeholder","rowSelected","isSelected","array","index","indexOf","splice","remove","element","variant_id","addOrderItem","orderQuantity","includes","Filler","width","ProgressBar","name","products","low_products","map","purchases","stockLevel","order_item"],"mappings":";;;;;AAAA,OAAO,qBAAP;AACA,SAAQA,QAAR,EAAkBC,SAAlB,EAA6BC,MAA7B,EAAqCC,OAArC,QAAmD,OAAnD;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAO,KAAKC,MAAZ,MAAwB,aAAxB;AAGA,eAAe,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AAEA,QAAMG,aAAa,GAAGT,MAAM,EAA5B;AACA,QAAMU,aAAa,GAAGV,MAAM,EAA5B;AACA,QAAMW,aAAa,GAAGX,MAAM,EAA5B;AAEA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,CAAD,CAA5C;AAEA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,OAAD,CAAtC;AACA,QAAM,CAACkB,UAAD,EAAaC,WAAb,IAA4BnB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACoB,SAAD,EAAYC,UAAZ,IAA0BrB,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAACsB,SAAD,EAAYC,YAAZ,IAA4BvB,QAAQ,CAAC,SAAD,CAA1C;AACA,QAAM,CAACwB,kBAAD,EAAqBC,mBAArB,IAA4CzB,QAAQ,CAAC,IAAD,CAA1D;AACA,QAAM,CAAC0B,oBAAD,EAAuBC,qBAAvB,IAAgD3B,QAAQ,CAAC,IAAD,CAA9D;AACA,QAAM,CAAC4B,YAAD,EAAeC,eAAf,IAAkC7B,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAAC8B,gBAAD,EAAmBC,mBAAnB,IAA0C/B,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACgC,IAAD,EAAOC,OAAP,IAAkBjC,QAAQ,CAAC,EAAD,CAAhC;AAEA,QAAM,CAACkC,WAAD,EAAcC,cAAd,IAAgCnC,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACoC,cAAD,EAAiBC,eAAjB,IAAoCrC,QAAQ,CAAC,IAAD,CAAlD;AACA,QAAM,CAACsC,gBAAD,EAAmBC,iBAAnB,IAAwCvC,QAAQ,CAAC,IAAD,CAAtD;AACA,QAAM,CAACwC,QAAD,EAAWC,WAAX,IAA0BzC,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAAC0C,qBAAD,EAAwBC,sBAAxB,IAAkD3C,QAAQ,CAAC,IAAD,CAAhE;AACA,QAAM,CAAC4C,qBAAD,EAAwBC,sBAAxB,IAAkD7C,QAAQ,CAAC,IAAD,CAAhE;AACA,QAAM,CAAC8C,eAAD,EAAkBC,kBAAlB,IAAwC/C,QAAQ,CAAC;AAACgD,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,EAAE,EAAE;AAAhB,GAAD,CAAtD;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCnD,QAAQ,CAAC;AAACgD,IAAAA,KAAK,EAAE,EAAR;AAAYC,IAAAA,EAAE,EAAE,EAAhB;AAAoBG,IAAAA,IAAI,EAAE;AAA1B,GAAD,CAAtD;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BtD,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACuD,WAAD,EAAcC,cAAd,IAAgCxD,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACyD,UAAD,EAAaC,aAAb,IAA8B1D,QAAQ,CAAC,IAAD,CAA5C;AACA,QAAM2D,WAAW,GAAGnD,KAAK,CAACwB,IAAN,CAAW4B,GAAX,CAAeC,MAAf,CAAsBF,WAA1C;AAEAlD,EAAAA,OAAO,CAACC,GAAR,CAAYkB,YAAZ;AACAnB,EAAAA,OAAO,CAACC,GAAR,CAAYwB,WAAZ;AACAzB,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EAlCuC,CAmCvC;;AAEA,QAAMsD,eAAe,GAAG;AACpBC,IAAAA,KAAK,EAAE,OADa;AAEpBC,IAAAA,MAAM,EAAE,QAFY;AAGpBC,IAAAA,OAAO,EAAE,WAHW;AAIpBC,IAAAA,eAAe,EAAE,SAJG;AAKpBC,IAAAA,SAAS,EAAE;AALS,GAAxB;AASA,QAAMC,OAAO,GAAGjE,OAAO,CACnB,MAAM,CACN;AACIkE,IAAAA,MAAM,EAAE,IADZ;AAEIC,IAAAA,QAAQ,EAAE,IAFd;AAEoB;AAChBC,IAAAA,aAAa,EAAE;AAHnB,GADM,EAMJ;AACEF,IAAAA,MAAM,EAAE,SADV;AAEEC,IAAAA,QAAQ,EAAE,OAFZ;AAGEC,IAAAA,aAAa,EAAE;AAHjB,GANI,EAWJ;AACEF,IAAAA,MAAM,EAAE,SADV;AAEEC,IAAAA,QAAQ,EAAE,SAFZ;AAGEC,IAAAA,aAAa,EAAE,IAHjB;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAXI,EAiBJ;AACEH,IAAAA,MAAM,EAAE,UADV;AAEEC,IAAAA,QAAQ,EAAE,UAFZ;AAGEC,IAAAA,aAAa,EAAE;AAHjB,GAjBI,EAsBJ;AACEF,IAAAA,MAAM,EAAE,kBADV;AAEEC,IAAAA,QAAQ,EAAE,WAFZ;AAGEC,IAAAA,aAAa,EAAE;AAHjB,GAtBI,EA2BJ;AACEF,IAAAA,MAAM,EAAE,aADV;AAEEC,IAAAA,QAAQ,EAAE,YAFZ;AAGEC,IAAAA,aAAa,EAAE;AAHjB,GA3BI,EAgCJ;AACEF,IAAAA,MAAM,EAAE,cADV;AAEEC,IAAAA,QAAQ,EAAE,aAFZ;AAGEC,IAAAA,aAAa,EAAE;AAHjB,GAhCI,CADa,EAuCnB,EAvCmB,CAAvB;AA2CE,QAAME,aAAa,GAAGtE,OAAO,CAC3B,MAAM,CAEJ;AACEkE,IAAAA,MAAM,EAAE,SADV;AAEEC,IAAAA,QAAQ,EAAE,OAFZ;AAGEC,IAAAA,aAAa,EAAE;AAHjB,GAFI,EAOJ;AACEF,IAAAA,MAAM,EAAE,SADV;AAEEC,IAAAA,QAAQ,EAAE,SAFZ;AAGEC,IAAAA,aAAa,EAAE,IAHjB;AAIEC,IAAAA,IAAI,EAAE;AAJR,GAPI,EAaJ;AACEH,IAAAA,MAAM,EAAE,YADV;AAEEC,IAAAA,QAAQ,EAAE,WAFZ;AAGEE,IAAAA,IAAI,EAAE;AAHR,GAbI,EAkBJ;AACEH,IAAAA,MAAM,EAAE,gBADV;AAEEC,IAAAA,QAAQ,EAAE,eAFZ;AAGEC,IAAAA,aAAa,EAAE;AAHjB,GAlBI,EAuBJ;AACEF,IAAAA,MAAM,EAAE,WADV;AAEEC,IAAAA,QAAQ,EAAE,MAFZ;AAGEC,IAAAA,aAAa,EAAE;AAHjB,GAvBI,EA4BJ;AACEF,IAAAA,MAAM,EAAE,UADV;AAEEC,IAAAA,QAAQ,EAAE,UAFZ;AAGEC,IAAAA,aAAa,EAAE;AAHjB,GA5BI,CADqB,EAmC3B,EAnC2B,CAA7B,CAzFqC,CAiIvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIhB,WAASG,UAAT,CAAoBN,OAApB,EAA6B;AAEzB,UAAMO,UAAU,GAAGP,OAAnB;AACAO,IAAAA,UAAU,CAACC,IAAX,CACI;AACIP,MAAAA,MAAM,EAAE,SADZ;AAEIC,MAAAA,QAAQ,EAAE,SAFd;AAGIC,MAAAA,aAAa,EAAE;AAHnB,KADJ,EAMI;AACIF,MAAAA,MAAM,EAAE,MADZ;AAEIC,MAAAA,QAAQ,EAAE,MAFd;AAGIC,MAAAA,aAAa,EAAE;AAHnB,KANJ;AAYA,WAAOI,UAAP;AAEH,GA9KsC,CAmLvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAQA,WAASE,SAAT,GAAqB;AACjBxD,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAf,IAAAA,MAAM,CAACwE,UAAP,CAAkBtE,KAAK,CAACqD,MAAN,CAAaZ,EAA/B,EAAmC8B,IAAnC,CAAwC/C,IAAI,IAAI;AAC5C,UAAIA,IAAJ,EAAU;AACN;AACAC,QAAAA,OAAO,CAACD,IAAD,CAAP;AACAX,QAAAA,UAAU,CAAC,KAAD,CAAV;AACH,OAJD,MAIO;AACHZ,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH;AACJ,KARD;AASD;;AAEDT,EAAAA,SAAS,CAAC,MAAM;AACd4E,IAAAA,SAAS;AACZ,GAFU,EAER,EAFQ,CAAT;;AAIF,WAASG,WAAT,CAAqBC,CAArB,EAAwBC,WAAxB,EAAqC;AACjC5E,IAAAA,MAAM,CAAC6E,YAAP,CAAoBF,CAAC,CAACG,MAAF,CAASC,KAA7B,EAAoCN,IAApC,CAAyC/C,IAAI,IAAI;AAC/CvB,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AACA,UAAIsB,IAAJ,EAAU;AACR;AAEE,YAAIkD,WAAJ,EAAiB;AACf/C,UAAAA,cAAc,CAACH,IAAD,CAAd;AACAa,UAAAA,sBAAsB,CAAC,KAAD,CAAtB;AACD,SAHD,MAGO;AACLM,UAAAA,kBAAkB,CAAC;AACfF,YAAAA,EAAE,EAAEjB,IAAI,CAAC,CAAD,CAAJ,CAAQiB,EADG;AAEfD,YAAAA,KAAK,EAAEhB,IAAI,CAAC,CAAD,CAAJ,CAAQsD,IAFA;AAGflC,YAAAA,IAAI,EAAEpB,IAAI,CAAC,CAAD,CAAJ,CAAQoB;AAHC,WAAD,CAAlB;AAKAb,UAAAA,iBAAiB,CAAC,KAAD,CAAjB,CANK,CAOL;AACD,SAdK,CAgBR;;AACD,OAjBD,MAiBO;AACH9B,QAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACH;AACJ,KAtBC;AAuBH;;AAED,WAAS6E,YAAT,GAAwB;AACpB,UAAMC,KAAK,GAAI,GAAEhF,KAAK,CAACqD,MAAN,CAAa2B,KAAb,CAAmBC,KAAnB,CAAyB,CAAzB,EAA2B,CAA3B,CAA8B,IAAGjF,KAAK,CAACqD,MAAN,CAAa2B,KAAb,CAAmBC,KAAnB,CAAyB,CAAzB,EAA2B,CAA3B,CAA8B,IAAGjF,KAAK,CAACqD,MAAN,CAAa2B,KAAb,CAAmBC,KAAnB,CAAyB,CAAzB,CAA6B,EAAhH;;AACA,QAAIzE,OAAO,KAAK,OAAhB,EAAyB;AACrB;AACAG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,UAAU,CAAC,MAAD,CAAV;AACAQ,MAAAA,mBAAmB,CAAC,KAAD,CAAnB;AACAiC,MAAAA,aAAa,CAAC,iBAAD,CAAb;AAEH,KAPD,MAOO,IAAI1C,OAAO,KAAK,MAAhB,EAAwB;AAC3B;AACAD,MAAAA,aAAa,CAAC,GAAD,CAAb;AAEAuC,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAI,MAAAA,aAAa,CAAC,qBAAD,CAAb,CAL2B,CAM3B;;AAEApD,MAAAA,MAAM,CAACoF,iBAAP,CAAyB9D,YAAzB,EAAuCmD,IAAvC,CAA4C/C,IAAI,IAAI;AAC9CvB,QAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AACA,YAAIsB,IAAJ,EAAU;AACRvB,UAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACAD,UAAAA,OAAO,CAACC,GAAR,CAAYsB,IAAZ;AACAG,UAAAA,cAAc,CAACH,IAAD,CAAd;AACAH,UAAAA,eAAe,CAAC,EAAD,CAAf;AACAZ,UAAAA,UAAU,CAAC,QAAD,CAAV;AACD;AACN,OATD,EAR2B,CAmB3B;AACA;AACA;AACH,KAtBM,MAsBA,IAAID,OAAO,KAAK,QAAhB,EAA0B;AAC7BP,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA4C,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAE,MAAAA,cAAc,CAAC,IAAD,CAAd;;AAEA,UAAIG,WAAW,KAAK,SAApB,EAA+B;AAE3B1C,QAAAA,UAAU,CAAC,kBAAD,CAAV;AACH,OAHD,MAGO,IAAI0C,WAAW,KAAK,MAApB,EAA4B;AAC/B1C,QAAAA,UAAU,CAAE,SAAQuE,KAAM,EAAhB,CAAV;AAEH,OAHM,MAGA;AAEHvE,QAAAA,UAAU,CAAC,QAAD,CAAV;AACH;;AACDU,MAAAA,qBAAqB,CAAC,KAAD,CAArB;AACA+B,MAAAA,aAAa,CAAC,cAAD,CAAb;AAGH,KAnBM,MAmBA,IAAI1C,OAAO,KAAK,kBAAhB,EAAoC;AACxC2E,MAAAA,MAAM,CAACC,IAAP,CAAY,oBAAZ,EAAiC,QAAjC,EADwC,CACG;;AAC3C3E,MAAAA,UAAU,CAAC,QAAD,CAAV;AACF,KAHM,MAGA,IAAID,OAAO,KAAM,SAAQwE,KAAM,EAA/B,EAAkC;AACrCvE,MAAAA,UAAU,CAAC,QAAD,CAAV;AACAyC,MAAAA,aAAa,CAAC,SAAD,CAAb;AACH,KAHM,MAGC,IAAI1C,OAAO,KAAK,QAAhB,EAA0B;AAC9B;AACAP,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAmF,MAAAA,WAAW;AACXnC,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH;AACJ;;AAED,WAASoC,WAAT,GAAuB;AACnBrF,IAAAA,OAAO,CAACC,GAAR,CAAY+C,UAAZ;;AACA,QAAIA,UAAU,KAAK,iBAAnB,EAAsC;AAClChD,MAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACAS,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,MAAAA,UAAU,CAAC,OAAD,CAAV;AACAQ,MAAAA,mBAAmB,CAAC,IAAD,CAAnB;AACAiC,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH,KAND,MAMO,IAAID,UAAU,KAAK,qBAAnB,EAA0C;AAC7CH,MAAAA,WAAW,CAAC,KAAD,CAAX;AACAI,MAAAA,aAAa,CAAC,iBAAD,CAAb;AACAzC,MAAAA,UAAU,CAAC,MAAD,CAAV,CAH6C,CAI7C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,KAhBM,MAgBA,IAAIwC,UAAU,KAAK,cAAnB,EAAmC;AACtCH,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,cAAc,CAAC,KAAD,CAAd;AACAvC,MAAAA,UAAU,CAAC,QAAD,CAAV;AACAU,MAAAA,qBAAqB,CAAC,IAAD,CAArB;AACA+B,MAAAA,aAAa,CAAC,qBAAD,CAAb;AACH,KANM,MAMA,IAAID,UAAU,KAAK,SAAnB,EAA8B;AACjChD,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACAO,MAAAA,UAAU,CAAC,WAAWT,KAAK,CAACqD,MAAN,CAAa2B,KAAzB,CAAV;AACA9B,MAAAA,aAAa,CAAC,cAAD,CAAb;AACH;AAEJ;;AAED,WAASqC,aAAT,CAAuBd,CAAvB,EAA0B;AAEtB;AAEA;AACA;AACA;AACA,QAAIA,CAAC,CAACG,MAAF,CAASnC,EAAT,KAAgB,eAApB,EAAqC;AAEjC,YAAMqC,IAAI,GAAGL,CAAC,CAACG,MAAF,CAASH,CAAC,CAACG,MAAF,CAASY,aAAlB,EAAiCC,KAAjC,CAAuCC,KAAvC,CAA6C,GAA7C,EAAkDT,KAAlD,CAAwD,CAAxD,EAA0D,CAAC,CAA3D,EAA8DU,IAA9D,CAAmE,GAAnE,CAAb;AAEApD,MAAAA,kBAAkB,CAAC;AACfE,QAAAA,EAAE,EAAEgC,CAAC,CAACG,MAAF,CAASC,KADE;AAEfrC,QAAAA,KAAK,EAAEsC;AAFQ,OAAD,CAAlB,CAJiC,CAQjC;;AACA,UAAIJ,WAAW,GAAG,KAAlB;;AACA,UAAID,CAAC,CAACG,MAAF,CAASH,CAAC,CAACG,MAAF,CAASY,aAAlB,EAAiCV,IAAjC,IAAyC,CAA7C,EAAgD;AAC5CJ,QAAAA,WAAW,GAAG,IAAd;AACH;;AAEDF,MAAAA,WAAW,CAACC,CAAD,EAAIC,WAAJ,CAAX;AAIH,KAlBD,MAkBO;AAEH,YAAMI,IAAI,GAAGL,CAAC,CAACG,MAAF,CAASH,CAAC,CAACG,MAAF,CAASY,aAAlB,EAAiCV,IAA9C;AACAnC,MAAAA,kBAAkB,CAAC;AACfF,QAAAA,EAAE,EAAEgC,CAAC,CAACG,MAAF,CAASC,KAAT,CAAea,KAAf,CAAqB,GAArB,EAA0B,CAA1B,CADW;AAEflD,QAAAA,KAAK,EAAEsC,IAFQ;AAGflC,QAAAA,IAAI,EAAE6B,CAAC,CAACG,MAAF,CAASC,KAAT,CAAea,KAAf,CAAqB,GAArB,EAA0B,CAA1B;AAHS,OAAD,CAAlB;AAKA3D,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACH;AACJ;;AAED,WAASsD,WAAT,GAAuB;AAEnB,QAAIlC,WAAW,KAAK,MAApB,EAA4B;AACxBrD,MAAAA,MAAM,CAAC8F,QAAP,CAAgB5F,KAAK,CAACqD,MAAN,CAAawC,YAA7B,EAA2CzE,YAA3C,EAAyD,YAAzD,EAAuEmD,IAAvE,CAA4E/C,IAAI,IAAI;AAAE;AAClFvB,QAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ;AACA4F,QAAAA,IAAI;AACP,OAHD;AAIH,KALD,MAMK,IAAI3C,WAAW,KAAK,OAApB,EAA6B;AAC9BrD,MAAAA,MAAM,CAACiG,SAAP,CAAiB/F,KAAK,CAACqD,MAAN,CAAawC,YAA9B,EAA4CzE,YAA5C,EAA0D,4BAA1D,EAAwFmD,IAAxF,CAA6F/C,IAAI,IAAI;AAAE;AACnGsE,QAAAA,IAAI;AACP,OAFD;AAGH,KAJI,MAIE,IAAI3C,WAAW,KAAK,SAAhB,IAA6BA,WAAW,KAAK,MAAjD,EAAyD;AAC5D2C,MAAAA,IAAI;AACP,KAFM,MAEA;AACHE,MAAAA,KAAK,CAAC,gEAAD,CAAL;AACH;AACJ;;AAED,WAASF,IAAT,GAAgB;AAEZ,UAAMG,KAAK,GAAG;AACVC,MAAAA,MAAM,EAAElG,KAAK,CAACwB,IAAN,CAAW4B,GAAX,CAAeC,MAAf,CAAsBZ,EADpB;AAEV0D,MAAAA,QAAQ,EAAE,CAFA;AAGVC,MAAAA,MAAM,EAAE;AAHE,KAAd;AAMA,UAAMC,UAAU,GAAG,EAAnB;AACAjF,IAAAA,YAAY,CAACkF,OAAb,CAAqBC,IAAI,IAAI;AACzBtG,MAAAA,OAAO,CAACC,GAAR,CAAYqG,IAAI,CAACJ,QAAjB;;AACA,UAAII,IAAI,CAACJ,QAAL,IAAiB,CAArB,EAAwB;AAEpBF,QAAAA,KAAK,CAACE,QAAN,IAAkBI,IAAI,CAACJ,QAAvB;AACAE,QAAAA,UAAU,CAACjC,IAAX,CAAgB;AACZoC,UAAAA,OAAO,EAAED,IAAI,CAACE,SADF;AAEZN,UAAAA,QAAQ,EAAEI,IAAI,CAACJ,QAFH;AAEa;AACzBnE,UAAAA,QAAQ,EAAEuE,IAAI,CAACvE;AAHH,SAAhB;AAKH;AAEJ,KAZD;;AAcA,QAAIZ,YAAY,CAACsF,MAAb,GAAsB,CAA1B,EAA6B;AACzB5G,MAAAA,MAAM,CAAC6G,SAAP,CAAiBV,KAAjB,EAAwBI,UAAxB,EAAoCrG,KAAK,CAAC4G,IAAN,CAAWnE,EAA/C,EAAmD8B,IAAnD,CAAwD/C,IAAI,IAAI;AAC5DvB,QAAAA,OAAO,CAACC,GAAR,CAAYsB,IAAZ;;AACJ,YAAIA,IAAI,KAAK,SAAb,EAAwB;AACpBxB,UAAAA,KAAK,CAAC6G,MAAN;AACH,SAFD,MAEO;AACH5G,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;AACH,OAPE;AAQH;AACJ;;AAGD,WAAS4G,YAAT,CAAsBrC,CAAtB,EAAyB;AACrBxC,IAAAA,WAAW,CAACwC,CAAC,CAACG,MAAF,CAASC,KAAV,CAAX;AACAhD,IAAAA,eAAe,CAAC,KAAD,CAAf;AACH;;AAED,WAASkF,UAAT,GAAsB;AAClB,UAAMC,OAAO,GAAG;AACZC,MAAAA,YAAY,EAAE3E,eAAe,CAACE,KADlB;AAEZ0E,MAAAA,SAAS,EAAE5E,eAAe,CAACG,EAFf;AAGZ0E,MAAAA,YAAY,EAAEzE,eAAe,CAACF,KAHlB;AAIZiE,MAAAA,SAAS,EAAE/D,eAAe,CAACD,EAJf;AAKZG,MAAAA,IAAI,EAAEF,eAAe,CAACE,IALV;AAMZZ,MAAAA,QAAQ,EAAEA,QANE;AAOZmE,MAAAA,QAAQ,EAAEiB,IAAI,CAACC,KAAL,CAAW3E,eAAe,CAACE,IAAhB,GAAuBZ,QAAvB,GAAkC,GAA7C,EAAkD,CAAlD,IAAuD;AAPrD,KAAhB;AASAX,IAAAA,eAAe,CAACiG,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAcN,OAAd,CAAb,CAAf,CAVkB,CAYlB;AACH;;AAED,WAASO,cAAT,GAA0B;AACtBhF,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAI,IAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAV,IAAAA,WAAW,CAAC,CAAD,CAAX;AACAE,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACAE,IAAAA,sBAAsB,CAAC,IAAD,CAAtB;AACAN,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACAF,IAAAA,eAAe,CAAC,IAAD,CAAf;AACA5B,IAAAA,OAAO,CAACC,GAAR,CAAYC,aAAa,CAACqH,OAAd,CAAsB3C,KAAlC;AACA1E,IAAAA,aAAa,CAACqH,OAAd,CAAsB3C,KAAtB,GAA8B,MAA9B;AACAzE,IAAAA,aAAa,CAACoH,OAAd,CAAsB3C,KAAtB,GAA8B,MAA9B;AACAxE,IAAAA,aAAa,CAACmH,OAAd,CAAsB3C,KAAtB,GAA8B,EAA9B;AACAxE,IAAAA,aAAa,CAACmH,OAAd,CAAsBC,WAAtB,GAAoC,GAApC;AACH;;AAED,WAASC,WAAT,CAAqBlG,IAArB,EAA2B;AACvB;AACA;AACA,QAAI,CAACA,IAAI,CAACmG,UAAV,EAAsB;AAAE;AACpBtG,MAAAA,eAAe,CAACiG,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAc9F,IAAI,CAAC6B,MAAL,CAAYZ,EAA1B,CAAb,CAAf;AACH,KAFD,MAEO;AACH,UAAImF,KAAK,GAAG,CAAC,GAAGxG,YAAJ,CAAZ,CADG,CAC4B;;AAC/B,UAAIyG,KAAK,GAAGD,KAAK,CAACE,OAAN,CAActG,IAAI,CAAC6B,MAAL,CAAYZ,EAA1B,CAAZ;;AACA,UAAIoF,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdD,QAAAA,KAAK,CAACG,MAAN,CAAaF,KAAb,EAAoB,CAApB;AACAxG,QAAAA,eAAe,CAACuG,KAAD,CAAf;AACH;AACP;AACD;;AAED,WAASI,MAAT,CAAgBJ,KAAhB,EAAuBK,OAAvB,EAAgC;AAC5BhI,IAAAA,OAAO,CAACC,GAAR,CAAY+H,OAAZ;AACAhI,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AAEAwB,IAAAA,WAAW,CAAC4E,OAAZ,CAAoB,CAACC,IAAD,EAAOsB,KAAP,KAAiB;AAEjC,UAAItB,IAAI,CAAC2B,UAAL,KAAoBD,OAAO,CAACC,UAAhC,EAA4C;AACxC,YAAIN,KAAK,GAAG,CAAC,GAAGlG,WAAJ,CAAZ,CADwC,CACV;;AAC9B,YAAImG,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdD,UAAAA,KAAK,CAACG,MAAN,CAAaF,KAAb,EAAoB,CAApB;AACA5H,UAAAA,OAAO,CAACC,GAAR,CAAY0H,KAAZ;AACAjG,UAAAA,cAAc,CAACiG,KAAD,CAAd;AACH,SANuC,CAQxC;;AAEH;AACJ,KAbD;;AAeA,QAAIxG,YAAY,CAACsF,MAAb,GAAsB,CAA1B,EAA6B;AACzBtF,MAAAA,YAAY,CAACkF,OAAb,CAAqB,CAACC,IAAD,EAAOsB,KAAP,KAAiB;AAElC,YAAItB,IAAI,CAACE,SAAL,KAAmBwB,OAAO,CAACC,UAA/B,EAA2C;AACvC,cAAIN,KAAK,GAAG,CAAC,GAAGxG,YAAJ,CAAZ,CADuC,CACR;;AAC/B,cAAIyG,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdD,YAAAA,KAAK,CAACG,MAAN,CAAaF,KAAb,EAAoB,CAApB;AACAxG,YAAAA,eAAe,CAACuG,KAAD,CAAf;AACH,WALsC,CAOvC;;AAEH;AACJ,OAZD;AAaH,KAjC2B,CAkC5B;AAGA;AACA;AACA;AACA;AACA;;AACH;;AAED,WAASO,YAAT,CAAsB3G,IAAtB,EAA4B4G,aAA5B,EAA2CP,KAA3C,EAAkD;AAC9C;AACA5H,IAAAA,OAAO,CAACC,GAAR,CAAYoB,gBAAZ;AACArB,IAAAA,OAAO,CAACC,GAAR,CAAYsB,IAAZ,EAH8C,CAK9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;;AAEA,UAAMwF,OAAO,GAAG;AACZC,MAAAA,YAAY,EAAEzF,IAAI,CAACgB,KADP;AAEZ0E,MAAAA,SAAS,EAAE1F,IAAI,CAACiB,EAFJ;AAGZ0E,MAAAA,YAAY,EAAE3F,IAAI,CAACgF,OAHP;AAIZC,MAAAA,SAAS,EAAEjF,IAAI,CAAC0G,UAJJ;AAKZtF,MAAAA,IAAI,EAAEpB,IAAI,CAACoB,IALC;AAMZZ,MAAAA,QAAQ,EAAEoG,aANE;AAOZjC,MAAAA,QAAQ,EAAEiB,IAAI,CAACC,KAAL,CAAW7F,IAAI,CAACoB,IAAL,GAAYwF,aAAZ,GAA4B,GAAvC,EAA4C,CAA5C,IAAiD;AAP/C,KAAhB,CA1B8C,CAoC9C;;AAEA,QAAI9G,gBAAgB,CAAC+G,QAAjB,CAA0B7G,IAAI,CAAC0G,UAA/B,CAAJ,EAAgD;AAC5CjI,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ;AAGAkB,MAAAA,YAAY,CAACkF,OAAb,CAAqB,CAACC,IAAD,EAAOsB,KAAP,KAAiB;AAElC,YAAItB,IAAI,CAACE,SAAL,KAAmBjF,IAAI,CAAC0G,UAA5B,EAAwC;AACpC,cAAIN,KAAK,GAAG,CAAC,GAAGxG,YAAJ,CAAZ,CADoC,CACL;;AAC/B,cAAIyG,KAAK,KAAK,CAAC,CAAf,EAAkB;AACdD,YAAAA,KAAK,CAACG,MAAN,CAAaF,KAAb,EAAoB,CAApB;AACAxG,YAAAA,eAAe,CAACuG,KAAD,CAAf;AACH;;AACDvG,UAAAA,eAAe,CAACiG,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAcN,OAAd,CAAb,CAAf,CANoC,CAOpC;AAEH;AACJ,OAZD;AAaH,KAjBD,MAiBO;AACH;AACA/G,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ;AACAqB,MAAAA,mBAAmB,CAAC+F,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAc9F,IAAI,CAAC0G,UAAnB,CAAb,CAAnB;AAEA7G,MAAAA,eAAe,CAACiG,QAAQ,IAAI,CAAC,GAAGA,QAAJ,EAAcN,OAAd,CAAb,CAAf;AAEH,KA9D6C,CAuE9C;;AACH;;AAED,QAAMsB,MAAM,GAAItI,KAAD,IAAW;AACtB,wBAAO;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,KAAK,EAAE;AAACuI,QAAAA,KAAK,EAAG,GAAEvI,KAAK,CAACM,UAAW;AAA5B;AAA/B;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD;;AAIA,QAAMkI,WAAW,GAAIxI,KAAD,IAAW;AAC3B,wBACI;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA,6BACI,QAAC,MAAD;AAAQ,QAAA,UAAU,EAAEA,KAAK,CAACM;AAA1B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH,GAND;;AASA,MAAIM,SAAJ,EAAe;AACX,wBAAO;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,sBACI;AAAA,4BAEI;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACA,QAAC,WAAD;AAAa,QAAA,UAAU,EAAEN;AAAzB;AAAA;AAAA;AAAA;AAAA,cADA,eAEI;AAAM,QAAA,SAAS,EAAC,OAAhB;AAAwB,QAAA,OAAO,EAAE,MAAON,KAAK,CAAC6G,MAAN,EAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBAAMrF,IAAI,CAAC,CAAD,CAAJ,GAAUA,IAAI,CAAC,CAAD,CAAJ,CAAQiH,IAAlB,GAAyB;AAA/B;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA,iCAAczI,KAAK,CAACqD,MAAN,CAAaqF,QAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA,qCAAkB1I,KAAK,CAACqD,MAAN,CAAasF,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,EAMKjI,UAAU,gBAAG;AAAQ,QAAA,OAAO,EAAE4E,WAAjB;AAA8B,QAAA,SAAS,EAAC,UAAxC;AAAmD,QAAA,KAAK,EAAE;AAAC5B,UAAAA,eAAe,EAAE;AAAlB,SAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAH,GAAwG,IANvH,eAOI;AAAQ,QAAA,OAAO,EAAEqB,YAAjB;AAA+B,QAAA,SAAS,EAAC,UAAzC;AAAoD,QAAA,KAAK,EAAE;AAACrB,UAAAA,eAAe,EAAE5C;AAAlB,SAA3D;AAAA,kBAA0FN;AAA1F;AAAA;AAAA;AAAA;AAAA,cAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAcKE,UAAU,gBAGX;AAAA,6BACI;AAAK,QAAA,MAAM,EAAEM,kBAAb;AAAA,kBAaK6B,QAAQ,gBAET;AAAA,kCACA;AAAA,mCACI;AAAA,sCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALJ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAPJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADA,eAaA;AAAA,sBACKnB,WAAW,CAACkH,GAAZ,CAAgB,CAACpC,OAAD,EAAUqB,KAAV,KAAoB;AAEjC,kBAAIO,aAAa,GAAG,CAApB;AACAhH,cAAAA,YAAY,CAACkF,OAAb,CAAqBC,IAAI,IAAI;AACzB,oBAAIA,IAAI,CAACE,SAAL,KAAmBD,OAAO,CAAC0B,UAA/B,EAA2C;AACvCjI,kBAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ;AACAkI,kBAAAA,aAAa,GAAG7B,IAAI,CAACvE,QAArB;AACH;AACJ,eALD;AAOI,kCACI;AAAA,wCACI;AAAA,4BAAKwE,OAAO,CAAChE;AAAb;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI;AAAA,4BAAKgE,OAAO,CAACA;AAAb;AAAA;AAAA;AAAA;AAAA,wBAFJ,eAGI;AAAA,4BAAKA,OAAO,CAACxE;AAAb;AAAA;AAAA;AAAA;AAAA,wBAHJ,eAII;AAAA,4BAAKwE,OAAO,CAACqC;AAAb;AAAA;AAAA;AAAA;AAAA,wBAJJ,eAKI;AAAA,4BAAKrC,OAAO,CAACsC;AAAb;AAAA;AAAA;AAAA;AAAA,wBALJ,eAMI;AAAA,4BAAKtC,OAAO,CAAC5D;AAAb;AAAA;AAAA;AAAA;AAAA,wBANJ,eAOI;AAAA,yCAAI;AAAO,oBAAA,IAAI,EAAC,MAAZ;AAAmB,oBAAA,WAAW,EAAC,GAA/B;AAAmC,oBAAA,KAAK,EAAEwF,aAA1C;AAAyD,oBAAA,QAAQ,EAAG3D,CAAD,IAAO;AAC1E0D,sBAAAA,YAAY,CAAC3B,OAAD,EAAU/B,CAAC,CAACG,MAAF,CAASC,KAAnB,EAA0BgD,KAA1B,CAAZ;AAGH;AAJG;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,wBAPJ,eAYI;AAAA,yCAAI;AAAM,oBAAA,SAAS,EAAC,OAAhB;AAAwB,oBAAA,KAAK,EAAE;AAACtE,sBAAAA,KAAK,EAAE;AAAR,qBAA/B;AAA+C,oBAAA,OAAO,EAAE,MAAOyE,MAAM,CAACtG,WAAD,EAAc8E,OAAd,CAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,wBAZJ;AAAA,iBAASqB,KAAT;AAAA;AAAA;AAAA;AAAA,sBADJ;AAiBP,aA3BA;AADL;AAAA;AAAA;AAAA;AAAA,kBAbA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFS,CA8CT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAlGS,UAqGT9E,WAAW,gBAEX;AAAA,kCACA;AAAA,mCACI;AAAA,sCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADA,eAUA;AAAA,sBACK3B,YAAY,CAACwH,GAAb,CAAiB,CAACG,UAAD,EAAalB,KAAb,KAAuB;AAEjC,kCACI;AAAA,wCACI;AAAA,4BAAKkB,UAAU,CAAC9B;AAAhB;AAAA;AAAA;AAAA;AAAA,wBADJ,eAEI;AAAA,4BAAK8B,UAAU,CAAC5B;AAAhB;AAAA;AAAA;AAAA;AAAA,wBAFJ,eAGI;AAAA,4BAAK4B,UAAU,CAAC/G;AAAhB;AAAA;AAAA;AAAA;AAAA,wBAHJ,eAII;AAAA,kCAAM+G,UAAU,CAACnG,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,wBAJJ,eAKI;AAAA,kCAAMmG,UAAU,CAAC5C,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA,wBALJ;AAAA,iBAAS0B,KAAT;AAAA;AAAA;AAAA;AAAA,sBADJ;AAUP,aAZA;AADL;AAAA;AAAA;AAAA;AAAA,kBAVA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFW,gBA6BX,QAAC,KAAD;AAAO,UAAA,OAAO,EAAEjE,OAAhB;AAAyB,UAAA,IAAI,EAAEpC,IAA/B;AAAqC,UAAA,MAAM,EAAE,KAA7C;AAAoD,UAAA,IAAI,EAAC,OAAzD;AAAiE,UAAA,QAAQ,EAAE,IAA3E;AAAiF,UAAA,YAAY,EAAE,KAA/F;AAAsG,UAAA,OAAO,EAAE,CAA/G;AAAkH,UAAA,MAAM,EAAGA,IAAD,IAAUkG,WAAW,CAAClG,IAAD;AAA/I;AAAA;AAAA;AAAA;AAAA;AA/IJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAHW,gBAyOX,QAAC,KAAD;AAAO,MAAA,OAAO,EAAEoC,OAAhB;AAAyB,MAAA,IAAI,EAAEpC,IAA/B;AAAqC,MAAA,IAAI,EAAC,OAA1C;AAAkD,MAAA,MAAM,EAAE,KAA1D;AAAiE,MAAA,YAAY,EAAE,KAA/E;AAAsF,MAAA,OAAO,EAAE;AAA/F;AAAA;AAAA;AAAA;AAAA,YAvPJ,CAyPI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA5RJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiSH;;GAp6BuBzB,W;;KAAAA,W","sourcesContent":["import \"../styles/Popup.css\"\nimport {useState, useEffect, useRef, useMemo} from \"react\"\nimport MessageOption from \"./MessageOption\"\nimport Table from \"../components/Table\"\nimport * as router from \"./vendorAPI\"\n\n\nexport default function VendorPopup(props) {\n    console.log(props)\n\n    const variantSelect = useRef()\n    const productSelect = useRef()\n    const quantityInput = useRef()\n\n    const [percentage, setPercentage] = useState(0)\n\n    const [btnText, setBtnText] = useState(\"Order\")\n    const [isOrdering, setOrdering] = useState(false)\n    const [isLoading, setLoading] = useState(true)\n    const [editColor, setEditColor] = useState(\"#76c32d\")\n    const [isOrderItemsHidden, setOrderItemsHidden] = useState(true)\n    const [isOrderOptionsHidden, setOrderOptionsHidden] = useState(true)\n    const [dataToUpdate, setDataToUpdate] = useState([])\n    const [variantsToUpdate, setVariantsToUpdate] = useState([])\n    const [data, setData] = useState([])\n\n    const [variantData, setVariantData] = useState([])\n    const [isAddBtnHidden, setAddBtnHidden] = useState(true)\n    const [isQuantityHidden, setQuantityHidden] = useState(true)\n    const [quantity, setQuantity] = useState(0)\n    const [isProductSelectHidden, setProductSelectHidden] = useState(true)\n    const [isVariantSelectHidden, setVariantSelectHidden] = useState(true)\n    const [productSelected, setProductSelected] = useState({title: \"\", id: \"\"})\n    const [variantSelected, setVariantSelected] = useState({title: \"\", id: \"\", cost: 0})\n    const [nextPage, setNextPage] = useState(false)\n    const [reviewOrder, setReviewOrder] = useState(false)\n    const [orderState, setOrderState] = useState(null)\n    const comm_method = props.data.row.values.comm_method\n\n    console.log(dataToUpdate)\n    console.log(variantData)\n    console.log(props)\n    // console.log(data)\n\n    const orderItemsStyle = {\n        color: \"black\", \n        margin: \"20px 0\", \n        padding: \"10px 20px\", \n        backgroundColor: \"#efefef\", \n        textAlign: \"center\"\n    }\n\n\n    const columns = useMemo(\n        () => [\n        {\n            Header: 'ID',\n            accessor: 'id', // Product ID\n            sortDescFirst: true\n            },\n          {\n            Header: 'Product',\n            accessor: 'title',\n            sortDescFirst: true\n          },\n          {\n            Header: 'Variant',\n            accessor: 'variant',\n            sortDescFirst: true,\n            show: true\n          },\n          {\n            Header: 'Quantity',\n            accessor: 'quantity',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Recent Purchases',\n            accessor: 'purchases',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Stock Level',\n            accessor: 'stockLevel',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Recent Order',\n            accessor: 'recentOrder',\n            sortDescFirst: true,\n          },\n        ],\n        []\n      )\n\n\n      const reviewColumns = useMemo(\n        () => [\n\n          {\n            Header: 'Product',\n            accessor: 'title',\n            sortDescFirst: true\n          },\n          {\n            Header: 'Variant',\n            accessor: 'variant',\n            sortDescFirst: true,\n            show: true\n          },\n          {\n            Header: 'Variant ID',\n            accessor: 'variantId',\n            show: false\n          },\n          {\n            Header: 'Order Quantity',\n            accessor: 'orderQuantity',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Cost/unit',\n            accessor: 'cost',\n            sortDescFirst: true,\n          },\n          {\n            Header: 'Subtotal',\n            accessor: 'subtotal',\n            sortDescFirst: true,\n          },\n        ],\n        []\n      )\n\n\n      \n                    //             <th></th>\n                    //             <th>Variant</th>\n                    //             <th>Current Quantity</th>\n                    //             <th>Recent Purchases</th>\n                    //             <th>Stock Level</th>\n                    //             <th>Recent Order</th>\n                    //             <th>Cost</th>\n                    //             <th>Order Quantity</th>\n                    //         </tr>\n                    //     </thead>\n                    //     <tbody>\n                    //         {variantData.map((variant, index) => {\n                           \n                    //                 return (\n                    //                     <tr key={index}>\n                    //                         <td>{variant.product}</td>\n                    //                         <td>{variant.variant}</td>\n                    //                         <td>{variant.quantity}</td>\n                    //                         <td>{variant.purchases}</td>\n                    //                         <td>{variant.stockLevel}</td>\n                    //                         <td>{variant.recentOrder}</td>\n                    //                         <td>{variant.cost}</td>\n                    //                         <input type=\"text\" placeholder=\"0\"/>\n                    //                     </tr>\n                    //        \n                \n    \n\n    function addColumns(columns) {\n\n        const newColumns = columns\n        newColumns.push(\n            {\n                Header: 'Variant',\n                accessor: 'variant',\n                sortDescFirst: true \n            },\n            {\n                Header: 'Cost',\n                accessor: 'cost',\n                sortDescFirst: true\n            }\n        )\n        return newColumns\n        \n    }\n\n   \n\n    \n    //   const newColumns = useMemo(\n    //     () => [\n    //     {\n    //         Header: 'Product',\n    //         accessor: 'product', // Product ID\n    //         sortDescFirst: true\n    //         },\n    //       {\n    //         Header: 'Variant',\n    //         accessor: 'variant',\n    //         sortDescFirst: true\n    //       },\n    //       {\n    //         Header: 'Current Quantity',\n    //         accessor: 'quantity',\n    //         sortDescFirst: true,\n    //       },\n    //       {\n    //         Header: 'Recent Purchases',\n    //         accessor: 'purchases',\n    //         sortDescFirst: true,\n    //       },\n    //       {\n    //         Header: 'Stock Level',\n    //         accessor: 'stockLevel',\n    //         sortDescFirst: true,\n    //       },\n    //       {\n    //         Header: 'Recent Order',\n    //         accessor: 'recentOrder',\n    //         sortDescFirst: true,\n    //       },\n    //     ],\n    //     []\n    //   )\n\n      \n\n\n      \n\n\n    function getVendor() {\n        setLoading(true)\n        router.loadVendor(props.values.id).then(data => {\n            if (data) {\n                // console.log(data)\n                setData(data)\n                setLoading(false)\n            } else {\n                console.log(\"Error getting product data\")\n            }\n        });\n      }\n\n      useEffect(() => {\n        getVendor()\n    }, []);\n\n    function getVariants(e, hasVariants) {\n        router.loadVariants(e.target.value).then(data => {\n          console.log('result of getProduct')\n          if (data) {\n            //   console.log(res.data)\n\n              if (hasVariants) {\n                setVariantData(data)\n                setVariantSelectHidden(false)\n              } else {\n                setVariantSelected({\n                    id: data[0].id,\n                    title: data[0].text,\n                    cost: data[0].cost\n                })\n                setQuantityHidden(false)\n                //   console.log(res.data)\n              }\n              \n            //   setLoading(false)      \n          } else {\n              console.log(\"Error getting product data\")\n          }\n      });\n    }\n\n    function orderClicked() {\n        const phone = `${props.values.phone.slice(0,3)}-${props.values.phone.slice(3,6)}-${props.values.phone.slice(6,)}`\n        if (btnText === \"Order\") {\n            // Start Order - add products\n            setOrdering(true)\n            setBtnText(\"Next\")\n            setOrderItemsHidden(false)\n            setOrderState(\"Choose Products\")\n\n        } else if (btnText === \"Next\") {\n            // Going to next page of ordering after added products\n            setPercentage(.60)\n\n            setNextPage(true)\n            setOrderState(\"Choose Variants/Qty\")\n            // newColumns = addColumns(columns)\n\n            router.loadOrderProducts(dataToUpdate).then(data => {\n                  console.log('result of getProduct')\n                  if (data) {\n                    console.log('yuheee')\n                    console.log(data)\n                    setVariantData(data)\n                    setDataToUpdate([])\n                    setBtnText(\"Review\")\n                  }\n            })\n            \n            // setOrderOptionsHidden(false)\n            // setEditColor(\"#26B1FF\")\n            // setBtnText(\"Submit\")\n        } else if (btnText === \"Review\") {\n            console.log('Review')\n            setNextPage(false)\n            setReviewOrder(true)\n            \n            if (comm_method === \"website\") {\n                \n                setBtnText(\"Order on website\")\n            } else if (comm_method === \"call\") {\n                setBtnText(`Call: ${phone}`)\n                \n            } else {\n\n                setBtnText(\"Submit\")\n            }\n            setOrderOptionsHidden(false)\n            setOrderState(\"Review Order\")\n            \n\n        } else if (btnText === \"Order on website\") {\n           window.open(\"https://amazon.com\",'_blank') // NEED TO CHANGE\n           setBtnText(\"Submit\")\n        } else if (btnText === `Call: ${phone}`) {\n            setBtnText(\"Submit\")\n            setOrderState(\"Calling\")\n        }  else if (btnText === \"Submit\") {\n            // Submit - save order\n            console.log('sending message')\n            sendMessage()\n            setOrderState(null)\n        }\n    }\n    \n    function backClicked() {\n        console.log(orderState)\n        if (orderState === \"Choose Products\") {\n            console.log('u know it dawg')\n            setOrdering(false)\n            setBtnText(\"Order\")\n            setOrderItemsHidden(true)\n            setOrderState(null)\n        } else if (orderState === \"Choose Variants/Qty\") {\n            setNextPage(false)\n            setOrderState(\"Choose Products\")\n            setBtnText(\"Next\")\n            // newColumns = addColumns(columns)\n\n            // router.loadOrderProducts(dataToUpdate).then(data => {\n            //       console.log('result of getProduct')\n            //       if (data) {\n            //         console.log('yuheee')\n            //         console.log(data)\n            //         setVariantData(data)\n            //         setDataToUpdate([])\n            //         setBtnText(\"Review\")\n            //       }\n            // })\n        } else if (orderState === \"Review Order\") {\n            setNextPage(true)\n            setReviewOrder(false)\n            setBtnText(\"Review\")\n            setOrderOptionsHidden(true)\n            setOrderState(\"Choose Variants/Qty\")\n        } else if (orderState === \"Calling\") {\n            console.log('we hee right?')\n            setBtnText(\"Call: \" + props.values.phone)\n            setOrderState(\"Review Order\")\n        }\n\n    }\n\n    function selectChanged(e) {\n\n        // Get the text and remove the stockLevel at the end\n        \n        // console.log(text.slice(0,-1).join(\" \"))\n        // console.log(e.target.label)\n        // console.log(e.target.text)\n        if (e.target.id === \"productFilter\") {\n\n            const text = e.target[e.target.selectedIndex].label.split(\" \").slice(0,-1).join(\" \")\n\n            setProductSelected({\n                id: e.target.value,\n                title: text\n            })\n            // Check to see if has variants\n            var hasVariants = false\n            if (e.target[e.target.selectedIndex].text != 1) {\n                hasVariants = true\n            } \n\n            getVariants(e, hasVariants)\n            \n          \n            \n        } else {\n\n            const text = e.target[e.target.selectedIndex].text\n            setVariantSelected({\n                id: e.target.value.split(',')[0],\n                title: text,\n                cost: e.target.value.split(',')[1]\n            })\n            setQuantityHidden(false)\n        }\n    }\n\n    function sendMessage() {\n\n        if (comm_method === \"text\") {\n            router.sendText(props.values.contact_name, dataToUpdate, \"4848885912\").then(data => { // NEED TO CHANGE\n                console.log(\"i dont think we're getting here\")\n                save()\n            })\n        }\n        else if (comm_method === \"email\") {\n            router.sendEmail(props.values.contact_name, dataToUpdate, \"stepan.cannuscio@gmail.com\").then(data => { // NEED TO CHANGE\n                save()\n            })\n        } else if (comm_method === \"website\" || comm_method === \"call\") {\n            save()\n        } else {\n            alert(\"No communication method for this vendor! Contact Step for help\")\n        }\n    }\n\n    function save() {\n            \n        const order = {\n            vendor: props.data.row.values.id,\n            subtotal: 0,\n            status: \"submitted\"\n        }\n\n        const orderItems = []\n        dataToUpdate.forEach(item => {\n            console.log(item.subtotal)\n            if (item.subtotal != 0) {\n       \n                order.subtotal += item.subtotal\n                orderItems.push({\n                    variant: item.variantId,\n                    subtotal: item.subtotal, // this is the subtotal including multiple qtys\n                    quantity: item.quantity\n                })\n            }\n        \n        })\n     \n        if (dataToUpdate.length > 0) {\n            router.saveOrder(order, orderItems, props.user.id).then(data => {\n                console.log(data)\n            if (data === \"Success\") {\n                props.toggle()\n            } else {\n                console.log('error saving')\n            }\n         })\n        } \n    }\n    \n\n    function handleChange(e) {\n        setQuantity(e.target.value)\n        setAddBtnHidden(false)\n    }\n\n    function addVariant() {\n        const newData = {\n            productTitle: productSelected.title,\n            productId: productSelected.id,\n            variantTitle: variantSelected.title,\n            variantId: variantSelected.id,\n            cost: variantSelected.cost,\n            quantity: quantity,\n            subtotal: Math.round(variantSelected.cost * quantity * 100, 2) / 100\n        }\n        setDataToUpdate(oldArray => [...oldArray, newData])\n\n        // resetOrderItem()\n    }\n\n    function resetOrderItem() {\n        setProductSelected(\"\")\n        setVariantSelected(\"\")\n        setQuantity(0)\n        setProductSelectHidden(true)\n        setVariantSelectHidden(true)\n        setQuantityHidden(true)\n        setAddBtnHidden(true)\n        console.log(variantSelect.current.value)\n        variantSelect.current.value = \"none\"\n        productSelect.current.value = \"none\"\n        quantityInput.current.value = \"\"\n        quantityInput.current.placeholder = \"0\"\n    }\n\n    function rowSelected(data) {\n        // console.log(data)\n        // console.log(!data.isSelected)\n        if (!data.isSelected) { // I don't know why but this is reversed when receiving the data\n            setDataToUpdate(oldArray => [...oldArray, data.values.id])\n        } else {\n            var array = [...dataToUpdate]; // make a separate copy of the array\n            var index = array.indexOf(data.values.id)\n            if (index !== -1) {\n                array.splice(index, 1);\n                setDataToUpdate(array);\n            }        \n     } \n    }\n\n    function remove(array, element) {\n        console.log(element)\n        console.log('we removing')\n\n        variantData.forEach((item, index) => {\n                \n            if (item.variant_id === element.variant_id) {\n                var array = [...variantData]; // make a separate copy of the array\n                if (index !== -1) {\n                    array.splice(index, 1);\n                    console.log(array)\n                    setVariantData(array);\n                } \n  \n                // console.log(dataToUpdate[index])\n              \n            }\n        })\n\n        if (dataToUpdate.length > 0) {\n            dataToUpdate.forEach((item, index) => {\n                \n                if (item.variantId === element.variant_id) {\n                    var array = [...dataToUpdate]; // make a separate copy of the array\n                    if (index !== -1) {\n                        array.splice(index, 1);\n                        setDataToUpdate(array);\n                    } \n                     \n                    // console.log(dataToUpdate[index])\n                  \n                }\n            })\n        }\n        // var copyArray = [...array]; // make a separate copy of the array\n\n        \n        // var index = copyArray.indexOf(item.values)\n        // if (index !== -1) {\n        //     copyArray.splice(index, 1);\n        //     setVariantData(copyArray);\n        // }        \n    }\n\n    function addOrderItem(data, orderQuantity, index) {\n        // console.log(data)\n        console.log(variantsToUpdate)\n        console.log(data)\n\n        // const newVariantData = data\n        // newVariantData.orderQuantity = orderQuantity\n        // if (index) {\n        //     variantData.forEach((item, newIndex) => {\n        //         if (newIndex === index) {\n        //             var array = [...variantData]; // make a separate copy of the array\n        //             if (index !== -1) {\n        //                 array.splice(index, 1);\n        //                 setVariantData(array);\n        //             } \n        //             setVariantData(oldArray => [...oldArray, newVariantData])   \n        //         }\n                \n        //         // if (item.variantId === data.variant_id) {\n                      \n        //         //     // console.log(dataToUpdate[index])\n                  \n        //         // }\n        //     })\n        // }\n\n        const newData = {\n            productTitle: data.title,\n            productId: data.id,\n            variantTitle: data.variant,\n            variantId: data.variant_id,\n            cost: data.cost,\n            quantity: orderQuantity,\n            subtotal: Math.round(data.cost * orderQuantity * 100, 2) / 100\n        }\n\n        // console.log(Object.values(dataToUpdate))\n\n        if (variantsToUpdate.includes(data.variant_id)) {\n            console.log('yes')\n            \n        \n            dataToUpdate.forEach((item, index) => {\n                \n                if (item.variantId === data.variant_id) {\n                    var array = [...dataToUpdate]; // make a separate copy of the array\n                    if (index !== -1) {\n                        array.splice(index, 1);\n                        setDataToUpdate(array);\n                    } \n                    setDataToUpdate(oldArray => [...oldArray, newData])       \n                    // console.log(dataToUpdate[index])\n                  \n                }\n            })\n        } else {\n            // console.log(variantsToUpdate)\n            console.log('no')\n            setVariantsToUpdate(oldArray => [...oldArray, data.variant_id])\n            \n            setDataToUpdate(oldArray => [...oldArray, newData])\n            \n        }\n\n       \n\n        \n\n        \n    \n\n        // resetOrderItem()\n    }\n\n    const Filler = (props) => {\n        return <div className=\"filler\" style={{width: `${props.percentage}`}}></div>\n    }\n\n    const ProgressBar = (props) => {\n        return (\n            <div className=\"progress-bar\">\n                <Filler percentage={props.percentage}/>\n            </div>\n        )\n    }\n\n\n    if (isLoading) {\n        return <div className=\"loader\"></div>;\n    }\n\n    return (\n        <div>\n            \n            <div className=\"top-content\">\n            <ProgressBar percentage={percentage}/>\n                <span className=\"close\" onClick={() =>  props.toggle()}>&times;    </span>\n                <h2 >{data[0] ? data[0].name : \"Default\"}</h2>\n                <p>Products: {props.values.products}</p>\n                <p>Low Products: {props.values.low_products}</p>\n                {isOrdering ? <button onClick={backClicked} className=\"edit-btn\" style={{backgroundColor: \"grey\"}}>Back</button> : null }\n                <button onClick={orderClicked} className=\"edit-btn\" style={{backgroundColor: editColor}}>{btnText}</button>\n\n                \n            </div>\n      \n            {isOrdering \n\n            ?\n            <div>\n                <div hidden={isOrderItemsHidden}>\n                    {/* <button style={{display: \"block\"}} onClick={() => setProductSelectHidden(false)}>New Product</button> */}\n                    {/* <select ref={productSelect} hidden={isProductSelectHidden} onChange={selectChanged} defaultValue=\"none\" id=\"productFilter\" name=\"productFilter\">\n                        <option value=\"none\">Choose Product:</option>\n                        {data.map((product, index) => {\n                            return (\n                                <option key={index} label={`${product.title} (${product.stockLevel})`} value={product.id}>{product.variants}</option>\n                            )\n                        })}\n                    </select> */}\n                    \n                    \n\n                    {nextPage \n                    ?\n                    <table>\n                    <thead>\n                        <tr>\n                            <th>Product</th>\n                            <th>Variant</th>\n                            <th>Current Quantity</th>\n                            <th>Recent Purchases</th>\n                            <th>Stock Level</th>\n                            <th>Cost/unit</th>\n                            <th>Order Quantity</th>\n                            <th>Remove</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {variantData.map((variant, index) => {\n\n                            var orderQuantity = 0\n                            dataToUpdate.forEach(item => {\n                                if (item.variantId === variant.variant_id) {\n                                    console.log('ywehasflj')\n                                    orderQuantity = item.quantity\n                                }\n                            })\n                       \n                                return (\n                                    <tr key={index}>\n                                        <td>{variant.title}</td>\n                                        <td>{variant.variant}</td>\n                                        <td>{variant.quantity}</td>\n                                        <td>{variant.purchases}</td>\n                                        <td>{variant.stockLevel}</td>\n                                        <td>{variant.cost}</td>\n                                        <td><input type=\"text\" placeholder=\"0\" value={orderQuantity} onChange={(e) => {\n                                            addOrderItem(variant, e.target.value, index) \n                                       \n                                           \n                                        }}/></td>\n                                        <td><span className=\"close\" style={{color: \"red\"}} onClick={() =>  remove(variantData, variant)}>&times;</span></td>\n                                    </tr>\n                                )\n                            \n                        })}\n                    </tbody>\n                </table>\n                    // <Table columns={ columns.concat(\n                    // {\n                    //     Header: 'Variant ID',\n                    //     accessor: 'variant_id',\n                    //     show: false\n                    // },\n                    // {\n                    //     Header: 'Cost',\n                    //     accessor: 'cost',\n                    //     sortDescFirst: true\n                    // },\n                    // {\n                    //     Header: 'Order Quantity',\n                    //     accessor: 'orderQuantity',\n                    // },\n                    // {\n                    //     Header: 'Remove',\n                    //     accessor: 'remove',\n                    // },\n                    // )} data={variantData} search={false} type=\"order-variant\" popupEnabled={false} perPage={5} update={(data, orderQuantity) => addOrderItem(data, orderQuantity)} removeItem={(item) =>remove(variantData, item)}/>\n\n                    // <table>\n                    //     <thead>\n                    //         <tr>\n                    //             <th>Product</th>\n                    //             <th>Variant</th>\n                    //             <th>Current Quantity</th>\n                    //             <th>Recent Purchases</th>\n                    //             <th>Stock Level</th>\n                    //             <th>Recent Order</th>\n                    //             <th>Cost</th>\n                    //             <th>Order Quantity</th>\n                    //         </tr>\n                    //     </thead>\n                    //     <tbody>\n                    //         {variantData.map((variant, index) => {\n                           \n                    //                 return (\n                    //                     <tr key={index}>\n                    //                         <td>{variant.product}</td>\n                    //                         <td>{variant.variant}</td>\n                    //                         <td>{variant.quantity}</td>\n                    //                         <td>{variant.purchases}</td>\n                    //                         <td>{variant.stockLevel}</td>\n                    //                         <td>{variant.recentOrder}</td>\n                    //                         <td>{variant.cost}</td>\n                    //                         <input type=\"text\" placeholder=\"0\"/>\n                    //                     </tr>\n                    //                 )\n                                \n                    //         })}\n                    //     </tbody>\n                    // </table>\n\n                    :\n                    reviewOrder \n                    ?\n                    <table>\n                    <thead>\n                        <tr>\n                            <th>Product</th>\n                            <th>Variant</th>\n                            <th>Quantity</th>\n                            <th>Cost/unit</th>\n                            <th>Subtotal</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {dataToUpdate.map((order_item, index) => {\n                       \n                                return (\n                                    <tr key={index}>\n                                        <td>{order_item.productTitle}</td>\n                                        <td>{order_item.variantTitle}</td>\n                                        <td>{order_item.quantity}</td>\n                                        <td>${order_item.cost}</td>\n                                        <td>${order_item.subtotal}</td>\n                                    </tr>\n                                )\n                            \n                        })}\n                    </tbody>\n                </table>\n                    :\n                    <Table columns={columns} data={data} search={false} type=\"order\" checkbox={true} popupEnabled={false} perPage={5} update={(data) => rowSelected(data)}/>\n                        }\n              \n                    {/* <select ref={variantSelect} hidden={isVariantSelectHidden} onChange={selectChanged} defaultValue=\"none\" id=\"variantFilter\" name=\"variantFilter\">\n                    <option value=\"none\">Choose Variant:</option>\n                        {variantData.map((variant, index) => {\n                            return (\n                                <option key={index} value={[variant.id, variant.cost]}>{variant.title}</option>\n                            )\n                        })}\n                    </select> */}\n                    {/* <input ref={quantityInput} hidden={isQuantityHidden} placeholder={quantity} onChange={handleChange} />\n                    <button hidden={isAddBtnHidden} onClick={addVariant}>Add</button> */}\n                   \n                    \n            \n                    \n                </div>\n                {/* <div hidden={isOrderOptionsHidden}>\n                    {comm_method === \"email\" \n                    ?\n                    <MessageOption type=\"Email\" contact_name={props.values.contact_name} to=\"stepan.cannuscio@gmail.com\" dataToUpdate={dataToUpdate} />\n                    :\n                                \n                    comm_method === \"call\" \n                    ?\n                    <a href=\"tel:4848885912\"><button>Call: 484-888-5912</button></a>\n\n                    :\n                    comm_method === \"text\" \n                    ?\n                    <MessageOption type=\"Text\" contact_name={props.values.contact_name} to=\"4848885912\" dataToUpdate={dataToUpdate} />\n                    :\n                    comm_method === \"website\"\n                    ?\n                    <MessageOption type=\"Website\" contact_name={props.values.contact_name} to=\"https://amazon.com\" dataToUpdate={dataToUpdate} />\n                    :\n                    <p>Not sure about this one!</p>\n                    }           \n                        \n                       \n                        \n                </div> */}\n       \n        \n            {/* <table style={{textAlign: \"center\"}}>\n            <thead >\n                <tr>\n                    <th className=\"table-header\">Product</th>\n                    <th className=\"table-header\">Quantity</th>\n                    <th className=\"table-header\">Purchases (last 30 days)</th>\n                    <th className=\"table-header\">Stock Level</th>\n                    <th className=\"table-header\">Last Order</th>\n                </tr>\n            </thead>\n\n            <tbody>\n            {data.map((item, index) => {\n                var recentOrder = \"\"\n                if (item.status && item.status.split(',')[0] === \"completed\") {\n                    recentOrder = `${item.quantity_ordered.split(',')[0]} units received on ${new Date(item.completed_date.split(',')[0]).toDateString()}`\n                } else if (item.status && item.status.split(',')[0] === \"fulfilled\") {\n                    recentOrder = `Fulfilled on ${new Date(item.fulfilled_date.split(',')[0]).toDateString()} - ${item.tracking.split(',')[0]}`\n                } else if (item.status && item.status.split(',')[0] === \"submitted\") {\n                    recentOrder = `Submitted order for ${item.quantity_ordered.split(',')[0]} units on ${new Date(item.submitted_date.split(',')[0]).toDateString()}`\n                }\n                \n                return (\n                    <tr key={index}>\n                        <td className=\"table-cell\">{item.title}</td>\n                        <td className=\"table-cell\">{item.quantity}</td>\n                        <td className=\"table-cell\">{item.purchases}</td>\n                        <td className=\"table-cell\">{item.stockLevel}</td>\n                        <td className=\"table-cell\">{recentOrder}</td>\n                        \n                    </tr>\n                    ) \n                })\n            }\n            </tbody>\n        </table>\n        </div> */}\n        </div>\n    \n            :\n\n            <Table columns={columns} data={data} type=\"order\" search={false} popupEnabled={false} perPage={5}/>\n    \n            // <table style={{textAlign: \"center\"}}>\n            //     <thead >\n            //         <tr>\n            //             <th className=\"table-header\">Product</th>\n            //             <th className=\"table-header\">Quantity</th>\n            //             <th className=\"table-header\">Purchases (last 30 days)</th>\n            //             <th className=\"table-header\">Stock Level</th>\n            //             <th className=\"table-header\">Last Order</th>\n            //         </tr>\n            //     </thead>\n\n            //     <tbody>\n            //     {data.map((item, index) => {\n            //         var recentOrder = \"\"\n            //         if (item.status && item.status.split(',')[0] === \"completed\") {\n            //             recentOrder = `${item.quantity_ordered.split(',')[0]} units received on ${new Date(item.completed_date.split(',')[0]).toDateString()}`\n            //         } else if (item.status && item.status.split(',')[0] === \"fulfilled\") {\n            //             recentOrder = `Fulfilled on ${new Date(item.fulfilled_date.split(',')[0]).toDateString()} - ${item.tracking.split(',')[0]}`\n            //         } else if (item.status && item.status.split(',')[0] === \"submitted\") {\n            //             recentOrder = `Submitted order for ${item.quantity_ordered.split(',')[0]} units on ${new Date(item.submitted_date.split(',')[0]).toDateString()}`\n            //         }\n                    \n            //         return (\n            //             <tr key={index}>\n            //                 <td className=\"table-cell\">{item.title}</td>\n            //                 <td className=\"table-cell\">{item.quantity}</td>\n            //                 <td className=\"table-cell\">{item.purchases}</td>\n            //                 <td className=\"table-cell\">{item.stockLevel}</td>\n            //                 <td className=\"table-cell\">{recentOrder}</td>\n                            \n            //             </tr>\n            //             ) \n            //         })\n            //     }\n            //     </tbody>\n            // </table>\n}       \n  </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}