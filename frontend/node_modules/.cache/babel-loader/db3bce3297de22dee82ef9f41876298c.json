{"ast":null,"code":"const formatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 0\n});\n\nfunction sortStockLevel(rowA, rowB) {\n  const a = rowA.values.stockLevel;\n  const b = rowB.values.stockLevel;\n\n  if (a === \"High\" && [\"Low\", \"Medium\", \"High\"].includes(b)) {\n    return 1;\n  } else if (a === \"Medium\" && [\"Low\", \"Medium\"].includes(b)) {\n    return 1;\n  } else if (a === \"Low\" && b === \"Low\") {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\nfunction sortMoney(rowA, rowB, column) {\n  var aValues = \"$0\";\n  var bValues = \"$0\";\n\n  if (rowA.values.total) {\n    aValues = rowA.values[column];\n  }\n\n  if (rowB.values.total) {\n    bValues = rowB.values[column];\n  }\n\n  if (Number(aValues.replace(/(^\\$|,)/g, '')) > Number(bValues.replace(/(^\\$|,)/g, ''))) {\n    return 1;\n  } else {\n    return -1;\n  }\n}\n\nfunction sortDates(rowA, rowB, column) {\n  var a = \"\";\n  var b = \"\";\n\n  if (column === \"submitted_date\") {\n    a = rowA.values.submitted_date;\n    b = rowB.values.submitted_date;\n  } else if (column === \"fulfilled_date\") {\n    a = rowA.values.fulfilled_date;\n    b = rowB.values.fulfilled_date;\n  } else if (column === \"completed_date\") {\n    a = rowA.values.completed_date;\n    b = rowB.values.completed_date;\n  }\n\n  var dateA = \"\";\n  var dateB = \"\";\n  var timeA = \"\";\n  var timeB = \"\";\n  var amPMA = \"\";\n  var amPMB = \"\";\n\n  if (a) {\n    a = a.split(' ');\n    dateA = a[0].split('/');\n    timeA = a[1].split(':');\n    amPMA = a[2];\n  } else {\n    return 0;\n  }\n\n  if (b) {\n    b = b.split(' ');\n    dateB = b[0].split('/');\n    timeB = b[1].split(':');\n    amPMB = b[2];\n  } else {\n    return 0;\n  }\n\n  return dateA[2] - dateB[2] || dateA[0] - dateB[0] || dateA[1] - dateB[1] || amPMA > amPMB || timeA[0][0] - timeB[0][0] || timeA[0][1] - timeB[0][1] || timeA[1][0] - timeB[1][0] || timeA[1][1] - timeB[1][1] || true;\n}\n\nexport { formatter, sortStockLevel, sortMoney, sortDates };","map":{"version":3,"sources":["/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/sims/frontend/src/helpers.js"],"names":["formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","sortStockLevel","rowA","rowB","a","values","stockLevel","b","includes","sortMoney","column","aValues","bValues","total","Number","replace","sortDates","submitted_date","fulfilled_date","completed_date","dateA","dateB","timeA","timeB","amPMA","amPMB","split"],"mappings":"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","sourcesContent":["\nconst formatter = new Intl.NumberFormat('en-US', {\n    style: 'currency',\n    currency: 'USD',\n    minimumFractionDigits: 0\n})\n\nfunction sortStockLevel(rowA, rowB) {\n\n    const a = rowA.values.stockLevel\n    const b = rowB.values.stockLevel\n\n    if (a === \"High\" && [\"Low\", \"Medium\", \"High\"].includes(b)) {\n        return 1\n    } else if (a === \"Medium\" && [\"Low\", \"Medium\"].includes(b)) {\n        return 1\n    } else if (a === \"Low\" && b === \"Low\") {\n        return 1\n    } else {\n        return -1\n    }\n}\n\nfunction sortMoney(rowA, rowB, column) {\n\n    var aValues = \"$0\"\n    var bValues = \"$0\"\n    if (rowA.values.total) {\n      aValues = rowA.values[column]\n    }\n    if (rowB.values.total) {\n      bValues = rowB.values[column]\n    }\n\n      if (Number(aValues.replace(/(^\\$|,)/g,'')) > Number(bValues.replace(/(^\\$|,)/g,''))) {\n        return 1\n    } else {\n        return -1\n    }\n\n  }\n\nfunction sortDates(rowA, rowB, column) {\n\n    var a = \"\"\n    var b = \"\"\n\n    if (column === \"submitted_date\") {\n      a = rowA.values.submitted_date\n      b = rowB.values.submitted_date\n    } else if (column === \"fulfilled_date\") {\n      a = rowA.values.fulfilled_date\n      b = rowB.values.fulfilled_date\n    } else if (column === \"completed_date\") {\n      a = rowA.values.completed_date\n      b = rowB.values.completed_date\n    }\n\n    var dateA = \"\"\n    var dateB = \"\"\n    var timeA = \"\"\n    var timeB = \"\"\n    var amPMA = \"\"\n    var amPMB = \"\"\n\n    if (a) {\n      a = a.split(' ')\n      dateA = a[0].split('/')\n      timeA = a[1].split(':')\n      amPMA = a[2]\n    } else {\n      return 0\n    }\n\n    if (b) {\n      b = b.split(' ')\n      dateB = b[0].split('/')\n      timeB = b[1].split(':')\n      amPMB = b[2]\n    } else {\n      return 0\n    }\n\n    return dateA[2] - dateB[2] || dateA[0] - dateB[0] || dateA[1] - dateB[1] || amPMA > amPMB || \n            timeA[0][0] - timeB[0][0] || timeA[0][1] - timeB[0][1] || timeA[1][0] - timeB[1][0] || timeA[1][1] - timeB[1][1] || true\n  }\n\n    \n\n\n\n\nexport {formatter, sortStockLevel, sortMoney, sortDates}\n"]},"metadata":{},"sourceType":"module"}