{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/components/Table.js\",\n    _s = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { useTable, useAsyncDebounce, useGlobalFilter, usePagination, useSortBy, useRowSelect } from \"react-table\";\nimport searchIcon from \"../images/search.png\";\nimport Popup from \"./Popup\"; // Define a default UI for filtering\n\nfunction GlobalFilter({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter\n}) {\n  _s();\n\n  const count = preGlobalFilteredRows.length;\n  const [value, setValue] = React.useState(globalFilter);\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined);\n  }, 200);\n  const searchStyle = {\n    border: '1px solid rgba(30,56,77, 50%)',\n    borderRadius: '5px'\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: searchStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      style: {\n        margin: \"0 10px\",\n        width: \"12px\"\n      },\n      src: searchIcon,\n      alt: \"search icon\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: value || \"\",\n      onChange: e => {\n        setValue(e.target.value);\n        onChange(e.target.value);\n      },\n      placeholder: `Search products...`,\n      style: {\n        fontSize: '1.1rem',\n        border: '0',\n        width: '80%',\n        padding: \"10px 0\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n}\n\n_s(GlobalFilter, \"u76gItWTPW4jhTYSCcNG7/LfbyA=\", false, function () {\n  return [useAsyncDebounce];\n});\n\n_c = GlobalFilter;\nexport default function Table({\n  columns,\n  initialSearch,\n  data,\n  type,\n  reloadData,\n  search,\n  perPage,\n  popupEnabled,\n  user,\n  checkbox,\n  update\n}) {\n  _s3();\n\n  var _s2 = $RefreshSig$();\n\n  // console.log(props)\\\n  console.log(type);\n  console.log(user);\n  const [isPopup, setIsPopup] = useState(false);\n  const [popupData, setPopupData] = useState({});\n  const IndeterminateCheckbox = /*#__PURE__*/React.forwardRef(_s2(({\n    indeterminate,\n    ...rest\n  }, ref) => {\n    _s2();\n\n    const defaultRef = React.useRef();\n    const resolvedRef = ref || defaultRef;\n    React.useEffect(() => {\n      resolvedRef.current.indeterminate = indeterminate;\n    }, [resolvedRef, indeterminate]);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        ref: resolvedRef,\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 13\n      }, this)\n    }, void 0, false);\n  }, \"ouw4KVvDKeit07oEcYWUcp3TdOA=\"));\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    state,\n    page,\n    canPreviousPage,\n    canNextPage,\n    nextPage,\n    previousPage,\n    state: {\n      pageIndex,\n      pageSize,\n      selectedRowIds\n    },\n    prepareRow,\n    preGlobalFilteredRows,\n    setGlobalFilter\n  } = useTable({\n    columns,\n    data,\n    initialState: {\n      pageIndex: 0,\n      pageSize: perPage,\n      hiddenColumns: [\"id\", \"comm_method\", \"email\", \"phone\", \"Vendor_ID\", \"contact_name\", \"subtotal\", \"discount\"],\n      globalFilter: initialSearch\n    }\n  }, useGlobalFilter, useSortBy, usePagination, useRowSelect, hooks => {\n    if (checkbox) {\n      hooks.visibleColumns.push(columns => [// Let's make a column for selection\n      {\n        id: 'selection',\n        // The header can use the table's getToggleAllRowsSelectedProps method\n        // to render a checkbox\n        Header: ({\n          getToggleAllRowsSelectedProps\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, { ...getToggleAllRowsSelectedProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this),\n        // The cell can use the individual row's getToggleRowSelectedProps method\n        // to the render a checkbox\n        Cell: ({\n          row\n        }) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(IndeterminateCheckbox, { ...row.getToggleRowSelectedProps()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 23\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 21\n        }, this)\n      }, ...columns]);\n    }\n  });\n  const selectedRows = {}; // Changes to array will not change copyWithAssign\n\n  Object.assign(selectedRowIds, array); // Object.assign(target, source)\n\n  console.log(selectedRowIds);\n  console.log(selectedRows);\n\n  function togglePopup(cell) {\n    console.log('toggling');\n    console.log(isPopup);\n    setIsPopup(!isPopup);\n\n    if (cell) {\n      setPopupData(cell);\n    } else {\n      console.log('hereee'); // console.log(props)\n\n      reloadData(); // if (type === \"products\") {\n      //   reloadData()\n      // } \n    }\n\n    console.log(isPopup);\n    console.log(cell);\n  }\n\n  const results = page.length > 10 ? 10 : page.length;\n  const pageBtnStyle = {\n    backgroundColor: \"#EFEFEF\",\n    border: \"none\",\n    padding: \"5px 15px\",\n    margin: \"0 5px\",\n    borderRadius: \"5px\",\n    color: \"#1E384D\"\n  };\n  return (\n    /*#__PURE__*/\n    // apply the table props\n    _jsxDEV(\"div\", {\n      class: \"inventory-table\",\n      children: [search ? /*#__PURE__*/_jsxDEV(GlobalFilter, {\n        preGlobalFilteredRows: preGlobalFilteredRows,\n        globalFilter: state.globalFilter,\n        setGlobalFilter: setGlobalFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 14\n      }, this) : null, search ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"25px 0\",\n          color: 'rgba(0,0,0, 57%)'\n        },\n        children: [\"Showing the first \", results, \" results of \", rows.length, \" rows\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 19\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: // Loop over the header rows\n          headerGroups.map(headerGroup =>\n          /*#__PURE__*/\n          // Apply the header row props\n          _jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: // Loop over the headers in each row\n            headerGroup.headers.map(column =>\n            /*#__PURE__*/\n            // Apply the header cell props\n            _jsxDEV(\"th\", { ...column.getHeaderProps(column.getSortByToggleProps()),\n              children: [// Render the header\n              column.render('Header'), /*#__PURE__*/_jsxDEV(\"span\", {\n                style: {\n                  color: \"#76c32d\",\n                  fontSize: \"14px\"\n                },\n                children: column.isSorted ? column.isSortedDesc ? ' (high-low)' : ' (low-high)' : ''\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: page.map((row, i) => {\n            // Prepare the row for display\n            prepareRow(row);\n            return (\n              /*#__PURE__*/\n              // Apply the row props\n              _jsxDEV(\"tr\", { ...row.getRowProps(),\n                children: // Loop over the rows cells\n                row.cells.map(cell => {\n                  const stockStyle = {\n                    color: \"#1E384D\"\n                  };\n\n                  if (cell.column.id === \"stockLevel\") {\n                    stockStyle.padding = \"5px\";\n                    stockStyle.borderRadius = \"5px\";\n                    stockStyle.color = \"white\";\n                    stockStyle.textAlign = \"center\";\n\n                    if (cell.value === \"Low\") {\n                      stockStyle.backgroundColor = \"red\";\n                    } else if (cell.value === \"Medium\") {\n                      stockStyle.backgroundColor = \"#FFD300\";\n                    } else {\n                      stockStyle.backgroundColor = \"#4CAF50\";\n                    }\n                  } // Apply the cell props\n\n\n                  return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                    onClick: () => popupEnabled ? togglePopup(cell) : null,\n                    children: /*#__PURE__*/_jsxDEV(\"div\", {\n                      style: stockStyle,\n                      children: // Render the cell contents\n                      cell.render('Cell')\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 253,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 251,\n                    columnNumber: 25\n                  }, this);\n                })\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 21\n              }, this)\n            );\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          textAlign: \"right\",\n          margin: \"20px 10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          style: pageBtnStyle,\n          onClick: () => previousPage(),\n          disabled: !canPreviousPage,\n          children: 'Previous'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), ' ', /*#__PURE__*/_jsxDEV(\"button\", {\n          style: pageBtnStyle,\n          id: \"next-btn\",\n          onClick: () => nextPage(),\n          disabled: !canNextPage,\n          children: 'Next'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this), ' ']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), isPopup ? /*#__PURE__*/_jsxDEV(Popup, {\n        type: type,\n        user: user,\n        data: popupData,\n        toggle: () => togglePopup()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 20\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this)\n  );\n}\n\n_s3(Table, \"NaTtZMms80XDwp64sjcVcQE4vig=\", false, function () {\n  return [useTable];\n});\n\n_c2 = Table;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GlobalFilter\");\n$RefreshReg$(_c2, \"Table\");","map":{"version":3,"sources":["/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/components/Table.js"],"names":["React","useState","useTable","useAsyncDebounce","useGlobalFilter","usePagination","useSortBy","useRowSelect","searchIcon","Popup","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","value","setValue","onChange","undefined","searchStyle","border","borderRadius","margin","width","e","target","fontSize","padding","Table","columns","initialSearch","data","type","reloadData","search","perPage","popupEnabled","user","checkbox","update","console","log","isPopup","setIsPopup","popupData","setPopupData","IndeterminateCheckbox","forwardRef","indeterminate","rest","ref","defaultRef","useRef","resolvedRef","useEffect","current","getTableProps","getTableBodyProps","headerGroups","rows","state","page","canPreviousPage","canNextPage","nextPage","previousPage","pageIndex","pageSize","selectedRowIds","prepareRow","initialState","hiddenColumns","hooks","visibleColumns","push","id","Header","getToggleAllRowsSelectedProps","Cell","row","getToggleRowSelectedProps","selectedRows","Object","assign","array","togglePopup","cell","results","pageBtnStyle","backgroundColor","color","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","i","getRowProps","cells","stockStyle","textAlign","getCellProps"],"mappings":"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","sourcesContent":["import React, {useState} from \"react\"\nimport { useTable, useAsyncDebounce, useGlobalFilter, usePagination, useSortBy, useRowSelect } from \"react-table\"\nimport searchIcon from \"../images/search.png\"\nimport Popup from \"./Popup\"\n\n// Define a default UI for filtering\nfunction GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n    }) {\n    const count = preGlobalFilteredRows.length\n    const [value, setValue] = React.useState(globalFilter)\n    const onChange = useAsyncDebounce(value => {\n        setGlobalFilter(value || undefined)\n    }, 200)\n\n    const searchStyle = {\n        border: '1px solid rgba(30,56,77, 50%)',\n        borderRadius: '5px',\n\n    }\n    \n    return (\n    <div style={searchStyle}>\n        <img style={{margin: \"0 10px\", width: \"12px\"}} src={searchIcon} alt=\"search icon\" />\n        <input\n            value={value || \"\"}\n            onChange={e => {\n            setValue(e.target.value);\n            onChange(e.target.value);\n            }}\n            placeholder={`Search products...`}\n            style={{\n            fontSize: '1.1rem',\n            border: '0',\n            width: '80%',\n            padding: \"10px 0\"\n            }}\n        />\n        \n        </div>\n    )\n    }\n\n\n\nexport default function Table({columns, initialSearch, data, type, reloadData, search, perPage, popupEnabled, user, checkbox, update}) {\n  // console.log(props)\\\n  console.log(type)\n  console.log(user)\n\n    const [isPopup, setIsPopup] = useState(false)\n    const [popupData, setPopupData] = useState({})\n\n    const IndeterminateCheckbox = React.forwardRef(\n      ({ indeterminate, ...rest }, ref) => {\n        const defaultRef = React.useRef()\n        const resolvedRef = ref || defaultRef\n    \n        React.useEffect(() => {\n          resolvedRef.current.indeterminate = indeterminate\n        }, [resolvedRef, indeterminate])\n    \n        return (\n          <>\n            <input type=\"checkbox\" ref={resolvedRef} {...rest} />\n          </>\n        )\n      }\n    )\n    \n    \n    const {\n        getTableProps,\n        getTableBodyProps,\n        headerGroups,\n        rows,\n        state,\n        page,\n        canPreviousPage,\n        canNextPage,\n        nextPage,\n        previousPage,\n        state: { pageIndex, pageSize, selectedRowIds },\n        prepareRow,\n        preGlobalFilteredRows,\n        setGlobalFilter,\n      } = useTable(\n          {\n              columns,\n              data,\n              initialState: {\n                pageIndex: 0, \n                pageSize: perPage,\n                hiddenColumns: [\"id\", \"comm_method\", \"email\", \"phone\", \"Vendor_ID\", \"contact_name\",\n                                \"subtotal\", \"discount\"],\n                globalFilter: initialSearch\n              }\n          },\n          useGlobalFilter,\n          useSortBy,\n          usePagination,\n          useRowSelect,\n          hooks => {\n            if (checkbox) {\n              hooks.visibleColumns.push(columns => [\n                // Let's make a column for selection\n                {\n                  id: 'selection',\n                  // The header can use the table's getToggleAllRowsSelectedProps method\n                  // to render a checkbox\n                  Header: ({ getToggleAllRowsSelectedProps }) => (\n                    <div>\n                      <IndeterminateCheckbox {...getToggleAllRowsSelectedProps()} />\n                    </div>\n                  ),\n                  // The cell can use the individual row's getToggleRowSelectedProps method\n                  // to the render a checkbox\n                  Cell: ({ row }) => (\n                    <div>\n                      <IndeterminateCheckbox {...row.getToggleRowSelectedProps()} />\n                    </div>\n                  ),\n                },\n                ...columns,\n              ])\n            }\n            \n          }\n\n      )\n\n      const selectedRows = {} // Changes to array will not change copyWithAssign\n      Object.assign(selectedRowIds, array) // Object.assign(target, source)\n\n      \n\n      console.log(selectedRowIds)\n      console.log(selectedRows)\n      \n      function togglePopup(cell) {\n        console.log('toggling')\n        console.log(isPopup)\n        setIsPopup(!isPopup)\n        if (cell) {\n            setPopupData(cell)\n        } else {\n          console.log('hereee')\n          // console.log(props)\n          reloadData()\n          // if (type === \"products\") {\n          //   reloadData()\n          // } \n          \n\n        }   \n        console.log(isPopup)\n        console.log(cell)\n      }\n\n      const results = page.length > 10 ? 10 : page.length\n\n      const pageBtnStyle = {\n        backgroundColor: \"#EFEFEF\", \n        border: \"none\", \n        padding: \"5px 15px\", \n        margin: \"0 5px\", \n        borderRadius: \"5px\", \n        color: \"#1E384D\"\n      }\n\n      return (\n    \n          // apply the table props\n        <div class=\"inventory-table\">\n          {search ? \n             <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n              />\n              : null}\n       {search ?  <div style={{margin: \"25px 0\", color: 'rgba(0,0,0, 57%)'}}>\n            Showing the first {results} results of {rows.length} rows\n        </div> : null}\n      \n        <table {...getTableProps()}>\n          <thead>\n            \n            {// Loop over the header rows\n            headerGroups.map(headerGroup => (\n              \n              // Apply the header row props\n              <tr {...headerGroup.getHeaderGroupProps()}>\n                {// Loop over the headers in each row\n                headerGroup.headers.map(column => (\n                  \n                  // Apply the header cell props\n                  <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                    {// Render the header\n                    column.render('Header')}\n                    {/* Add a sort direction indicator */}\n                  <span style={{color: \"#76c32d\", fontSize: \"14px\"}}>\n                    {column.isSorted\n                      ? column.isSortedDesc\n                        ? ' (high-low)'\n                        : ' (low-high)'\n                      : ''}\n                  </span>\n                  </th>\n                ))}\n              </tr>\n            ))}\n          </thead>\n          {/* Apply the table body props */}\n          <tbody {...getTableBodyProps()}>\n            \n            {page.map((row, i) => {\n                // Prepare the row for display\n                \n                prepareRow(row)\n                \n                return (\n                    // Apply the row props\n                    <tr {...row.getRowProps()}>\n                      \n                    \n                    {// Loop over the rows cells\n                    \n                    row.cells.map(cell => {\n                        const stockStyle = {\n                            color: \"#1E384D\"\n                        } \n                        if (cell.column.id === \"stockLevel\") {\n                            stockStyle.padding = \"5px\"\n                            stockStyle.borderRadius = \"5px\"\n                            stockStyle.color = \"white\"\n                            stockStyle.textAlign = \"center\"\n\n                            if (cell.value === \"Low\") {\n                                stockStyle.backgroundColor = \"red\"\n                            } else if (cell.value === \"Medium\") {\n                                stockStyle.backgroundColor = \"#FFD300\"\n                            } else {\n                                stockStyle.backgroundColor = \"#4CAF50\"\n                            }\n                        }\n                        // Apply the cell props\n                        return (\n                        <td {...cell.getCellProps()} onClick={() => popupEnabled ? togglePopup(cell) : null}>\n                          \n                            <div style={stockStyle}>\n                            {// Render the cell contents\n                            cell.render('Cell')}\n                            </div>\n                        </td>\n                        )\n                    })}\n                    </tr>\n                )\n                })}           \n          </tbody>\n        </table>\n        <div style={{textAlign: \"right\", margin: \"20px 10px\"}}>\n            <button style={pageBtnStyle} onClick={() => previousPage()} disabled={!canPreviousPage}>\n            {'Previous'}\n            </button>{' '}\n            <button style={pageBtnStyle} id=\"next-btn\" onClick={() => nextPage()} disabled={!canNextPage}>\n            {'Next'}\n            </button>{' '}\n        </div>\n        {isPopup ? <Popup type={type} user={user} data={popupData} toggle={() => togglePopup()} /> : null}\n        </div> \n      )\n}\n\n"]},"metadata":{},"sourceType":"module"}