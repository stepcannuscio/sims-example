{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/components/Table.js\",\n    _s2 = $RefreshSig$();\n\nimport React from 'react';\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'; // A great library for fuzzy filtering/sorting items\n\nimport { matchSorter } from 'match-sorter'; // Our table component\n\nexport default function Table({\n  columns,\n  data\n}) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  // Define a default UI for filtering\n  function GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter\n  }) {\n    _s();\n\n    const count = preGlobalFilteredRows.length;\n    const [value, setValue] = React.useState(globalFilter);\n    const onChange = useAsyncDebounce(value => {\n      setGlobalFilter(value || undefined);\n    }, 200);\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: [\"Search:\", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n        value: value || \"\",\n        onChange: e => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        },\n        placeholder: `${count} records...`,\n        style: {\n          fontSize: '1.1rem',\n          border: '0'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  } // Define a default UI for filtering\n\n\n  _s(GlobalFilter, \"u76gItWTPW4jhTYSCcNG7/LfbyA=\", false, function () {\n    return [useAsyncDebounce];\n  });\n\n  function DefaultColumnFilter({\n    column: {\n      filterValue,\n      preFilteredRows,\n      setFilter\n    }\n  }) {\n    const count = preFilteredRows.length;\n    return /*#__PURE__*/_jsxDEV(\"input\", {\n      value: filterValue || '',\n      onChange: e => {\n        setFilter(e.target.value || undefined); // Set undefined to remove the filter entirely\n      },\n      placeholder: `Search ${count} records...`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this);\n  }\n\n  function fuzzyTextFilterFn(rows, id, filterValue) {\n    return matchSorter(rows, filterValue, {\n      keys: [row => row.values[id]]\n    });\n  } // Let the table remove the filter if the string is empty\n\n\n  fuzzyTextFilterFn.autoRemove = val => !val;\n\n  const filterTypes = React.useMemo(() => ({\n    // Add a new fuzzyTextFilterFn filter type.\n    fuzzyText: fuzzyTextFilterFn,\n    // Or, override the default text filter to use\n    // \"startWith\"\n    text: (rows, id, filterValue) => {\n      return rows.filter(row => {\n        const rowValue = row.values[id];\n        return rowValue !== undefined ? String(rowValue).toLowerCase().startsWith(String(filterValue).toLowerCase()) : true;\n      });\n    }\n  }), []);\n  const defaultColumn = React.useMemo(() => ({\n    // Let's set up our default Filter UI\n    Filter: DefaultColumnFilter\n  }), []);\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state // visibleColumns,\n    // preGlobalFilteredRows,\n    // setGlobalFilter,\n\n  } = useTable({\n    columns,\n    data,\n    defaultColumn,\n    // Be sure to pass the defaultColumn option\n    filterTypes\n  }, useFilters, // useFilters!\n  useGlobalFilter // useGlobalFilter!\n  ); // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n\n  const firstPageRows = rows.slice(0, 10);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"inventory-table\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", { ...getTableProps(),\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: headerGroups.map(headerGroup => /*#__PURE__*/_jsxDEV(\"tr\", { ...headerGroup.getHeaderGroupProps(),\n            children: headerGroup.headers.map(column => /*#__PURE__*/_jsxDEV(\"th\", { ...column.getHeaderProps(),\n              children: [column.render('Header'), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: column.canFilter ? column.render('Filter') : null\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 128,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", { ...getTableBodyProps(),\n          children: firstPageRows.map((row, i) => {\n            prepareRow(row);\n            return /*#__PURE__*/_jsxDEV(\"tr\", { ...row.getRowProps(),\n              children: row.cells.map(cell => {\n                return /*#__PURE__*/_jsxDEV(\"td\", { ...cell.getCellProps(),\n                  children: cell.render('Cell')\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 154,\n                  columnNumber: 26\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Showing the first 20 results of \", rows.length, \" rows\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"pre\", {\n          children: /*#__PURE__*/_jsxDEV(\"code\", {\n            children: JSON.stringify(state.filters, null, 2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n} // \n\n_s2(Table, \"NMAVJ6ngcNfa9oiaDZJs5UN1+MA=\", false, function () {\n  return [useTable];\n});\n\n_c = Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/components/Table.js"],"names":["React","useTable","useFilters","useGlobalFilter","useAsyncDebounce","matchSorter","Table","columns","data","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","value","setValue","useState","onChange","undefined","e","target","fontSize","border","DefaultColumnFilter","column","filterValue","preFilteredRows","setFilter","fuzzyTextFilterFn","rows","id","keys","row","values","autoRemove","val","filterTypes","useMemo","fuzzyText","text","filter","rowValue","String","toLowerCase","startsWith","defaultColumn","Filter","getTableProps","getTableBodyProps","headerGroups","prepareRow","state","firstPageRows","slice","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","i","getRowProps","cells","cell","getCellProps","JSON","stringify","filters"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useTable, useFilters, useGlobalFilter, useAsyncDebounce } from 'react-table'\n// A great library for fuzzy filtering/sorting items\nimport {matchSorter} from 'match-sorter'\n\n\n\n// Our table component\nexport default function Table({ columns, data }) {\n    // Define a default UI for filtering\nfunction GlobalFilter({\n    preGlobalFilteredRows,\n    globalFilter,\n    setGlobalFilter,\n  }) {\n    const count = preGlobalFilteredRows.length\n    const [value, setValue] = React.useState(globalFilter)\n    const onChange = useAsyncDebounce(value => {\n      setGlobalFilter(value || undefined)\n    }, 200)\n  \n    return (\n      <span>\n        Search:{' '}\n        <input\n          value={value || \"\"}\n          onChange={e => {\n            setValue(e.target.value);\n            onChange(e.target.value);\n          }}\n          placeholder={`${count} records...`}\n          style={{\n            fontSize: '1.1rem',\n            border: '0',\n          }}\n        />\n      </span>\n    )\n  }\n  \n  // Define a default UI for filtering\n  function DefaultColumnFilter({\n    column: { filterValue, preFilteredRows, setFilter },\n  }) {\n    const count = preFilteredRows.length\n  \n    return (\n      <input\n        value={filterValue || ''}\n        onChange={e => {\n          setFilter(e.target.value || undefined) // Set undefined to remove the filter entirely\n        }}\n        placeholder={`Search ${count} records...`}\n      />\n    )\n  }\n  \n  function fuzzyTextFilterFn(rows, id, filterValue) {\n    return matchSorter(rows, filterValue, { keys: [row => row.values[id]] })\n  }\n  \n  // Let the table remove the filter if the string is empty\n  fuzzyTextFilterFn.autoRemove = val => !val\n  const filterTypes = React.useMemo(\n    () => ({\n      // Add a new fuzzyTextFilterFn filter type.\n      fuzzyText: fuzzyTextFilterFn,\n      // Or, override the default text filter to use\n      // \"startWith\"\n      text: (rows, id, filterValue) => {\n        return rows.filter(row => {\n          const rowValue = row.values[id]\n          return rowValue !== undefined\n            ? String(rowValue)\n                .toLowerCase()\n                .startsWith(String(filterValue).toLowerCase())\n            : true\n        })\n      },\n    }),\n    []\n  )\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      // Let's set up our default Filter UI\n      Filter: DefaultColumnFilter,\n    }),\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n    state,\n    // visibleColumns,\n    // preGlobalFilteredRows,\n    // setGlobalFilter,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn, // Be sure to pass the defaultColumn option\n      filterTypes,\n    },\n    useFilters, // useFilters!\n    useGlobalFilter // useGlobalFilter!\n  )\n\n  // We don't want to render all of the rows for this example, so cap\n  // it for this use case\n  const firstPageRows = rows.slice(0, 10)\n\n  return (\n    <>\n    <div class=\"inventory-table\">\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                  {/* Render the columns filter UI */}\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n          {/* <tr>\n            <th\n              colSpan={visibleColumns.length}\n              style={{\n                textAlign: 'left',\n              }}\n            >\n              <GlobalFilter\n                preGlobalFilteredRows={preGlobalFilteredRows}\n                globalFilter={state.globalFilter}\n                setGlobalFilter={setGlobalFilter}\n              />\n            </th>\n          </tr> */}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {firstPageRows.map((row, i) => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n      </table>\n      <br />\n      <div>Showing the first 20 results of {rows.length} rows</div>\n      <div>\n        <pre>\n          <code>{JSON.stringify(state.filters, null, 2)}</code>\n        </pre>\n      </div>\n      </div>\n    </>\n  )\n}\n\n// \n\n"]},"metadata":{},"sourceType":"module"}