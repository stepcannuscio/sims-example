{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/components/Chart.js\",\n    _s = $RefreshSig$();\n\nimport { ResponsiveContainer, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nexport default function Chart() {\n  _s();\n\n  const [salesData, setSalesData] = useState([]);\n  const [shopifyDateDict, setShopifyDateDict] = useState([]);\n\n  function getSales() {\n    axios.get('http://localhost:5000/orders/', {\n      withCredentials: true\n    }).then(response => {\n      // console.log(response)\n      if (response.data) {\n        setSalesData(response.data);\n        const salesByDate = [];\n        const shopifyDateDict = {};\n        const wooDateDict = {};\n        salesData.forEach(order => {\n          const orderDate = order.date.slice(0, 10);\n\n          if (order.source === \"Shopify\") {\n            // dateDict.orderDate.shopify += order.price\n            if (orderDate in shopifyDateDict) {\n              shopifyDateDict[orderDate] += order.price;\n            } else {\n              shopifyDateDict[orderDate] = order.price;\n            }\n          } else {\n            if (orderDate in wooDateDict) {\n              wooDateDict[orderDate] += order.price;\n            } else {\n              wooDateDict[orderDate] = order.price;\n            }\n          } //   const orderDate = order.date.slice(0,10)\n          //   if (orderDate in dateDict) {\n          //   } else {\n          //     if (order.source === \"Shopify\") {\n          //         console.log(order.price)\n          //         dateDict.orderDate = orderDate\n          //         dateDict.orderDate.shopify = order.price\n          //       } else {\n          //         dateDict.orderDate = orderDate\n          //           dateDict.orderDate.woo = order.price\n          //       }\n          //   }\n\n        });\n      } // if (response.data) {\n      //     const loadedProducts = []\n      //     response.data.forEach(product => {\n      //         const newProduct = {\n      //             productName: product.title,\n      //             id: product.id,\n      //             vendor: product.vendor,\n      //             quantity: 0,\n      //             variants: 0\n      //         }       \n      //         product.variants.forEach(variant => {\n      //             if (product.id === \"4553389015088\") {\n      //                 console.log(variant)\n      //             }\n      //             newProduct.variants += 1\n      //             newProduct.quantity += variant.quantity\n      //         })\n      //         // TALK WITH MARTY/TED ABOUT THESE QTY LEVELS\n      //         if (newProduct.quantity < 20) {\n      //             newProduct.stockLevel = \"Low\"\n      //         } else if (newProduct.quantity >= 20 && newProduct.quantity < 50) {\n      //             newProduct.stockLevel = \"Medium\"\n      //         } else {\n      //             newProduct.stockLevel = \"High\"\n      //         }\n      //         loadedProducts.push(newProduct)\n      //     })\n\n    });\n  }\n\n  useEffect(() => {\n    getSales();\n  }, []); //   const salesByDate = []\n  //   const shopifyDateDict = {}\n  //   const wooDateDict = {}\n  //   salesData.forEach(order => {\n  //       const orderDate = order.date.slice(0,10)\n  //       if (order.source === \"Shopify\") {\n  //         // dateDict.orderDate.shopify += order.price\n  //         if (orderDate in shopifyDateDict) {\n  //             shopifyDateDict[orderDate] += order.price\n  //         } else {\n  //             shopifyDateDict[orderDate] = order.price\n  //         }\n  //       } else {\n  //         if (orderDate in wooDateDict) {\n  //             wooDateDict[orderDate] += order.price\n  //         } else {\n  //             wooDateDict[orderDate] = order.price\n  //         }\n  //       }\n  //     //   const orderDate = order.date.slice(0,10)\n  //     //   if (orderDate in dateDict) {\n  //     //   } else {\n  //     //     if (order.source === \"Shopify\") {\n  //     //         console.log(order.price)\n  //     //         dateDict.orderDate = orderDate\n  //     //         dateDict.orderDate.shopify = order.price\n  //     //       } else {\n  //     //         dateDict.orderDate = orderDate\n  //     //           dateDict.orderDate.woo = order.price\n  //     //       }\n  //     //   }\n  //   })\n\n  console.log(shopifyDateDict);\n  console.log(wooDateDict);\n  const data = [{\n    name: 'Page A',\n    uv: 400,\n    pv: 1400,\n    amt: 1800\n  }, {\n    name: 'Page B',\n    uv: 500,\n    pv: 2500,\n    amt: 1600\n  }, {\n    name: 'Page C',\n    uv: 800,\n    pv: 3600,\n    amt: 2900\n  }, {\n    name: 'Page D',\n    uv: 700,\n    pv: 1200,\n    amt: 3200\n  }, {\n    name: 'Page E',\n    uv: 4095,\n    pv: 4900,\n    amt: 5600\n  }];\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"100%\",\n    height: \"80%\",\n    children: /*#__PURE__*/_jsxDEV(LineChart, {\n      data: data,\n      margin: {\n        right: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"uv\",\n        stroke: \"#8884d8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Line, {\n        type: \"monotone\",\n        dataKey: \"pv\",\n        stroke: \"red\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(CartesianGrid, {\n        stroke: \"#ccc\",\n        strokeDasharray: \"5 5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 9\n  }, this);\n} // //  margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\n// const renderLineChart = () => (\n// );\n// export default renderLineChart;\n\n_s(Chart, \"Op61fGGTr2xPQWkLno5QzxlSLDw=\");\n\n_c = Chart;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chart\");","map":{"version":3,"sources":["/Users/stepcannuscio/Desktop/Home/Clients/Burman's Health Shop/burm-inventory/frontend/src/components/Chart.js"],"names":["ResponsiveContainer","LineChart","Line","CartesianGrid","XAxis","YAxis","Tooltip","useEffect","useState","axios","Chart","salesData","setSalesData","shopifyDateDict","setShopifyDateDict","getSales","get","withCredentials","then","response","data","salesByDate","wooDateDict","forEach","order","orderDate","date","slice","source","price","console","log","name","uv","pv","amt","right"],"mappings":"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","sourcesContent":["import { ResponsiveContainer, LineChart, Line, CartesianGrid, XAxis, YAxis, Tooltip } from 'recharts';\nimport {useEffect, useState} from \"react\"\nimport axios from \"axios\"\n\nexport default function Chart() {\n\n    const [salesData, setSalesData] = useState([])\n    const [shopifyDateDict, setShopifyDateDict] = useState([])\n\n    function getSales() {\n        axios.get('http://localhost:5000/orders/', {withCredentials: true}).then(response => {\n            // console.log(response)\n            if (response.data) {\n                setSalesData(response.data)\n                const salesByDate = []\n                const shopifyDateDict = {}\n                const wooDateDict = {}\n          \n                salesData.forEach(order => {\n                    const orderDate = order.date.slice(0,10)\n                    if (order.source === \"Shopify\") {\n                      // dateDict.orderDate.shopify += order.price\n                      if (orderDate in shopifyDateDict) {\n                          shopifyDateDict[orderDate] += order.price\n                      } else {\n                          shopifyDateDict[orderDate] = order.price\n                      }\n                    } else {\n                      if (orderDate in wooDateDict) {\n                          wooDateDict[orderDate] += order.price\n                      } else {\n                          wooDateDict[orderDate] = order.price\n                      }\n                    }\n                    \n                  //   const orderDate = order.date.slice(0,10)\n                  //   if (orderDate in dateDict) {\n                       \n                        \n                  //   } else {\n                  //     if (order.source === \"Shopify\") {\n                  //         console.log(order.price)\n                  //         dateDict.orderDate = orderDate\n                  //         dateDict.orderDate.shopify = order.price\n                  //       } else {\n                  //         dateDict.orderDate = orderDate\n                  //           dateDict.orderDate.woo = order.price\n                  //       }\n                  //   }\n                    \n                })\n            }\n            // if (response.data) {\n            //     const loadedProducts = []\n            //     response.data.forEach(product => {\n            //         const newProduct = {\n            //             productName: product.title,\n            //             id: product.id,\n            //             vendor: product.vendor,\n            //             quantity: 0,\n            //             variants: 0\n            //         }       \n            //         product.variants.forEach(variant => {\n            //             if (product.id === \"4553389015088\") {\n            //                 console.log(variant)\n            //             }\n            //             newProduct.variants += 1\n            //             newProduct.quantity += variant.quantity\n            //         })\n            //         // TALK WITH MARTY/TED ABOUT THESE QTY LEVELS\n            //         if (newProduct.quantity < 20) {\n            //             newProduct.stockLevel = \"Low\"\n            //         } else if (newProduct.quantity >= 20 && newProduct.quantity < 50) {\n            //             newProduct.stockLevel = \"Medium\"\n            //         } else {\n            //             newProduct.stockLevel = \"High\"\n            //         }\n            //         loadedProducts.push(newProduct)\n            //     })\n\n               \n            })\n        \n      }\n  \n      useEffect(() => {\n        getSales()\n      }, []);\n\n    //   const salesByDate = []\n    //   const shopifyDateDict = {}\n    //   const wooDateDict = {}\n\n    //   salesData.forEach(order => {\n    //       const orderDate = order.date.slice(0,10)\n    //       if (order.source === \"Shopify\") {\n    //         // dateDict.orderDate.shopify += order.price\n    //         if (orderDate in shopifyDateDict) {\n    //             shopifyDateDict[orderDate] += order.price\n    //         } else {\n    //             shopifyDateDict[orderDate] = order.price\n    //         }\n    //       } else {\n    //         if (orderDate in wooDateDict) {\n    //             wooDateDict[orderDate] += order.price\n    //         } else {\n    //             wooDateDict[orderDate] = order.price\n    //         }\n    //       }\n          \n    //     //   const orderDate = order.date.slice(0,10)\n    //     //   if (orderDate in dateDict) {\n             \n              \n    //     //   } else {\n    //     //     if (order.source === \"Shopify\") {\n    //     //         console.log(order.price)\n    //     //         dateDict.orderDate = orderDate\n    //     //         dateDict.orderDate.shopify = order.price\n    //     //       } else {\n    //     //         dateDict.orderDate = orderDate\n    //     //           dateDict.orderDate.woo = order.price\n    //     //       }\n    //     //   }\n          \n    //   })\n      console.log(shopifyDateDict)\n      console.log(wooDateDict)\n    const data = [\n        {\n            name: 'Page A', uv: 400, pv: 1400, amt: 1800\n        },\n        {\n            name: 'Page B', uv: 500, pv: 2500, amt: 1600\n        },\n        {\n            name: 'Page C', uv: 800, pv: 3600, amt: 2900\n        },\n        {\n            name: 'Page D', uv: 700, pv: 1200, amt: 3200\n        },\n        {\n            name: 'Page E', uv: 4095, pv: 4900, amt: 5600\n        },\n         ];\n    return (\n        <ResponsiveContainer width=\"100%\" height=\"80%\" >\n        <LineChart data={data} margin={{right: 20}}>\n            <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n            <Line type=\"monotone\" dataKey=\"pv\" stroke=\"red\" />\n            <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n            <XAxis dataKey=\"name\" />\n            <YAxis/>\n            <Tooltip />\n        </LineChart>\n  </ResponsiveContainer>\n    )\n}\n\n// //  margin={{ top: 5, right: 20, bottom: 5, left: 0 }}\n// const renderLineChart = () => (\n   \n// );\n\n// export default renderLineChart;"]},"metadata":{},"sourceType":"module"}